//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DSCUpdater {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProjectDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProjectDataSet : global::System.Data.DataSet {
        
        private SESSIONDataTable tableSESSION;
        
        private USERUPDATEDataTable tableUSERUPDATE;
        
        private DSCEDITAppendTableDataTable tableDSCEDITAppendTable;
        
        private DSCEDITDataTable tableDSCEDIT;
        
        private DscUpdaterDataTable tableDscUpdater;
        
        private MstDscDataTable tableMstDsc;
        
        private MstIcDiscoVegDataTable tableMstIcDiscoVeg;
        
        private MstIcDrywellDataTable tableMstIcDrywell;
        
        private DscQcDataTable tableDscQc;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProjectDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SESSION"] != null)) {
                    base.Tables.Add(new SESSIONDataTable(ds.Tables["SESSION"]));
                }
                if ((ds.Tables["USERUPDATE"] != null)) {
                    base.Tables.Add(new USERUPDATEDataTable(ds.Tables["USERUPDATE"]));
                }
                if ((ds.Tables["DSCEDITAppendTable"] != null)) {
                    base.Tables.Add(new DSCEDITAppendTableDataTable(ds.Tables["DSCEDITAppendTable"]));
                }
                if ((ds.Tables["DSCEDIT"] != null)) {
                    base.Tables.Add(new DSCEDITDataTable(ds.Tables["DSCEDIT"]));
                }
                if ((ds.Tables["DscUpdater"] != null)) {
                    base.Tables.Add(new DscUpdaterDataTable(ds.Tables["DscUpdater"]));
                }
                if ((ds.Tables["MstDsc"] != null)) {
                    base.Tables.Add(new MstDscDataTable(ds.Tables["MstDsc"]));
                }
                if ((ds.Tables["MstIcDiscoVeg"] != null)) {
                    base.Tables.Add(new MstIcDiscoVegDataTable(ds.Tables["MstIcDiscoVeg"]));
                }
                if ((ds.Tables["MstIcDrywell"] != null)) {
                    base.Tables.Add(new MstIcDrywellDataTable(ds.Tables["MstIcDrywell"]));
                }
                if ((ds.Tables["DscQc"] != null)) {
                    base.Tables.Add(new DscQcDataTable(ds.Tables["DscQc"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SESSIONDataTable SESSION {
            get {
                return this.tableSESSION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public USERUPDATEDataTable USERUPDATE {
            get {
                return this.tableUSERUPDATE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DSCEDITAppendTableDataTable DSCEDITAppendTable {
            get {
                return this.tableDSCEDITAppendTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DSCEDITDataTable DSCEDIT {
            get {
                return this.tableDSCEDIT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DscUpdaterDataTable DscUpdater {
            get {
                return this.tableDscUpdater;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MstDscDataTable MstDsc {
            get {
                return this.tableMstDsc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MstIcDiscoVegDataTable MstIcDiscoVeg {
            get {
                return this.tableMstIcDiscoVeg;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MstIcDrywellDataTable MstIcDrywell {
            get {
                return this.tableMstIcDrywell;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DscQcDataTable DscQc {
            get {
                return this.tableDscQc;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProjectDataSet cln = ((ProjectDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SESSION"] != null)) {
                    base.Tables.Add(new SESSIONDataTable(ds.Tables["SESSION"]));
                }
                if ((ds.Tables["USERUPDATE"] != null)) {
                    base.Tables.Add(new USERUPDATEDataTable(ds.Tables["USERUPDATE"]));
                }
                if ((ds.Tables["DSCEDITAppendTable"] != null)) {
                    base.Tables.Add(new DSCEDITAppendTableDataTable(ds.Tables["DSCEDITAppendTable"]));
                }
                if ((ds.Tables["DSCEDIT"] != null)) {
                    base.Tables.Add(new DSCEDITDataTable(ds.Tables["DSCEDIT"]));
                }
                if ((ds.Tables["DscUpdater"] != null)) {
                    base.Tables.Add(new DscUpdaterDataTable(ds.Tables["DscUpdater"]));
                }
                if ((ds.Tables["MstDsc"] != null)) {
                    base.Tables.Add(new MstDscDataTable(ds.Tables["MstDsc"]));
                }
                if ((ds.Tables["MstIcDiscoVeg"] != null)) {
                    base.Tables.Add(new MstIcDiscoVegDataTable(ds.Tables["MstIcDiscoVeg"]));
                }
                if ((ds.Tables["MstIcDrywell"] != null)) {
                    base.Tables.Add(new MstIcDrywellDataTable(ds.Tables["MstIcDrywell"]));
                }
                if ((ds.Tables["DscQc"] != null)) {
                    base.Tables.Add(new DscQcDataTable(ds.Tables["DscQc"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSESSION = ((SESSIONDataTable)(base.Tables["SESSION"]));
            if ((initTable == true)) {
                if ((this.tableSESSION != null)) {
                    this.tableSESSION.InitVars();
                }
            }
            this.tableUSERUPDATE = ((USERUPDATEDataTable)(base.Tables["USERUPDATE"]));
            if ((initTable == true)) {
                if ((this.tableUSERUPDATE != null)) {
                    this.tableUSERUPDATE.InitVars();
                }
            }
            this.tableDSCEDITAppendTable = ((DSCEDITAppendTableDataTable)(base.Tables["DSCEDITAppendTable"]));
            if ((initTable == true)) {
                if ((this.tableDSCEDITAppendTable != null)) {
                    this.tableDSCEDITAppendTable.InitVars();
                }
            }
            this.tableDSCEDIT = ((DSCEDITDataTable)(base.Tables["DSCEDIT"]));
            if ((initTable == true)) {
                if ((this.tableDSCEDIT != null)) {
                    this.tableDSCEDIT.InitVars();
                }
            }
            this.tableDscUpdater = ((DscUpdaterDataTable)(base.Tables["DscUpdater"]));
            if ((initTable == true)) {
                if ((this.tableDscUpdater != null)) {
                    this.tableDscUpdater.InitVars();
                }
            }
            this.tableMstDsc = ((MstDscDataTable)(base.Tables["MstDsc"]));
            if ((initTable == true)) {
                if ((this.tableMstDsc != null)) {
                    this.tableMstDsc.InitVars();
                }
            }
            this.tableMstIcDiscoVeg = ((MstIcDiscoVegDataTable)(base.Tables["MstIcDiscoVeg"]));
            if ((initTable == true)) {
                if ((this.tableMstIcDiscoVeg != null)) {
                    this.tableMstIcDiscoVeg.InitVars();
                }
            }
            this.tableMstIcDrywell = ((MstIcDrywellDataTable)(base.Tables["MstIcDrywell"]));
            if ((initTable == true)) {
                if ((this.tableMstIcDrywell != null)) {
                    this.tableMstIcDrywell.InitVars();
                }
            }
            this.tableDscQc = ((DscQcDataTable)(base.Tables["DscQc"]));
            if ((initTable == true)) {
                if ((this.tableDscQc != null)) {
                    this.tableDscQc.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProjectDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProjectDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSESSION = new SESSIONDataTable();
            base.Tables.Add(this.tableSESSION);
            this.tableUSERUPDATE = new USERUPDATEDataTable();
            base.Tables.Add(this.tableUSERUPDATE);
            this.tableDSCEDITAppendTable = new DSCEDITAppendTableDataTable();
            base.Tables.Add(this.tableDSCEDITAppendTable);
            this.tableDSCEDIT = new DSCEDITDataTable();
            base.Tables.Add(this.tableDSCEDIT);
            this.tableDscUpdater = new DscUpdaterDataTable();
            base.Tables.Add(this.tableDscUpdater);
            this.tableMstDsc = new MstDscDataTable();
            base.Tables.Add(this.tableMstDsc);
            this.tableMstIcDiscoVeg = new MstIcDiscoVegDataTable();
            base.Tables.Add(this.tableMstIcDiscoVeg);
            this.tableMstIcDrywell = new MstIcDrywellDataTable();
            base.Tables.Add(this.tableMstIcDrywell);
            this.tableDscQc = new DscQcDataTable();
            base.Tables.Add(this.tableDscQc);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSESSION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUSERUPDATE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDSCEDITAppendTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDSCEDIT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDscUpdater() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMstDsc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMstIcDiscoVeg() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMstIcDrywell() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDscQc() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProjectDataSet ds = new ProjectDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SESSIONRowChangeEventHandler(object sender, SESSIONRowChangeEvent e);
        
        public delegate void USERUPDATERowChangeEventHandler(object sender, USERUPDATERowChangeEvent e);
        
        public delegate void DSCEDITAppendTableRowChangeEventHandler(object sender, DSCEDITAppendTableRowChangeEvent e);
        
        public delegate void DSCEDITRowChangeEventHandler(object sender, DSCEDITRowChangeEvent e);
        
        public delegate void DscUpdaterRowChangeEventHandler(object sender, DscUpdaterRowChangeEvent e);
        
        public delegate void MstDscRowChangeEventHandler(object sender, MstDscRowChangeEvent e);
        
        public delegate void MstIcDiscoVegRowChangeEventHandler(object sender, MstIcDiscoVegRowChangeEvent e);
        
        public delegate void MstIcDrywellRowChangeEventHandler(object sender, MstIcDrywellRowChangeEvent e);
        
        public delegate void DscQcRowChangeEventHandler(object sender, DscQcRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SESSIONDataTable : global::System.Data.TypedTableBase<SESSIONRow> {
            
            private global::System.Data.DataColumn columnedit_id;
            
            private global::System.Data.DataColumn columnedit_date;
            
            private global::System.Data.DataColumn columnedited_by;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONDataTable() {
                this.TableName = "SESSION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SESSIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SESSIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_idColumn {
                get {
                    return this.columnedit_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_dateColumn {
                get {
                    return this.columnedit_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edited_byColumn {
                get {
                    return this.columnedited_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow this[int index] {
                get {
                    return ((SESSIONRow)(this.Rows[index]));
                }
            }
            
            public event SESSIONRowChangeEventHandler SESSIONRowChanging;
            
            public event SESSIONRowChangeEventHandler SESSIONRowChanged;
            
            public event SESSIONRowChangeEventHandler SESSIONRowDeleting;
            
            public event SESSIONRowChangeEventHandler SESSIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSESSIONRow(SESSIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow AddSESSIONRow(int edit_id, System.DateTime edit_date, string edited_by) {
                SESSIONRow rowSESSIONRow = ((SESSIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        edit_id,
                        edit_date,
                        edited_by};
                rowSESSIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSESSIONRow);
                return rowSESSIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow FindByedit_id(int edit_id) {
                return ((SESSIONRow)(this.Rows.Find(new object[] {
                            edit_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SESSIONDataTable cln = ((SESSIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SESSIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnedit_id = base.Columns["edit_id"];
                this.columnedit_date = base.Columns["edit_date"];
                this.columnedited_by = base.Columns["edited_by"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnedit_id = new global::System.Data.DataColumn("edit_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_id);
                this.columnedit_date = new global::System.Data.DataColumn("edit_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_date);
                this.columnedited_by = new global::System.Data.DataColumn("edited_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedited_by);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnedit_id}, true));
                this.columnedit_id.AllowDBNull = false;
                this.columnedit_id.Unique = true;
                this.columnedit_date.AllowDBNull = false;
                this.columnedited_by.AllowDBNull = false;
                this.columnedited_by.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow NewSESSIONRow() {
                return ((SESSIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SESSIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SESSIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SESSIONRowChanged != null)) {
                    this.SESSIONRowChanged(this, new SESSIONRowChangeEvent(((SESSIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SESSIONRowChanging != null)) {
                    this.SESSIONRowChanging(this, new SESSIONRowChangeEvent(((SESSIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SESSIONRowDeleted != null)) {
                    this.SESSIONRowDeleted(this, new SESSIONRowChangeEvent(((SESSIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SESSIONRowDeleting != null)) {
                    this.SESSIONRowDeleting(this, new SESSIONRowChangeEvent(((SESSIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSESSIONRow(SESSIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataSet ds = new ProjectDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SESSIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class USERUPDATEDataTable : global::System.Data.TypedTableBase<USERUPDATERow> {
            
            private global::System.Data.DataColumn columndsc_id;
            
            private global::System.Data.DataColumn columnrno;
            
            private global::System.Data.DataColumn columnnew_roof_area_sqft;
            
            private global::System.Data.DataColumn columnnew_roof_disco_ic_area_sqft;
            
            private global::System.Data.DataColumn columnnew_roof_drywell_ic_area_sqft;
            
            private global::System.Data.DataColumn columnnew_park_area_sqft;
            
            private global::System.Data.DataColumn columnnew_park_disco_ic_area_sqft;
            
            private global::System.Data.DataColumn columnnew_park_drywell_ic_area_sqft;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERUPDATEDataTable() {
                this.TableName = "USERUPDATE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal USERUPDATEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected USERUPDATEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dsc_idColumn {
                get {
                    return this.columndsc_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rnoColumn {
                get {
                    return this.columnrno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_roof_area_sqftColumn {
                get {
                    return this.columnnew_roof_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_roof_disco_ic_area_sqftColumn {
                get {
                    return this.columnnew_roof_disco_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_roof_drywell_ic_area_sqftColumn {
                get {
                    return this.columnnew_roof_drywell_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_park_area_sqftColumn {
                get {
                    return this.columnnew_park_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_park_disco_ic_area_sqftColumn {
                get {
                    return this.columnnew_park_disco_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_park_drywell_ic_area_sqftColumn {
                get {
                    return this.columnnew_park_drywell_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERUPDATERow this[int index] {
                get {
                    return ((USERUPDATERow)(this.Rows[index]));
                }
            }
            
            public event USERUPDATERowChangeEventHandler USERUPDATERowChanging;
            
            public event USERUPDATERowChangeEventHandler USERUPDATERowChanged;
            
            public event USERUPDATERowChangeEventHandler USERUPDATERowDeleting;
            
            public event USERUPDATERowChangeEventHandler USERUPDATERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUSERUPDATERow(USERUPDATERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERUPDATERow AddUSERUPDATERow(int dsc_id, string rno, int new_roof_area_sqft, int new_roof_disco_ic_area_sqft, int new_roof_drywell_ic_area_sqft, int new_park_area_sqft, int new_park_disco_ic_area_sqft, int new_park_drywell_ic_area_sqft) {
                USERUPDATERow rowUSERUPDATERow = ((USERUPDATERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        dsc_id,
                        rno,
                        new_roof_area_sqft,
                        new_roof_disco_ic_area_sqft,
                        new_roof_drywell_ic_area_sqft,
                        new_park_area_sqft,
                        new_park_disco_ic_area_sqft,
                        new_park_drywell_ic_area_sqft};
                rowUSERUPDATERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUSERUPDATERow);
                return rowUSERUPDATERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERUPDATERow FindBydsc_id(int dsc_id) {
                return ((USERUPDATERow)(this.Rows.Find(new object[] {
                            dsc_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                USERUPDATEDataTable cln = ((USERUPDATEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new USERUPDATEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndsc_id = base.Columns["dsc_id"];
                this.columnrno = base.Columns["rno"];
                this.columnnew_roof_area_sqft = base.Columns["new_roof_area_sqft"];
                this.columnnew_roof_disco_ic_area_sqft = base.Columns["new_roof_disco_ic_area_sqft"];
                this.columnnew_roof_drywell_ic_area_sqft = base.Columns["new_roof_drywell_ic_area_sqft"];
                this.columnnew_park_area_sqft = base.Columns["new_park_area_sqft"];
                this.columnnew_park_disco_ic_area_sqft = base.Columns["new_park_disco_ic_area_sqft"];
                this.columnnew_park_drywell_ic_area_sqft = base.Columns["new_park_drywell_ic_area_sqft"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndsc_id = new global::System.Data.DataColumn("dsc_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsc_id);
                this.columnrno = new global::System.Data.DataColumn("rno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrno);
                this.columnnew_roof_area_sqft = new global::System.Data.DataColumn("new_roof_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_roof_area_sqft);
                this.columnnew_roof_disco_ic_area_sqft = new global::System.Data.DataColumn("new_roof_disco_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_roof_disco_ic_area_sqft);
                this.columnnew_roof_drywell_ic_area_sqft = new global::System.Data.DataColumn("new_roof_drywell_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_roof_drywell_ic_area_sqft);
                this.columnnew_park_area_sqft = new global::System.Data.DataColumn("new_park_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_park_area_sqft);
                this.columnnew_park_disco_ic_area_sqft = new global::System.Data.DataColumn("new_park_disco_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_park_disco_ic_area_sqft);
                this.columnnew_park_drywell_ic_area_sqft = new global::System.Data.DataColumn("new_park_drywell_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_park_drywell_ic_area_sqft);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndsc_id}, true));
                this.columndsc_id.AllowDBNull = false;
                this.columndsc_id.Unique = true;
                this.columnrno.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERUPDATERow NewUSERUPDATERow() {
                return ((USERUPDATERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new USERUPDATERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(USERUPDATERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.USERUPDATERowChanged != null)) {
                    this.USERUPDATERowChanged(this, new USERUPDATERowChangeEvent(((USERUPDATERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.USERUPDATERowChanging != null)) {
                    this.USERUPDATERowChanging(this, new USERUPDATERowChangeEvent(((USERUPDATERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.USERUPDATERowDeleted != null)) {
                    this.USERUPDATERowDeleted(this, new USERUPDATERowChangeEvent(((USERUPDATERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.USERUPDATERowDeleting != null)) {
                    this.USERUPDATERowDeleting(this, new USERUPDATERowChangeEvent(((USERUPDATERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUSERUPDATERow(USERUPDATERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataSet ds = new ProjectDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "USERUPDATEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DSCEDITAppendTableDataTable : global::System.Data.TypedTableBase<DSCEDITAppendTableRow> {
            
            private global::System.Data.DataColumn columndsc_edit_id;
            
            private global::System.Data.DataColumn columnedit_id;
            
            private global::System.Data.DataColumn columnedit_date;
            
            private global::System.Data.DataColumn columnedited_by;
            
            private global::System.Data.DataColumn columnrno;
            
            private global::System.Data.DataColumn columndsc_id;
            
            private global::System.Data.DataColumn columnold_roof_area_sqft;
            
            private global::System.Data.DataColumn columnnew_roof_area_sqft;
            
            private global::System.Data.DataColumn columnold_roof_disco_ic_area_sqft;
            
            private global::System.Data.DataColumn columnnew_roof_disco_ic_area_sqft;
            
            private global::System.Data.DataColumn columnold_roof_drywell_ic_area_sqft;
            
            private global::System.Data.DataColumn columnnew_roof_drywell_ic_area_sqft;
            
            private global::System.Data.DataColumn columnold_park_area_sqft;
            
            private global::System.Data.DataColumn columnnew_park_area_sqft;
            
            private global::System.Data.DataColumn columnold_park_disco_ic_area_sqft;
            
            private global::System.Data.DataColumn columnnew_park_disco_ic_area_sqft;
            
            private global::System.Data.DataColumn columnold_park_drywell_ic_area_sqft;
            
            private global::System.Data.DataColumn columnnew_park_drywell_ic_area_sqft;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DSCEDITAppendTableDataTable() {
                this.TableName = "DSCEDITAppendTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DSCEDITAppendTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DSCEDITAppendTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dsc_edit_idColumn {
                get {
                    return this.columndsc_edit_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_idColumn {
                get {
                    return this.columnedit_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_dateColumn {
                get {
                    return this.columnedit_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edited_byColumn {
                get {
                    return this.columnedited_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rnoColumn {
                get {
                    return this.columnrno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dsc_idColumn {
                get {
                    return this.columndsc_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn old_roof_area_sqftColumn {
                get {
                    return this.columnold_roof_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_roof_area_sqftColumn {
                get {
                    return this.columnnew_roof_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn old_roof_disco_ic_area_sqftColumn {
                get {
                    return this.columnold_roof_disco_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_roof_disco_ic_area_sqftColumn {
                get {
                    return this.columnnew_roof_disco_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn old_roof_drywell_ic_area_sqftColumn {
                get {
                    return this.columnold_roof_drywell_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_roof_drywell_ic_area_sqftColumn {
                get {
                    return this.columnnew_roof_drywell_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn old_park_area_sqftColumn {
                get {
                    return this.columnold_park_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_park_area_sqftColumn {
                get {
                    return this.columnnew_park_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn old_park_disco_ic_area_sqftColumn {
                get {
                    return this.columnold_park_disco_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_park_disco_ic_area_sqftColumn {
                get {
                    return this.columnnew_park_disco_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn old_park_drywell_ic_area_sqftColumn {
                get {
                    return this.columnold_park_drywell_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_park_drywell_ic_area_sqftColumn {
                get {
                    return this.columnnew_park_drywell_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DSCEDITAppendTableRow this[int index] {
                get {
                    return ((DSCEDITAppendTableRow)(this.Rows[index]));
                }
            }
            
            public event DSCEDITAppendTableRowChangeEventHandler DSCEDITAppendTableRowChanging;
            
            public event DSCEDITAppendTableRowChangeEventHandler DSCEDITAppendTableRowChanged;
            
            public event DSCEDITAppendTableRowChangeEventHandler DSCEDITAppendTableRowDeleting;
            
            public event DSCEDITAppendTableRowChangeEventHandler DSCEDITAppendTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDSCEDITAppendTableRow(DSCEDITAppendTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DSCEDITAppendTableRow AddDSCEDITAppendTableRow(
                        int dsc_edit_id, 
                        int edit_id, 
                        System.DateTime edit_date, 
                        string edited_by, 
                        string rno, 
                        int dsc_id, 
                        int old_roof_area_sqft, 
                        int new_roof_area_sqft, 
                        int old_roof_disco_ic_area_sqft, 
                        int new_roof_disco_ic_area_sqft, 
                        int old_roof_drywell_ic_area_sqft, 
                        int new_roof_drywell_ic_area_sqft, 
                        int old_park_area_sqft, 
                        int new_park_area_sqft, 
                        int old_park_disco_ic_area_sqft, 
                        int new_park_disco_ic_area_sqft, 
                        int old_park_drywell_ic_area_sqft, 
                        int new_park_drywell_ic_area_sqft) {
                DSCEDITAppendTableRow rowDSCEDITAppendTableRow = ((DSCEDITAppendTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        dsc_edit_id,
                        edit_id,
                        edit_date,
                        edited_by,
                        rno,
                        dsc_id,
                        old_roof_area_sqft,
                        new_roof_area_sqft,
                        old_roof_disco_ic_area_sqft,
                        new_roof_disco_ic_area_sqft,
                        old_roof_drywell_ic_area_sqft,
                        new_roof_drywell_ic_area_sqft,
                        old_park_area_sqft,
                        new_park_area_sqft,
                        old_park_disco_ic_area_sqft,
                        new_park_disco_ic_area_sqft,
                        old_park_drywell_ic_area_sqft,
                        new_park_drywell_ic_area_sqft};
                rowDSCEDITAppendTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDSCEDITAppendTableRow);
                return rowDSCEDITAppendTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DSCEDITAppendTableDataTable cln = ((DSCEDITAppendTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DSCEDITAppendTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndsc_edit_id = base.Columns["dsc_edit_id"];
                this.columnedit_id = base.Columns["edit_id"];
                this.columnedit_date = base.Columns["edit_date"];
                this.columnedited_by = base.Columns["edited_by"];
                this.columnrno = base.Columns["rno"];
                this.columndsc_id = base.Columns["dsc_id"];
                this.columnold_roof_area_sqft = base.Columns["old_roof_area_sqft"];
                this.columnnew_roof_area_sqft = base.Columns["new_roof_area_sqft"];
                this.columnold_roof_disco_ic_area_sqft = base.Columns["old_roof_disco_ic_area_sqft"];
                this.columnnew_roof_disco_ic_area_sqft = base.Columns["new_roof_disco_ic_area_sqft"];
                this.columnold_roof_drywell_ic_area_sqft = base.Columns["old_roof_drywell_ic_area_sqft"];
                this.columnnew_roof_drywell_ic_area_sqft = base.Columns["new_roof_drywell_ic_area_sqft"];
                this.columnold_park_area_sqft = base.Columns["old_park_area_sqft"];
                this.columnnew_park_area_sqft = base.Columns["new_park_area_sqft"];
                this.columnold_park_disco_ic_area_sqft = base.Columns["old_park_disco_ic_area_sqft"];
                this.columnnew_park_disco_ic_area_sqft = base.Columns["new_park_disco_ic_area_sqft"];
                this.columnold_park_drywell_ic_area_sqft = base.Columns["old_park_drywell_ic_area_sqft"];
                this.columnnew_park_drywell_ic_area_sqft = base.Columns["new_park_drywell_ic_area_sqft"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndsc_edit_id = new global::System.Data.DataColumn("dsc_edit_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsc_edit_id);
                this.columnedit_id = new global::System.Data.DataColumn("edit_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_id);
                this.columnedit_date = new global::System.Data.DataColumn("edit_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_date);
                this.columnedited_by = new global::System.Data.DataColumn("edited_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedited_by);
                this.columnrno = new global::System.Data.DataColumn("rno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrno);
                this.columndsc_id = new global::System.Data.DataColumn("dsc_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsc_id);
                this.columnold_roof_area_sqft = new global::System.Data.DataColumn("old_roof_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnold_roof_area_sqft);
                this.columnnew_roof_area_sqft = new global::System.Data.DataColumn("new_roof_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_roof_area_sqft);
                this.columnold_roof_disco_ic_area_sqft = new global::System.Data.DataColumn("old_roof_disco_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnold_roof_disco_ic_area_sqft);
                this.columnnew_roof_disco_ic_area_sqft = new global::System.Data.DataColumn("new_roof_disco_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_roof_disco_ic_area_sqft);
                this.columnold_roof_drywell_ic_area_sqft = new global::System.Data.DataColumn("old_roof_drywell_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnold_roof_drywell_ic_area_sqft);
                this.columnnew_roof_drywell_ic_area_sqft = new global::System.Data.DataColumn("new_roof_drywell_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_roof_drywell_ic_area_sqft);
                this.columnold_park_area_sqft = new global::System.Data.DataColumn("old_park_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnold_park_area_sqft);
                this.columnnew_park_area_sqft = new global::System.Data.DataColumn("new_park_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_park_area_sqft);
                this.columnold_park_disco_ic_area_sqft = new global::System.Data.DataColumn("old_park_disco_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnold_park_disco_ic_area_sqft);
                this.columnnew_park_disco_ic_area_sqft = new global::System.Data.DataColumn("new_park_disco_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_park_disco_ic_area_sqft);
                this.columnold_park_drywell_ic_area_sqft = new global::System.Data.DataColumn("old_park_drywell_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnold_park_drywell_ic_area_sqft);
                this.columnnew_park_drywell_ic_area_sqft = new global::System.Data.DataColumn("new_park_drywell_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_park_drywell_ic_area_sqft);
                this.columndsc_edit_id.AllowDBNull = false;
                this.columnedit_id.AllowDBNull = false;
                this.columnedit_date.AllowDBNull = false;
                this.columnedited_by.AllowDBNull = false;
                this.columnedited_by.MaxLength = 50;
                this.columnrno.AllowDBNull = false;
                this.columnrno.MaxLength = 30;
                this.columndsc_id.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DSCEDITAppendTableRow NewDSCEDITAppendTableRow() {
                return ((DSCEDITAppendTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DSCEDITAppendTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DSCEDITAppendTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DSCEDITAppendTableRowChanged != null)) {
                    this.DSCEDITAppendTableRowChanged(this, new DSCEDITAppendTableRowChangeEvent(((DSCEDITAppendTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DSCEDITAppendTableRowChanging != null)) {
                    this.DSCEDITAppendTableRowChanging(this, new DSCEDITAppendTableRowChangeEvent(((DSCEDITAppendTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DSCEDITAppendTableRowDeleted != null)) {
                    this.DSCEDITAppendTableRowDeleted(this, new DSCEDITAppendTableRowChangeEvent(((DSCEDITAppendTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DSCEDITAppendTableRowDeleting != null)) {
                    this.DSCEDITAppendTableRowDeleting(this, new DSCEDITAppendTableRowChangeEvent(((DSCEDITAppendTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDSCEDITAppendTableRow(DSCEDITAppendTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataSet ds = new ProjectDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DSCEDITAppendTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DSCEDITDataTable : global::System.Data.TypedTableBase<DSCEDITRow> {
            
            private global::System.Data.DataColumn columndsc_edit_id;
            
            private global::System.Data.DataColumn columnedit_id;
            
            private global::System.Data.DataColumn columnedit_date;
            
            private global::System.Data.DataColumn columnedited_by;
            
            private global::System.Data.DataColumn columnrno;
            
            private global::System.Data.DataColumn columndsc_id;
            
            private global::System.Data.DataColumn columnold_roof_area_sqft;
            
            private global::System.Data.DataColumn columnnew_roof_area_sqft;
            
            private global::System.Data.DataColumn columnold_roof_disco_ic_area_sqft;
            
            private global::System.Data.DataColumn columnnew_roof_disco_ic_area_sqft;
            
            private global::System.Data.DataColumn columnold_roof_drywell_ic_area_sqft;
            
            private global::System.Data.DataColumn columnnew_roof_drywell_ic_area_sqft;
            
            private global::System.Data.DataColumn columnold_park_area_sqft;
            
            private global::System.Data.DataColumn columnnew_park_area_sqft;
            
            private global::System.Data.DataColumn columnold_park_disco_ic_area_sqft;
            
            private global::System.Data.DataColumn columnnew_park_disco_ic_area_sqft;
            
            private global::System.Data.DataColumn columnold_park_drywell_ic_area_sqft;
            
            private global::System.Data.DataColumn columnnew_park_drywell_ic_area_sqft;
            
            private global::System.Data.DataColumn columnupdater_editor_value_changed;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DSCEDITDataTable() {
                this.TableName = "DSCEDIT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DSCEDITDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DSCEDITDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dsc_edit_idColumn {
                get {
                    return this.columndsc_edit_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_idColumn {
                get {
                    return this.columnedit_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edit_dateColumn {
                get {
                    return this.columnedit_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn edited_byColumn {
                get {
                    return this.columnedited_by;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rnoColumn {
                get {
                    return this.columnrno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dsc_idColumn {
                get {
                    return this.columndsc_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn old_roof_area_sqftColumn {
                get {
                    return this.columnold_roof_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_roof_area_sqftColumn {
                get {
                    return this.columnnew_roof_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn old_roof_disco_ic_area_sqftColumn {
                get {
                    return this.columnold_roof_disco_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_roof_disco_ic_area_sqftColumn {
                get {
                    return this.columnnew_roof_disco_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn old_roof_drywell_ic_area_sqftColumn {
                get {
                    return this.columnold_roof_drywell_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_roof_drywell_ic_area_sqftColumn {
                get {
                    return this.columnnew_roof_drywell_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn old_park_area_sqftColumn {
                get {
                    return this.columnold_park_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_park_area_sqftColumn {
                get {
                    return this.columnnew_park_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn old_park_disco_ic_area_sqftColumn {
                get {
                    return this.columnold_park_disco_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_park_disco_ic_area_sqftColumn {
                get {
                    return this.columnnew_park_disco_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn old_park_drywell_ic_area_sqftColumn {
                get {
                    return this.columnold_park_drywell_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn new_park_drywell_ic_area_sqftColumn {
                get {
                    return this.columnnew_park_drywell_ic_area_sqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn updater_editor_value_changedColumn {
                get {
                    return this.columnupdater_editor_value_changed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DSCEDITRow this[int index] {
                get {
                    return ((DSCEDITRow)(this.Rows[index]));
                }
            }
            
            public event DSCEDITRowChangeEventHandler DSCEDITRowChanging;
            
            public event DSCEDITRowChangeEventHandler DSCEDITRowChanged;
            
            public event DSCEDITRowChangeEventHandler DSCEDITRowDeleting;
            
            public event DSCEDITRowChangeEventHandler DSCEDITRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDSCEDITRow(DSCEDITRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DSCEDITRow AddDSCEDITRow(
                        int edit_id, 
                        System.DateTime edit_date, 
                        string edited_by, 
                        string rno, 
                        int dsc_id, 
                        int old_roof_area_sqft, 
                        int new_roof_area_sqft, 
                        int old_roof_disco_ic_area_sqft, 
                        int new_roof_disco_ic_area_sqft, 
                        int old_roof_drywell_ic_area_sqft, 
                        int new_roof_drywell_ic_area_sqft, 
                        int old_park_area_sqft, 
                        int new_park_area_sqft, 
                        int old_park_disco_ic_area_sqft, 
                        int new_park_disco_ic_area_sqft, 
                        int old_park_drywell_ic_area_sqft, 
                        int new_park_drywell_ic_area_sqft, 
                        bool updater_editor_value_changed) {
                DSCEDITRow rowDSCEDITRow = ((DSCEDITRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        edit_id,
                        edit_date,
                        edited_by,
                        rno,
                        dsc_id,
                        old_roof_area_sqft,
                        new_roof_area_sqft,
                        old_roof_disco_ic_area_sqft,
                        new_roof_disco_ic_area_sqft,
                        old_roof_drywell_ic_area_sqft,
                        new_roof_drywell_ic_area_sqft,
                        old_park_area_sqft,
                        new_park_area_sqft,
                        old_park_disco_ic_area_sqft,
                        new_park_disco_ic_area_sqft,
                        old_park_drywell_ic_area_sqft,
                        new_park_drywell_ic_area_sqft,
                        updater_editor_value_changed};
                rowDSCEDITRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDSCEDITRow);
                return rowDSCEDITRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DSCEDITRow FindBydsc_edit_id(int dsc_edit_id) {
                return ((DSCEDITRow)(this.Rows.Find(new object[] {
                            dsc_edit_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DSCEDITDataTable cln = ((DSCEDITDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DSCEDITDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndsc_edit_id = base.Columns["dsc_edit_id"];
                this.columnedit_id = base.Columns["edit_id"];
                this.columnedit_date = base.Columns["edit_date"];
                this.columnedited_by = base.Columns["edited_by"];
                this.columnrno = base.Columns["rno"];
                this.columndsc_id = base.Columns["dsc_id"];
                this.columnold_roof_area_sqft = base.Columns["old_roof_area_sqft"];
                this.columnnew_roof_area_sqft = base.Columns["new_roof_area_sqft"];
                this.columnold_roof_disco_ic_area_sqft = base.Columns["old_roof_disco_ic_area_sqft"];
                this.columnnew_roof_disco_ic_area_sqft = base.Columns["new_roof_disco_ic_area_sqft"];
                this.columnold_roof_drywell_ic_area_sqft = base.Columns["old_roof_drywell_ic_area_sqft"];
                this.columnnew_roof_drywell_ic_area_sqft = base.Columns["new_roof_drywell_ic_area_sqft"];
                this.columnold_park_area_sqft = base.Columns["old_park_area_sqft"];
                this.columnnew_park_area_sqft = base.Columns["new_park_area_sqft"];
                this.columnold_park_disco_ic_area_sqft = base.Columns["old_park_disco_ic_area_sqft"];
                this.columnnew_park_disco_ic_area_sqft = base.Columns["new_park_disco_ic_area_sqft"];
                this.columnold_park_drywell_ic_area_sqft = base.Columns["old_park_drywell_ic_area_sqft"];
                this.columnnew_park_drywell_ic_area_sqft = base.Columns["new_park_drywell_ic_area_sqft"];
                this.columnupdater_editor_value_changed = base.Columns["updater_editor_value_changed"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndsc_edit_id = new global::System.Data.DataColumn("dsc_edit_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsc_edit_id);
                this.columnedit_id = new global::System.Data.DataColumn("edit_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_id);
                this.columnedit_date = new global::System.Data.DataColumn("edit_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedit_date);
                this.columnedited_by = new global::System.Data.DataColumn("edited_by", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnedited_by);
                this.columnrno = new global::System.Data.DataColumn("rno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrno);
                this.columndsc_id = new global::System.Data.DataColumn("dsc_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndsc_id);
                this.columnold_roof_area_sqft = new global::System.Data.DataColumn("old_roof_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnold_roof_area_sqft);
                this.columnnew_roof_area_sqft = new global::System.Data.DataColumn("new_roof_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_roof_area_sqft);
                this.columnold_roof_disco_ic_area_sqft = new global::System.Data.DataColumn("old_roof_disco_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnold_roof_disco_ic_area_sqft);
                this.columnnew_roof_disco_ic_area_sqft = new global::System.Data.DataColumn("new_roof_disco_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_roof_disco_ic_area_sqft);
                this.columnold_roof_drywell_ic_area_sqft = new global::System.Data.DataColumn("old_roof_drywell_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnold_roof_drywell_ic_area_sqft);
                this.columnnew_roof_drywell_ic_area_sqft = new global::System.Data.DataColumn("new_roof_drywell_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_roof_drywell_ic_area_sqft);
                this.columnold_park_area_sqft = new global::System.Data.DataColumn("old_park_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnold_park_area_sqft);
                this.columnnew_park_area_sqft = new global::System.Data.DataColumn("new_park_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_park_area_sqft);
                this.columnold_park_disco_ic_area_sqft = new global::System.Data.DataColumn("old_park_disco_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnold_park_disco_ic_area_sqft);
                this.columnnew_park_disco_ic_area_sqft = new global::System.Data.DataColumn("new_park_disco_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_park_disco_ic_area_sqft);
                this.columnold_park_drywell_ic_area_sqft = new global::System.Data.DataColumn("old_park_drywell_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnold_park_drywell_ic_area_sqft);
                this.columnnew_park_drywell_ic_area_sqft = new global::System.Data.DataColumn("new_park_drywell_ic_area_sqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnew_park_drywell_ic_area_sqft);
                this.columnupdater_editor_value_changed = new global::System.Data.DataColumn("updater_editor_value_changed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupdater_editor_value_changed);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndsc_edit_id}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("DSCEDIT1Key1", new global::System.Data.DataColumn[] {
                                this.columndsc_edit_id,
                                this.columnedit_id}, false));
                this.columndsc_edit_id.AutoIncrement = true;
                this.columndsc_edit_id.AutoIncrementSeed = -1;
                this.columndsc_edit_id.AutoIncrementStep = -1;
                this.columndsc_edit_id.AllowDBNull = false;
                this.columndsc_edit_id.ReadOnly = true;
                this.columndsc_edit_id.Unique = true;
                this.columnedit_id.AllowDBNull = false;
                this.columnedit_date.AllowDBNull = false;
                this.columnedited_by.AllowDBNull = false;
                this.columnedited_by.MaxLength = 50;
                this.columnrno.MaxLength = 30;
                this.columndsc_id.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DSCEDITRow NewDSCEDITRow() {
                return ((DSCEDITRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DSCEDITRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DSCEDITRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DSCEDITRowChanged != null)) {
                    this.DSCEDITRowChanged(this, new DSCEDITRowChangeEvent(((DSCEDITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DSCEDITRowChanging != null)) {
                    this.DSCEDITRowChanging(this, new DSCEDITRowChangeEvent(((DSCEDITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DSCEDITRowDeleted != null)) {
                    this.DSCEDITRowDeleted(this, new DSCEDITRowChangeEvent(((DSCEDITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DSCEDITRowDeleting != null)) {
                    this.DSCEDITRowDeleting(this, new DSCEDITRowChangeEvent(((DSCEDITRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDSCEDITRow(DSCEDITRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataSet ds = new ProjectDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DSCEDITDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DscUpdaterDataTable : global::System.Data.TypedTableBase<DscUpdaterRow> {
            
            private global::System.Data.DataColumn columnRNo;
            
            private global::System.Data.DataColumn columnDscId;
            
            private global::System.Data.DataColumn columnNewRoofArea;
            
            private global::System.Data.DataColumn columnNewRoofDiscoArea;
            
            private global::System.Data.DataColumn columnNewRoofDrywellIcArea;
            
            private global::System.Data.DataColumn columnNewParkArea;
            
            private global::System.Data.DataColumn columnNewParkDiscoIcArea;
            
            private global::System.Data.DataColumn columnNewParkDrywellIcArea;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DscUpdaterDataTable() {
                this.TableName = "DscUpdater";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DscUpdaterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DscUpdaterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RNoColumn {
                get {
                    return this.columnRNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DscIdColumn {
                get {
                    return this.columnDscId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewRoofAreaColumn {
                get {
                    return this.columnNewRoofArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewRoofDiscoAreaColumn {
                get {
                    return this.columnNewRoofDiscoArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewRoofDrywellIcAreaColumn {
                get {
                    return this.columnNewRoofDrywellIcArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewParkAreaColumn {
                get {
                    return this.columnNewParkArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewParkDiscoIcAreaColumn {
                get {
                    return this.columnNewParkDiscoIcArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NewParkDrywellIcAreaColumn {
                get {
                    return this.columnNewParkDrywellIcArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DscUpdaterRow this[int index] {
                get {
                    return ((DscUpdaterRow)(this.Rows[index]));
                }
            }
            
            public event DscUpdaterRowChangeEventHandler DscUpdaterRowChanging;
            
            public event DscUpdaterRowChangeEventHandler DscUpdaterRowChanged;
            
            public event DscUpdaterRowChangeEventHandler DscUpdaterRowDeleting;
            
            public event DscUpdaterRowChangeEventHandler DscUpdaterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDscUpdaterRow(DscUpdaterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DscUpdaterRow AddDscUpdaterRow(string RNo, int DscId, double NewRoofArea, double NewRoofDiscoArea, double NewRoofDrywellIcArea, double NewParkArea, double NewParkDiscoIcArea, double NewParkDrywellIcArea) {
                DscUpdaterRow rowDscUpdaterRow = ((DscUpdaterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RNo,
                        DscId,
                        NewRoofArea,
                        NewRoofDiscoArea,
                        NewRoofDrywellIcArea,
                        NewParkArea,
                        NewParkDiscoIcArea,
                        NewParkDrywellIcArea};
                rowDscUpdaterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDscUpdaterRow);
                return rowDscUpdaterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DscUpdaterRow FindByDscId(int DscId) {
                return ((DscUpdaterRow)(this.Rows.Find(new object[] {
                            DscId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DscUpdaterDataTable cln = ((DscUpdaterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DscUpdaterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRNo = base.Columns["RNo"];
                this.columnDscId = base.Columns["DscId"];
                this.columnNewRoofArea = base.Columns["NewRoofArea"];
                this.columnNewRoofDiscoArea = base.Columns["NewRoofDiscoArea"];
                this.columnNewRoofDrywellIcArea = base.Columns["NewRoofDrywellIcArea"];
                this.columnNewParkArea = base.Columns["NewParkArea"];
                this.columnNewParkDiscoIcArea = base.Columns["NewParkDiscoIcArea"];
                this.columnNewParkDrywellIcArea = base.Columns["NewParkDrywellIcArea"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRNo = new global::System.Data.DataColumn("RNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRNo);
                this.columnDscId = new global::System.Data.DataColumn("DscId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDscId);
                this.columnNewRoofArea = new global::System.Data.DataColumn("NewRoofArea", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewRoofArea);
                this.columnNewRoofDiscoArea = new global::System.Data.DataColumn("NewRoofDiscoArea", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewRoofDiscoArea);
                this.columnNewRoofDrywellIcArea = new global::System.Data.DataColumn("NewRoofDrywellIcArea", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewRoofDrywellIcArea);
                this.columnNewParkArea = new global::System.Data.DataColumn("NewParkArea", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewParkArea);
                this.columnNewParkDiscoIcArea = new global::System.Data.DataColumn("NewParkDiscoIcArea", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewParkDiscoIcArea);
                this.columnNewParkDrywellIcArea = new global::System.Data.DataColumn("NewParkDrywellIcArea", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNewParkDrywellIcArea);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDscId}, true));
                this.columnRNo.Caption = "RNO";
                this.columnRNo.MaxLength = 255;
                this.columnDscId.AllowDBNull = false;
                this.columnDscId.Unique = true;
                this.columnDscId.Caption = "DSCID";
                this.columnNewRoofArea.Caption = "New Roof Area";
                this.columnNewRoofDiscoArea.Caption = "New Roof DISCO IC Area";
                this.columnNewRoofDrywellIcArea.Caption = "New Roof Drywell IC Area";
                this.columnNewParkArea.Caption = "New Park Area";
                this.columnNewParkDiscoIcArea.Caption = "New Park DISCO IC Area";
                this.columnNewParkDrywellIcArea.Caption = "New Park Drywell IC Area";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DscUpdaterRow NewDscUpdaterRow() {
                return ((DscUpdaterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DscUpdaterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DscUpdaterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DscUpdaterRowChanged != null)) {
                    this.DscUpdaterRowChanged(this, new DscUpdaterRowChangeEvent(((DscUpdaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DscUpdaterRowChanging != null)) {
                    this.DscUpdaterRowChanging(this, new DscUpdaterRowChangeEvent(((DscUpdaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DscUpdaterRowDeleted != null)) {
                    this.DscUpdaterRowDeleted(this, new DscUpdaterRowChangeEvent(((DscUpdaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DscUpdaterRowDeleting != null)) {
                    this.DscUpdaterRowDeleting(this, new DscUpdaterRowChangeEvent(((DscUpdaterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDscUpdaterRow(DscUpdaterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataSet ds = new ProjectDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DscUpdaterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MstDscDataTable : global::System.Data.TypedTableBase<MstDscRow> {
            
            private global::System.Data.DataColumn columnMAPINFO_ID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnDivideID;
            
            private global::System.Data.DataColumn columnDSCID;
            
            private global::System.Data.DataColumn columndiscoSiteID;
            
            private global::System.Data.DataColumn columnDiscoClass;
            
            private global::System.Data.DataColumn columnToMLinkSan;
            
            private global::System.Data.DataColumn columnToMLinkStorm;
            
            private global::System.Data.DataColumn columnPipeFlowTypeSan;
            
            private global::System.Data.DataColumn columnPipeFlowTypeStorm;
            
            private global::System.Data.DataColumn columnSanSwrCrown;
            
            private global::System.Data.DataColumn columnFrac2SwrBeg;
            
            private global::System.Data.DataColumn columnFloodRefElev;
            
            private global::System.Data.DataColumn columnFalseBFRisk;
            
            private global::System.Data.DataColumn columnRNO;
            
            private global::System.Data.DataColumn columnOWNER1;
            
            private global::System.Data.DataColumn columnOWNER2;
            
            private global::System.Data.DataColumn columnOWNER3;
            
            private global::System.Data.DataColumn columnOWNERADDR;
            
            private global::System.Data.DataColumn columnOWNERCITY;
            
            private global::System.Data.DataColumn columnOWNERSTATE;
            
            private global::System.Data.DataColumn columnOWNERZIP;
            
            private global::System.Data.DataColumn columnSITEADDR;
            
            private global::System.Data.DataColumn columnSITECITY;
            
            private global::System.Data.DataColumn columnSITE_STATE;
            
            private global::System.Data.DataColumn columnSITEZIP;
            
            private global::System.Data.DataColumn columnFloodRefElev_2;
            
            private global::System.Data.DataColumn columnisVacant;
            
            private global::System.Data.DataColumn columnZoneEX;
            
            private global::System.Data.DataColumn columnZoneCP;
            
            private global::System.Data.DataColumn columnGenEX;
            
            private global::System.Data.DataColumn columnGenCP;
            
            private global::System.Data.DataColumn columnPZsqft;
            
            private global::System.Data.DataColumn columnImpFractEX;
            
            private global::System.Data.DataColumn columnImpFractCP;
            
            private global::System.Data.DataColumn columnImpFractFB;
            
            private global::System.Data.DataColumn columnAreaFt;
            
            private global::System.Data.DataColumn columnRfAreaFtEX;
            
            private global::System.Data.DataColumn columnsurveyedRfAreaSqFt;
            
            private global::System.Data.DataColumn columnRfAreaFtFB;
            
            private global::System.Data.DataColumn columnroofAreaNeedsUpdate;
            
            private global::System.Data.DataColumn columnPkAreaFtEX;
            
            private global::System.Data.DataColumn columnPkAreaFtFB;
            
            private global::System.Data.DataColumn columnparkAreaNeedsUpdate;
            
            private global::System.Data.DataColumn columnBaseflowEXcfs;
            
            private global::System.Data.DataColumn columnBaseflowFBcfs;
            
            private global::System.Data.DataColumn columnBaseflowDMcfs;
            
            private global::System.Data.DataColumn columnGrowthState;
            
            private global::System.Data.DataColumn columnIncIA4FB;
            
            private global::System.Data.DataColumn columngisBasin;
            
            private global::System.Data.DataColumn columnICFtRoofEX;
            
            private global::System.Data.DataColumn columnICFtRoofFB;
            
            private global::System.Data.DataColumn columnICFtParkEX;
            
            private global::System.Data.DataColumn columnICFtParkFB;
            
            private global::System.Data.DataColumn columnEICFtRoofEX;
            
            private global::System.Data.DataColumn columnEICFtParkEX;
            
            private global::System.Data.DataColumn columnEICFtRoofFB;
            
            private global::System.Data.DataColumn columnEICFtParkFB;
            
            private global::System.Data.DataColumn columnSewerable;
            
            private global::System.Data.DataColumn columnSourceQuality;
            
            private global::System.Data.DataColumn columnSeptic;
            
            private global::System.Data.DataColumn columnHasBasement;
            
            private global::System.Data.DataColumn columnsurveyedPkAreaSqFt;
            
            private global::System.Data.DataColumn columnEICFtRoofEX1;
            
            private global::System.Data.DataColumn columnEICFtParkEX1;
            
            private global::System.Data.DataColumn columnEICFtRoofFB1;
            
            private global::System.Data.DataColumn columnEICFtParkFB1;
            
            private global::System.Data.DataColumn columnShape_Length;
            
            private global::System.Data.DataColumn columnShape_Area;
            
            private global::System.Data.DataColumn columnPzone;
            
            private global::System.Data.DataColumn columnPROPERTYID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscDataTable() {
                this.TableName = "MstDsc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstDscDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MstDscDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPINFO_IDColumn {
                get {
                    return this.columnMAPINFO_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DivideIDColumn {
                get {
                    return this.columnDivideID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DSCIDColumn {
                get {
                    return this.columnDSCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn discoSiteIDColumn {
                get {
                    return this.columndiscoSiteID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiscoClassColumn {
                get {
                    return this.columnDiscoClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToMLinkSanColumn {
                get {
                    return this.columnToMLinkSan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ToMLinkStormColumn {
                get {
                    return this.columnToMLinkStorm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeFlowTypeSanColumn {
                get {
                    return this.columnPipeFlowTypeSan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PipeFlowTypeStormColumn {
                get {
                    return this.columnPipeFlowTypeStorm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SanSwrCrownColumn {
                get {
                    return this.columnSanSwrCrown;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Frac2SwrBegColumn {
                get {
                    return this.columnFrac2SwrBeg;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FloodRefElevColumn {
                get {
                    return this.columnFloodRefElev;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FalseBFRiskColumn {
                get {
                    return this.columnFalseBFRisk;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RNOColumn {
                get {
                    return this.columnRNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER1Column {
                get {
                    return this.columnOWNER1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER2Column {
                get {
                    return this.columnOWNER2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNER3Column {
                get {
                    return this.columnOWNER3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNERADDRColumn {
                get {
                    return this.columnOWNERADDR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNERCITYColumn {
                get {
                    return this.columnOWNERCITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNERSTATEColumn {
                get {
                    return this.columnOWNERSTATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OWNERZIPColumn {
                get {
                    return this.columnOWNERZIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SITEADDRColumn {
                get {
                    return this.columnSITEADDR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SITECITYColumn {
                get {
                    return this.columnSITECITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SITE_STATEColumn {
                get {
                    return this.columnSITE_STATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SITEZIPColumn {
                get {
                    return this.columnSITEZIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FloodRefElev_2Column {
                get {
                    return this.columnFloodRefElev_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isVacantColumn {
                get {
                    return this.columnisVacant;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneEXColumn {
                get {
                    return this.columnZoneEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ZoneCPColumn {
                get {
                    return this.columnZoneCP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenEXColumn {
                get {
                    return this.columnGenEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenCPColumn {
                get {
                    return this.columnGenCP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PZsqftColumn {
                get {
                    return this.columnPZsqft;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpFractEXColumn {
                get {
                    return this.columnImpFractEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpFractCPColumn {
                get {
                    return this.columnImpFractCP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImpFractFBColumn {
                get {
                    return this.columnImpFractFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaFtColumn {
                get {
                    return this.columnAreaFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RfAreaFtEXColumn {
                get {
                    return this.columnRfAreaFtEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn surveyedRfAreaSqFtColumn {
                get {
                    return this.columnsurveyedRfAreaSqFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RfAreaFtFBColumn {
                get {
                    return this.columnRfAreaFtFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn roofAreaNeedsUpdateColumn {
                get {
                    return this.columnroofAreaNeedsUpdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PkAreaFtEXColumn {
                get {
                    return this.columnPkAreaFtEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PkAreaFtFBColumn {
                get {
                    return this.columnPkAreaFtFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn parkAreaNeedsUpdateColumn {
                get {
                    return this.columnparkAreaNeedsUpdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseflowEXcfsColumn {
                get {
                    return this.columnBaseflowEXcfs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseflowFBcfsColumn {
                get {
                    return this.columnBaseflowFBcfs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseflowDMcfsColumn {
                get {
                    return this.columnBaseflowDMcfs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrowthStateColumn {
                get {
                    return this.columnGrowthState;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncIA4FBColumn {
                get {
                    return this.columnIncIA4FB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn gisBasinColumn {
                get {
                    return this.columngisBasin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICFtRoofEXColumn {
                get {
                    return this.columnICFtRoofEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICFtRoofFBColumn {
                get {
                    return this.columnICFtRoofFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICFtParkEXColumn {
                get {
                    return this.columnICFtParkEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICFtParkFBColumn {
                get {
                    return this.columnICFtParkFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EICFtRoofEXColumn {
                get {
                    return this.columnEICFtRoofEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EICFtParkEXColumn {
                get {
                    return this.columnEICFtParkEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EICFtRoofFBColumn {
                get {
                    return this.columnEICFtRoofFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EICFtParkFBColumn {
                get {
                    return this.columnEICFtParkFB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SewerableColumn {
                get {
                    return this.columnSewerable;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceQualityColumn {
                get {
                    return this.columnSourceQuality;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SepticColumn {
                get {
                    return this.columnSeptic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasBasementColumn {
                get {
                    return this.columnHasBasement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn surveyedPkAreaSqFtColumn {
                get {
                    return this.columnsurveyedPkAreaSqFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EICFtRoofEX1Column {
                get {
                    return this.columnEICFtRoofEX1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EICFtParkEX1Column {
                get {
                    return this.columnEICFtParkEX1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EICFtRoofFB1Column {
                get {
                    return this.columnEICFtRoofFB1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EICFtParkFB1Column {
                get {
                    return this.columnEICFtParkFB1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Shape_LengthColumn {
                get {
                    return this.columnShape_Length;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Shape_AreaColumn {
                get {
                    return this.columnShape_Area;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PzoneColumn {
                get {
                    return this.columnPzone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PROPERTYIDColumn {
                get {
                    return this.columnPROPERTYID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscRow this[int index] {
                get {
                    return ((MstDscRow)(this.Rows[index]));
                }
            }
            
            public event MstDscRowChangeEventHandler MstDscRowChanging;
            
            public event MstDscRowChangeEventHandler MstDscRowChanged;
            
            public event MstDscRowChangeEventHandler MstDscRowDeleting;
            
            public event MstDscRowChangeEventHandler MstDscRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMstDscRow(MstDscRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscRow AddMstDscRow(
                        int ParcelID, 
                        int DivideID, 
                        int DSCID, 
                        int discoSiteID, 
                        string DiscoClass, 
                        int ToMLinkSan, 
                        int ToMLinkStorm, 
                        string PipeFlowTypeSan, 
                        string PipeFlowTypeStorm, 
                        double SanSwrCrown, 
                        double Frac2SwrBeg, 
                        double FloodRefElev, 
                        bool FalseBFRisk, 
                        string RNO, 
                        string OWNER1, 
                        string OWNER2, 
                        string OWNER3, 
                        string OWNERADDR, 
                        string OWNERCITY, 
                        string OWNERSTATE, 
                        string OWNERZIP, 
                        string SITEADDR, 
                        string SITECITY, 
                        string SITE_STATE, 
                        string SITEZIP, 
                        double FloodRefElev_2, 
                        bool isVacant, 
                        string ZoneEX, 
                        string ZoneCP, 
                        string GenEX, 
                        string GenCP, 
                        int PZsqft, 
                        double ImpFractEX, 
                        double ImpFractCP, 
                        double ImpFractFB, 
                        int AreaFt, 
                        int RfAreaFtEX, 
                        int surveyedRfAreaSqFt, 
                        int RfAreaFtFB, 
                        bool roofAreaNeedsUpdate, 
                        int PkAreaFtEX, 
                        int PkAreaFtFB, 
                        bool parkAreaNeedsUpdate, 
                        double BaseflowEXcfs, 
                        double BaseflowFBcfs, 
                        double BaseflowDMcfs, 
                        int GrowthState, 
                        bool IncIA4FB, 
                        string gisBasin, 
                        int ICFtRoofEX, 
                        int ICFtRoofFB, 
                        int ICFtParkEX, 
                        int ICFtParkFB, 
                        double EICFtRoofEX, 
                        double EICFtParkEX, 
                        double EICFtRoofFB, 
                        double EICFtParkFB, 
                        int Sewerable, 
                        string SourceQuality, 
                        bool Septic, 
                        int HasBasement, 
                        int surveyedPkAreaSqFt, 
                        int EICFtRoofEX1, 
                        int EICFtParkEX1, 
                        int EICFtRoofFB1, 
                        int EICFtParkFB1, 
                        double Shape_Length, 
                        double Shape_Area, 
                        bool Pzone, 
                        string PROPERTYID) {
                MstDscRow rowMstDscRow = ((MstDscRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ParcelID,
                        DivideID,
                        DSCID,
                        discoSiteID,
                        DiscoClass,
                        ToMLinkSan,
                        ToMLinkStorm,
                        PipeFlowTypeSan,
                        PipeFlowTypeStorm,
                        SanSwrCrown,
                        Frac2SwrBeg,
                        FloodRefElev,
                        FalseBFRisk,
                        RNO,
                        OWNER1,
                        OWNER2,
                        OWNER3,
                        OWNERADDR,
                        OWNERCITY,
                        OWNERSTATE,
                        OWNERZIP,
                        SITEADDR,
                        SITECITY,
                        SITE_STATE,
                        SITEZIP,
                        FloodRefElev_2,
                        isVacant,
                        ZoneEX,
                        ZoneCP,
                        GenEX,
                        GenCP,
                        PZsqft,
                        ImpFractEX,
                        ImpFractCP,
                        ImpFractFB,
                        AreaFt,
                        RfAreaFtEX,
                        surveyedRfAreaSqFt,
                        RfAreaFtFB,
                        roofAreaNeedsUpdate,
                        PkAreaFtEX,
                        PkAreaFtFB,
                        parkAreaNeedsUpdate,
                        BaseflowEXcfs,
                        BaseflowFBcfs,
                        BaseflowDMcfs,
                        GrowthState,
                        IncIA4FB,
                        gisBasin,
                        ICFtRoofEX,
                        ICFtRoofFB,
                        ICFtParkEX,
                        ICFtParkFB,
                        EICFtRoofEX,
                        EICFtParkEX,
                        EICFtRoofFB,
                        EICFtParkFB,
                        Sewerable,
                        SourceQuality,
                        Septic,
                        HasBasement,
                        surveyedPkAreaSqFt,
                        EICFtRoofEX1,
                        EICFtParkEX1,
                        EICFtRoofFB1,
                        EICFtParkFB1,
                        Shape_Length,
                        Shape_Area,
                        Pzone,
                        PROPERTYID};
                rowMstDscRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMstDscRow);
                return rowMstDscRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscRow FindByDSCID(int DSCID) {
                return ((MstDscRow)(this.Rows.Find(new object[] {
                            DSCID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MstDscDataTable cln = ((MstDscDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MstDscDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAPINFO_ID = base.Columns["MAPINFO_ID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnDivideID = base.Columns["DivideID"];
                this.columnDSCID = base.Columns["DSCID"];
                this.columndiscoSiteID = base.Columns["discoSiteID"];
                this.columnDiscoClass = base.Columns["DiscoClass"];
                this.columnToMLinkSan = base.Columns["ToMLinkSan"];
                this.columnToMLinkStorm = base.Columns["ToMLinkStorm"];
                this.columnPipeFlowTypeSan = base.Columns["PipeFlowTypeSan"];
                this.columnPipeFlowTypeStorm = base.Columns["PipeFlowTypeStorm"];
                this.columnSanSwrCrown = base.Columns["SanSwrCrown"];
                this.columnFrac2SwrBeg = base.Columns["Frac2SwrBeg"];
                this.columnFloodRefElev = base.Columns["FloodRefElev"];
                this.columnFalseBFRisk = base.Columns["FalseBFRisk"];
                this.columnRNO = base.Columns["RNO"];
                this.columnOWNER1 = base.Columns["OWNER1"];
                this.columnOWNER2 = base.Columns["OWNER2"];
                this.columnOWNER3 = base.Columns["OWNER3"];
                this.columnOWNERADDR = base.Columns["OWNERADDR"];
                this.columnOWNERCITY = base.Columns["OWNERCITY"];
                this.columnOWNERSTATE = base.Columns["OWNERSTATE"];
                this.columnOWNERZIP = base.Columns["OWNERZIP"];
                this.columnSITEADDR = base.Columns["SITEADDR"];
                this.columnSITECITY = base.Columns["SITECITY"];
                this.columnSITE_STATE = base.Columns["SITE_STATE"];
                this.columnSITEZIP = base.Columns["SITEZIP"];
                this.columnFloodRefElev_2 = base.Columns["FloodRefElev_2"];
                this.columnisVacant = base.Columns["isVacant"];
                this.columnZoneEX = base.Columns["ZoneEX"];
                this.columnZoneCP = base.Columns["ZoneCP"];
                this.columnGenEX = base.Columns["GenEX"];
                this.columnGenCP = base.Columns["GenCP"];
                this.columnPZsqft = base.Columns["PZsqft"];
                this.columnImpFractEX = base.Columns["ImpFractEX"];
                this.columnImpFractCP = base.Columns["ImpFractCP"];
                this.columnImpFractFB = base.Columns["ImpFractFB"];
                this.columnAreaFt = base.Columns["AreaFt"];
                this.columnRfAreaFtEX = base.Columns["RfAreaFtEX"];
                this.columnsurveyedRfAreaSqFt = base.Columns["surveyedRfAreaSqFt"];
                this.columnRfAreaFtFB = base.Columns["RfAreaFtFB"];
                this.columnroofAreaNeedsUpdate = base.Columns["roofAreaNeedsUpdate"];
                this.columnPkAreaFtEX = base.Columns["PkAreaFtEX"];
                this.columnPkAreaFtFB = base.Columns["PkAreaFtFB"];
                this.columnparkAreaNeedsUpdate = base.Columns["parkAreaNeedsUpdate"];
                this.columnBaseflowEXcfs = base.Columns["BaseflowEXcfs"];
                this.columnBaseflowFBcfs = base.Columns["BaseflowFBcfs"];
                this.columnBaseflowDMcfs = base.Columns["BaseflowDMcfs"];
                this.columnGrowthState = base.Columns["GrowthState"];
                this.columnIncIA4FB = base.Columns["IncIA4FB"];
                this.columngisBasin = base.Columns["gisBasin"];
                this.columnICFtRoofEX = base.Columns["ICFtRoofEX"];
                this.columnICFtRoofFB = base.Columns["ICFtRoofFB"];
                this.columnICFtParkEX = base.Columns["ICFtParkEX"];
                this.columnICFtParkFB = base.Columns["ICFtParkFB"];
                this.columnEICFtRoofEX = base.Columns["EICFtRoofEX"];
                this.columnEICFtParkEX = base.Columns["EICFtParkEX"];
                this.columnEICFtRoofFB = base.Columns["EICFtRoofFB"];
                this.columnEICFtParkFB = base.Columns["EICFtParkFB"];
                this.columnSewerable = base.Columns["Sewerable"];
                this.columnSourceQuality = base.Columns["SourceQuality"];
                this.columnSeptic = base.Columns["Septic"];
                this.columnHasBasement = base.Columns["HasBasement"];
                this.columnsurveyedPkAreaSqFt = base.Columns["surveyedPkAreaSqFt"];
                this.columnEICFtRoofEX1 = base.Columns["EICFtRoofEX1"];
                this.columnEICFtParkEX1 = base.Columns["EICFtParkEX1"];
                this.columnEICFtRoofFB1 = base.Columns["EICFtRoofFB1"];
                this.columnEICFtParkFB1 = base.Columns["EICFtParkFB1"];
                this.columnShape_Length = base.Columns["Shape_Length"];
                this.columnShape_Area = base.Columns["Shape_Area"];
                this.columnPzone = base.Columns["Pzone"];
                this.columnPROPERTYID = base.Columns["PROPERTYID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAPINFO_ID = new global::System.Data.DataColumn("MAPINFO_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPINFO_ID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnDivideID = new global::System.Data.DataColumn("DivideID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDivideID);
                this.columnDSCID = new global::System.Data.DataColumn("DSCID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDSCID);
                this.columndiscoSiteID = new global::System.Data.DataColumn("discoSiteID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiscoSiteID);
                this.columnDiscoClass = new global::System.Data.DataColumn("DiscoClass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscoClass);
                this.columnToMLinkSan = new global::System.Data.DataColumn("ToMLinkSan", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToMLinkSan);
                this.columnToMLinkStorm = new global::System.Data.DataColumn("ToMLinkStorm", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnToMLinkStorm);
                this.columnPipeFlowTypeSan = new global::System.Data.DataColumn("PipeFlowTypeSan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeFlowTypeSan);
                this.columnPipeFlowTypeStorm = new global::System.Data.DataColumn("PipeFlowTypeStorm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPipeFlowTypeStorm);
                this.columnSanSwrCrown = new global::System.Data.DataColumn("SanSwrCrown", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSanSwrCrown);
                this.columnFrac2SwrBeg = new global::System.Data.DataColumn("Frac2SwrBeg", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFrac2SwrBeg);
                this.columnFloodRefElev = new global::System.Data.DataColumn("FloodRefElev", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloodRefElev);
                this.columnFalseBFRisk = new global::System.Data.DataColumn("FalseBFRisk", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFalseBFRisk);
                this.columnRNO = new global::System.Data.DataColumn("RNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRNO);
                this.columnOWNER1 = new global::System.Data.DataColumn("OWNER1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNER1);
                this.columnOWNER2 = new global::System.Data.DataColumn("OWNER2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNER2);
                this.columnOWNER3 = new global::System.Data.DataColumn("OWNER3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNER3);
                this.columnOWNERADDR = new global::System.Data.DataColumn("OWNERADDR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNERADDR);
                this.columnOWNERCITY = new global::System.Data.DataColumn("OWNERCITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNERCITY);
                this.columnOWNERSTATE = new global::System.Data.DataColumn("OWNERSTATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNERSTATE);
                this.columnOWNERZIP = new global::System.Data.DataColumn("OWNERZIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOWNERZIP);
                this.columnSITEADDR = new global::System.Data.DataColumn("SITEADDR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSITEADDR);
                this.columnSITECITY = new global::System.Data.DataColumn("SITECITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSITECITY);
                this.columnSITE_STATE = new global::System.Data.DataColumn("SITE_STATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSITE_STATE);
                this.columnSITEZIP = new global::System.Data.DataColumn("SITEZIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSITEZIP);
                this.columnFloodRefElev_2 = new global::System.Data.DataColumn("FloodRefElev_2", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFloodRefElev_2);
                this.columnisVacant = new global::System.Data.DataColumn("isVacant", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisVacant);
                this.columnZoneEX = new global::System.Data.DataColumn("ZoneEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneEX);
                this.columnZoneCP = new global::System.Data.DataColumn("ZoneCP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneCP);
                this.columnGenEX = new global::System.Data.DataColumn("GenEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenEX);
                this.columnGenCP = new global::System.Data.DataColumn("GenCP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGenCP);
                this.columnPZsqft = new global::System.Data.DataColumn("PZsqft", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPZsqft);
                this.columnImpFractEX = new global::System.Data.DataColumn("ImpFractEX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpFractEX);
                this.columnImpFractCP = new global::System.Data.DataColumn("ImpFractCP", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpFractCP);
                this.columnImpFractFB = new global::System.Data.DataColumn("ImpFractFB", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImpFractFB);
                this.columnAreaFt = new global::System.Data.DataColumn("AreaFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaFt);
                this.columnRfAreaFtEX = new global::System.Data.DataColumn("RfAreaFtEX", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRfAreaFtEX);
                this.columnsurveyedRfAreaSqFt = new global::System.Data.DataColumn("surveyedRfAreaSqFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsurveyedRfAreaSqFt);
                this.columnRfAreaFtFB = new global::System.Data.DataColumn("RfAreaFtFB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRfAreaFtFB);
                this.columnroofAreaNeedsUpdate = new global::System.Data.DataColumn("roofAreaNeedsUpdate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnroofAreaNeedsUpdate);
                this.columnPkAreaFtEX = new global::System.Data.DataColumn("PkAreaFtEX", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPkAreaFtEX);
                this.columnPkAreaFtFB = new global::System.Data.DataColumn("PkAreaFtFB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPkAreaFtFB);
                this.columnparkAreaNeedsUpdate = new global::System.Data.DataColumn("parkAreaNeedsUpdate", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnparkAreaNeedsUpdate);
                this.columnBaseflowEXcfs = new global::System.Data.DataColumn("BaseflowEXcfs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseflowEXcfs);
                this.columnBaseflowFBcfs = new global::System.Data.DataColumn("BaseflowFBcfs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseflowFBcfs);
                this.columnBaseflowDMcfs = new global::System.Data.DataColumn("BaseflowDMcfs", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseflowDMcfs);
                this.columnGrowthState = new global::System.Data.DataColumn("GrowthState", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrowthState);
                this.columnIncIA4FB = new global::System.Data.DataColumn("IncIA4FB", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncIA4FB);
                this.columngisBasin = new global::System.Data.DataColumn("gisBasin", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngisBasin);
                this.columnICFtRoofEX = new global::System.Data.DataColumn("ICFtRoofEX", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICFtRoofEX);
                this.columnICFtRoofFB = new global::System.Data.DataColumn("ICFtRoofFB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICFtRoofFB);
                this.columnICFtParkEX = new global::System.Data.DataColumn("ICFtParkEX", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICFtParkEX);
                this.columnICFtParkFB = new global::System.Data.DataColumn("ICFtParkFB", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICFtParkFB);
                this.columnEICFtRoofEX = new global::System.Data.DataColumn("EICFtRoofEX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEICFtRoofEX);
                this.columnEICFtParkEX = new global::System.Data.DataColumn("EICFtParkEX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEICFtParkEX);
                this.columnEICFtRoofFB = new global::System.Data.DataColumn("EICFtRoofFB", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEICFtRoofFB);
                this.columnEICFtParkFB = new global::System.Data.DataColumn("EICFtParkFB", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEICFtParkFB);
                this.columnSewerable = new global::System.Data.DataColumn("Sewerable", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSewerable);
                this.columnSourceQuality = new global::System.Data.DataColumn("SourceQuality", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceQuality);
                this.columnSeptic = new global::System.Data.DataColumn("Septic", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeptic);
                this.columnHasBasement = new global::System.Data.DataColumn("HasBasement", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasBasement);
                this.columnsurveyedPkAreaSqFt = new global::System.Data.DataColumn("surveyedPkAreaSqFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsurveyedPkAreaSqFt);
                this.columnEICFtRoofEX1 = new global::System.Data.DataColumn("EICFtRoofEX1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEICFtRoofEX1);
                this.columnEICFtParkEX1 = new global::System.Data.DataColumn("EICFtParkEX1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEICFtParkEX1);
                this.columnEICFtRoofFB1 = new global::System.Data.DataColumn("EICFtRoofFB1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEICFtRoofFB1);
                this.columnEICFtParkFB1 = new global::System.Data.DataColumn("EICFtParkFB1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEICFtParkFB1);
                this.columnShape_Length = new global::System.Data.DataColumn("Shape_Length", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShape_Length);
                this.columnShape_Area = new global::System.Data.DataColumn("Shape_Area", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShape_Area);
                this.columnPzone = new global::System.Data.DataColumn("Pzone", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPzone);
                this.columnPROPERTYID = new global::System.Data.DataColumn("PROPERTYID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPROPERTYID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDSCID}, true));
                this.columnMAPINFO_ID.AutoIncrement = true;
                this.columnMAPINFO_ID.AutoIncrementSeed = -1;
                this.columnMAPINFO_ID.AutoIncrementStep = -1;
                this.columnMAPINFO_ID.AllowDBNull = false;
                this.columnMAPINFO_ID.ReadOnly = true;
                this.columnDSCID.AllowDBNull = false;
                this.columnDSCID.Unique = true;
                this.columnDiscoClass.MaxLength = 1;
                this.columnPipeFlowTypeSan.MaxLength = 1;
                this.columnPipeFlowTypeStorm.MaxLength = 1;
                this.columnRNO.MaxLength = 35;
                this.columnOWNER1.MaxLength = 35;
                this.columnOWNER2.MaxLength = 35;
                this.columnOWNER3.MaxLength = 35;
                this.columnOWNERADDR.MaxLength = 35;
                this.columnOWNERCITY.MaxLength = 28;
                this.columnOWNERSTATE.MaxLength = 2;
                this.columnOWNERZIP.MaxLength = 10;
                this.columnSITEADDR.MaxLength = 37;
                this.columnSITECITY.MaxLength = 30;
                this.columnSITE_STATE.MaxLength = 6;
                this.columnSITEZIP.MaxLength = 8;
                this.columnZoneEX.MaxLength = 5;
                this.columnZoneCP.MaxLength = 5;
                this.columnGenEX.MaxLength = 3;
                this.columnGenCP.MaxLength = 3;
                this.columnroofAreaNeedsUpdate.DefaultValue = ((bool)(false));
                this.columnparkAreaNeedsUpdate.DefaultValue = ((bool)(false));
                this.columngisBasin.MaxLength = 6;
                this.columnSourceQuality.MaxLength = 1;
                this.columnEICFtRoofEX1.Caption = "EICFtRoofEX";
                this.columnEICFtParkEX1.Caption = "EICFtParkEX";
                this.columnEICFtRoofFB1.Caption = "EICFtRoofFB";
                this.columnEICFtParkFB1.Caption = "EICFtParkFB";
                this.columnPROPERTYID.MaxLength = 7;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscRow NewMstDscRow() {
                return ((MstDscRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MstDscRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MstDscRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MstDscRowChanged != null)) {
                    this.MstDscRowChanged(this, new MstDscRowChangeEvent(((MstDscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MstDscRowChanging != null)) {
                    this.MstDscRowChanging(this, new MstDscRowChangeEvent(((MstDscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MstDscRowDeleted != null)) {
                    this.MstDscRowDeleted(this, new MstDscRowChangeEvent(((MstDscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MstDscRowDeleting != null)) {
                    this.MstDscRowDeleting(this, new MstDscRowChangeEvent(((MstDscRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMstDscRow(MstDscRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataSet ds = new ProjectDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MstDscDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MstIcDiscoVegDataTable : global::System.Data.TypedTableBase<MstIcDiscoVegRow> {
            
            private global::System.Data.DataColumn columnMAPINFO_ID;
            
            private global::System.Data.DataColumn columndscID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnDivideID;
            
            private global::System.Data.DataColumn columnRoofRPark;
            
            private global::System.Data.DataColumn columnassumekey;
            
            private global::System.Data.DataColumn columnTimeFrame;
            
            private global::System.Data.DataColumn columnApplyAreaTF;
            
            private global::System.Data.DataColumn columnValidFromDate;
            
            private global::System.Data.DataColumn columnValidToDate;
            
            private global::System.Data.DataColumn columnSqFt;
            
            private global::System.Data.DataColumn columnEffectiveness;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnAppendDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstIcDiscoVegDataTable() {
                this.TableName = "MstIcDiscoVeg";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstIcDiscoVegDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MstIcDiscoVegDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPINFO_IDColumn {
                get {
                    return this.columnMAPINFO_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dscIDColumn {
                get {
                    return this.columndscID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DivideIDColumn {
                get {
                    return this.columnDivideID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoofRParkColumn {
                get {
                    return this.columnRoofRPark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assumekeyColumn {
                get {
                    return this.columnassumekey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeFrameColumn {
                get {
                    return this.columnTimeFrame;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplyAreaTFColumn {
                get {
                    return this.columnApplyAreaTF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidFromDateColumn {
                get {
                    return this.columnValidFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidToDateColumn {
                get {
                    return this.columnValidToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SqFtColumn {
                get {
                    return this.columnSqFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectivenessColumn {
                get {
                    return this.columnEffectiveness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppendDateColumn {
                get {
                    return this.columnAppendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstIcDiscoVegRow this[int index] {
                get {
                    return ((MstIcDiscoVegRow)(this.Rows[index]));
                }
            }
            
            public event MstIcDiscoVegRowChangeEventHandler MstIcDiscoVegRowChanging;
            
            public event MstIcDiscoVegRowChangeEventHandler MstIcDiscoVegRowChanged;
            
            public event MstIcDiscoVegRowChangeEventHandler MstIcDiscoVegRowDeleting;
            
            public event MstIcDiscoVegRowChangeEventHandler MstIcDiscoVegRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMstIcDiscoVegRow(MstIcDiscoVegRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstIcDiscoVegRow AddMstIcDiscoVegRow(int dscID, int ParcelID, int DivideID, string RoofRPark, string assumekey, string TimeFrame, string ApplyAreaTF, string ValidFromDate, string ValidToDate, int SqFt, double Effectiveness, string Comment, string AppendDate) {
                MstIcDiscoVegRow rowMstIcDiscoVegRow = ((MstIcDiscoVegRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        dscID,
                        ParcelID,
                        DivideID,
                        RoofRPark,
                        assumekey,
                        TimeFrame,
                        ApplyAreaTF,
                        ValidFromDate,
                        ValidToDate,
                        SqFt,
                        Effectiveness,
                        Comment,
                        AppendDate};
                rowMstIcDiscoVegRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMstIcDiscoVegRow);
                return rowMstIcDiscoVegRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstIcDiscoVegRow FindBydscIDRoofRParkassumekey(int dscID, string RoofRPark, string assumekey) {
                return ((MstIcDiscoVegRow)(this.Rows.Find(new object[] {
                            dscID,
                            RoofRPark,
                            assumekey})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MstIcDiscoVegDataTable cln = ((MstIcDiscoVegDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MstIcDiscoVegDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAPINFO_ID = base.Columns["MAPINFO_ID"];
                this.columndscID = base.Columns["dscID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnDivideID = base.Columns["DivideID"];
                this.columnRoofRPark = base.Columns["RoofRPark"];
                this.columnassumekey = base.Columns["assumekey"];
                this.columnTimeFrame = base.Columns["TimeFrame"];
                this.columnApplyAreaTF = base.Columns["ApplyAreaTF"];
                this.columnValidFromDate = base.Columns["ValidFromDate"];
                this.columnValidToDate = base.Columns["ValidToDate"];
                this.columnSqFt = base.Columns["SqFt"];
                this.columnEffectiveness = base.Columns["Effectiveness"];
                this.columnComment = base.Columns["Comment"];
                this.columnAppendDate = base.Columns["AppendDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAPINFO_ID = new global::System.Data.DataColumn("MAPINFO_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPINFO_ID);
                this.columndscID = new global::System.Data.DataColumn("dscID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndscID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnDivideID = new global::System.Data.DataColumn("DivideID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDivideID);
                this.columnRoofRPark = new global::System.Data.DataColumn("RoofRPark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoofRPark);
                this.columnassumekey = new global::System.Data.DataColumn("assumekey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassumekey);
                this.columnTimeFrame = new global::System.Data.DataColumn("TimeFrame", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeFrame);
                this.columnApplyAreaTF = new global::System.Data.DataColumn("ApplyAreaTF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplyAreaTF);
                this.columnValidFromDate = new global::System.Data.DataColumn("ValidFromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidFromDate);
                this.columnValidToDate = new global::System.Data.DataColumn("ValidToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidToDate);
                this.columnSqFt = new global::System.Data.DataColumn("SqFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqFt);
                this.columnEffectiveness = new global::System.Data.DataColumn("Effectiveness", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveness);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnAppendDate = new global::System.Data.DataColumn("AppendDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppendDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columndscID,
                                this.columnRoofRPark,
                                this.columnassumekey}, true));
                this.columnMAPINFO_ID.AutoIncrement = true;
                this.columnMAPINFO_ID.AutoIncrementSeed = -1;
                this.columnMAPINFO_ID.AutoIncrementStep = -1;
                this.columnMAPINFO_ID.AllowDBNull = false;
                this.columnMAPINFO_ID.ReadOnly = true;
                this.columndscID.AllowDBNull = false;
                this.columnRoofRPark.AllowDBNull = false;
                this.columnRoofRPark.MaxLength = 1;
                this.columnassumekey.AllowDBNull = false;
                this.columnassumekey.MaxLength = 4;
                this.columnTimeFrame.MaxLength = 2;
                this.columnApplyAreaTF.MaxLength = 2;
                this.columnValidFromDate.MaxLength = 21;
                this.columnValidToDate.MaxLength = 21;
                this.columnComment.MaxLength = 16;
                this.columnAppendDate.MaxLength = 21;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstIcDiscoVegRow NewMstIcDiscoVegRow() {
                return ((MstIcDiscoVegRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MstIcDiscoVegRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MstIcDiscoVegRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MstIcDiscoVegRowChanged != null)) {
                    this.MstIcDiscoVegRowChanged(this, new MstIcDiscoVegRowChangeEvent(((MstIcDiscoVegRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MstIcDiscoVegRowChanging != null)) {
                    this.MstIcDiscoVegRowChanging(this, new MstIcDiscoVegRowChangeEvent(((MstIcDiscoVegRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MstIcDiscoVegRowDeleted != null)) {
                    this.MstIcDiscoVegRowDeleted(this, new MstIcDiscoVegRowChangeEvent(((MstIcDiscoVegRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MstIcDiscoVegRowDeleting != null)) {
                    this.MstIcDiscoVegRowDeleting(this, new MstIcDiscoVegRowChangeEvent(((MstIcDiscoVegRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMstIcDiscoVegRow(MstIcDiscoVegRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataSet ds = new ProjectDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MstIcDiscoVegDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MstIcDrywellDataTable : global::System.Data.TypedTableBase<MstIcDrywellRow> {
            
            private global::System.Data.DataColumn columnMAPINFO_ID;
            
            private global::System.Data.DataColumn columndscID;
            
            private global::System.Data.DataColumn columnParcelID;
            
            private global::System.Data.DataColumn columnDivideID;
            
            private global::System.Data.DataColumn columnRoofRPark;
            
            private global::System.Data.DataColumn columnassumeKey;
            
            private global::System.Data.DataColumn columnTimeFrame;
            
            private global::System.Data.DataColumn columnApplyAreaTF;
            
            private global::System.Data.DataColumn columnValidFromDate;
            
            private global::System.Data.DataColumn columnValidToDate;
            
            private global::System.Data.DataColumn columnSqFt;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnAppendDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstIcDrywellDataTable() {
                this.TableName = "MstIcDrywell";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstIcDrywellDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MstIcDrywellDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAPINFO_IDColumn {
                get {
                    return this.columnMAPINFO_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dscIDColumn {
                get {
                    return this.columndscID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParcelIDColumn {
                get {
                    return this.columnParcelID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DivideIDColumn {
                get {
                    return this.columnDivideID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RoofRParkColumn {
                get {
                    return this.columnRoofRPark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assumeKeyColumn {
                get {
                    return this.columnassumeKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeFrameColumn {
                get {
                    return this.columnTimeFrame;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApplyAreaTFColumn {
                get {
                    return this.columnApplyAreaTF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidFromDateColumn {
                get {
                    return this.columnValidFromDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidToDateColumn {
                get {
                    return this.columnValidToDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SqFtColumn {
                get {
                    return this.columnSqFt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppendDateColumn {
                get {
                    return this.columnAppendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstIcDrywellRow this[int index] {
                get {
                    return ((MstIcDrywellRow)(this.Rows[index]));
                }
            }
            
            public event MstIcDrywellRowChangeEventHandler MstIcDrywellRowChanging;
            
            public event MstIcDrywellRowChangeEventHandler MstIcDrywellRowChanged;
            
            public event MstIcDrywellRowChangeEventHandler MstIcDrywellRowDeleting;
            
            public event MstIcDrywellRowChangeEventHandler MstIcDrywellRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMstIcDrywellRow(MstIcDrywellRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstIcDrywellRow AddMstIcDrywellRow(int dscID, int ParcelID, int DivideID, string RoofRPark, string assumeKey, string TimeFrame, string ApplyAreaTF, string ValidFromDate, string ValidToDate, int SqFt, string Comment, string AppendDate) {
                MstIcDrywellRow rowMstIcDrywellRow = ((MstIcDrywellRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        dscID,
                        ParcelID,
                        DivideID,
                        RoofRPark,
                        assumeKey,
                        TimeFrame,
                        ApplyAreaTF,
                        ValidFromDate,
                        ValidToDate,
                        SqFt,
                        Comment,
                        AppendDate};
                rowMstIcDrywellRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMstIcDrywellRow);
                return rowMstIcDrywellRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstIcDrywellRow FindByMAPINFO_ID(int MAPINFO_ID) {
                return ((MstIcDrywellRow)(this.Rows.Find(new object[] {
                            MAPINFO_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MstIcDrywellDataTable cln = ((MstIcDrywellDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MstIcDrywellDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMAPINFO_ID = base.Columns["MAPINFO_ID"];
                this.columndscID = base.Columns["dscID"];
                this.columnParcelID = base.Columns["ParcelID"];
                this.columnDivideID = base.Columns["DivideID"];
                this.columnRoofRPark = base.Columns["RoofRPark"];
                this.columnassumeKey = base.Columns["assumeKey"];
                this.columnTimeFrame = base.Columns["TimeFrame"];
                this.columnApplyAreaTF = base.Columns["ApplyAreaTF"];
                this.columnValidFromDate = base.Columns["ValidFromDate"];
                this.columnValidToDate = base.Columns["ValidToDate"];
                this.columnSqFt = base.Columns["SqFt"];
                this.columnComment = base.Columns["Comment"];
                this.columnAppendDate = base.Columns["AppendDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMAPINFO_ID = new global::System.Data.DataColumn("MAPINFO_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAPINFO_ID);
                this.columndscID = new global::System.Data.DataColumn("dscID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndscID);
                this.columnParcelID = new global::System.Data.DataColumn("ParcelID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParcelID);
                this.columnDivideID = new global::System.Data.DataColumn("DivideID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDivideID);
                this.columnRoofRPark = new global::System.Data.DataColumn("RoofRPark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRoofRPark);
                this.columnassumeKey = new global::System.Data.DataColumn("assumeKey", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassumeKey);
                this.columnTimeFrame = new global::System.Data.DataColumn("TimeFrame", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeFrame);
                this.columnApplyAreaTF = new global::System.Data.DataColumn("ApplyAreaTF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApplyAreaTF);
                this.columnValidFromDate = new global::System.Data.DataColumn("ValidFromDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidFromDate);
                this.columnValidToDate = new global::System.Data.DataColumn("ValidToDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidToDate);
                this.columnSqFt = new global::System.Data.DataColumn("SqFt", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSqFt);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnAppendDate = new global::System.Data.DataColumn("AppendDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppendDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMAPINFO_ID}, true));
                this.columnMAPINFO_ID.AutoIncrement = true;
                this.columnMAPINFO_ID.AutoIncrementSeed = -1;
                this.columnMAPINFO_ID.AutoIncrementStep = -1;
                this.columnMAPINFO_ID.AllowDBNull = false;
                this.columnMAPINFO_ID.Unique = true;
                this.columnRoofRPark.MaxLength = 1;
                this.columnassumeKey.MaxLength = 4;
                this.columnTimeFrame.MaxLength = 2;
                this.columnApplyAreaTF.MaxLength = 2;
                this.columnValidFromDate.MaxLength = 8;
                this.columnValidToDate.MaxLength = 8;
                this.columnComment.MaxLength = 16;
                this.columnAppendDate.MaxLength = 8;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstIcDrywellRow NewMstIcDrywellRow() {
                return ((MstIcDrywellRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MstIcDrywellRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MstIcDrywellRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MstIcDrywellRowChanged != null)) {
                    this.MstIcDrywellRowChanged(this, new MstIcDrywellRowChangeEvent(((MstIcDrywellRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MstIcDrywellRowChanging != null)) {
                    this.MstIcDrywellRowChanging(this, new MstIcDrywellRowChangeEvent(((MstIcDrywellRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MstIcDrywellRowDeleted != null)) {
                    this.MstIcDrywellRowDeleted(this, new MstIcDrywellRowChangeEvent(((MstIcDrywellRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MstIcDrywellRowDeleting != null)) {
                    this.MstIcDrywellRowDeleting(this, new MstIcDrywellRowChangeEvent(((MstIcDrywellRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMstIcDrywellRow(MstIcDrywellRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataSet ds = new ProjectDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MstIcDrywellDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DscQcDataTable : global::System.Data.TypedTableBase<DscQcRow> {
            
            private global::System.Data.DataColumn columnDscID;
            
            private global::System.Data.DataColumn columnDscError;
            
            private global::System.Data.DataColumn columnErrorDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DscQcDataTable() {
                this.TableName = "DscQc";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DscQcDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DscQcDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DscIDColumn {
                get {
                    return this.columnDscID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DscErrorColumn {
                get {
                    return this.columnDscError;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ErrorDescriptionColumn {
                get {
                    return this.columnErrorDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DscQcRow this[int index] {
                get {
                    return ((DscQcRow)(this.Rows[index]));
                }
            }
            
            public event DscQcRowChangeEventHandler DscQcRowChanging;
            
            public event DscQcRowChangeEventHandler DscQcRowChanged;
            
            public event DscQcRowChangeEventHandler DscQcRowDeleting;
            
            public event DscQcRowChangeEventHandler DscQcRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDscQcRow(DscQcRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DscQcRow AddDscQcRow(int DscID, string DscError, string ErrorDescription) {
                DscQcRow rowDscQcRow = ((DscQcRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DscID,
                        DscError,
                        ErrorDescription};
                rowDscQcRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDscQcRow);
                return rowDscQcRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DscQcDataTable cln = ((DscQcDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DscQcDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDscID = base.Columns["DscID"];
                this.columnDscError = base.Columns["DscError"];
                this.columnErrorDescription = base.Columns["ErrorDescription"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDscID = new global::System.Data.DataColumn("DscID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDscID);
                this.columnDscError = new global::System.Data.DataColumn("DscError", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDscError);
                this.columnErrorDescription = new global::System.Data.DataColumn("ErrorDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnErrorDescription);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DscQcRow NewDscQcRow() {
                return ((DscQcRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DscQcRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DscQcRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DscQcRowChanged != null)) {
                    this.DscQcRowChanged(this, new DscQcRowChangeEvent(((DscQcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DscQcRowChanging != null)) {
                    this.DscQcRowChanging(this, new DscQcRowChangeEvent(((DscQcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DscQcRowDeleted != null)) {
                    this.DscQcRowDeleted(this, new DscQcRowChangeEvent(((DscQcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DscQcRowDeleting != null)) {
                    this.DscQcRowDeleting(this, new DscQcRowChangeEvent(((DscQcRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDscQcRow(DscQcRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectDataSet ds = new ProjectDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DscQcDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SESSIONRow : global::System.Data.DataRow {
            
            private SESSIONDataTable tableSESSION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SESSIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSESSION = ((SESSIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int edit_id {
                get {
                    return ((int)(this[this.tableSESSION.edit_idColumn]));
                }
                set {
                    this[this.tableSESSION.edit_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime edit_date {
                get {
                    return ((global::System.DateTime)(this[this.tableSESSION.edit_dateColumn]));
                }
                set {
                    this[this.tableSESSION.edit_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string edited_by {
                get {
                    return ((string)(this[this.tableSESSION.edited_byColumn]));
                }
                set {
                    this[this.tableSESSION.edited_byColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class USERUPDATERow : global::System.Data.DataRow {
            
            private USERUPDATEDataTable tableUSERUPDATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal USERUPDATERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUSERUPDATE = ((USERUPDATEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dsc_id {
                get {
                    return ((int)(this[this.tableUSERUPDATE.dsc_idColumn]));
                }
                set {
                    this[this.tableUSERUPDATE.dsc_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rno {
                get {
                    try {
                        return ((string)(this[this.tableUSERUPDATE.rnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rno\' in table \'USERUPDATE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSERUPDATE.rnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_roof_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableUSERUPDATE.new_roof_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_roof_area_sqft\' in table \'USERUPDATE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSERUPDATE.new_roof_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_roof_disco_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableUSERUPDATE.new_roof_disco_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_roof_disco_ic_area_sqft\' in table \'USERUPDATE\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableUSERUPDATE.new_roof_disco_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_roof_drywell_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableUSERUPDATE.new_roof_drywell_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_roof_drywell_ic_area_sqft\' in table \'USERUPDATE\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableUSERUPDATE.new_roof_drywell_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_park_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableUSERUPDATE.new_park_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_park_area_sqft\' in table \'USERUPDATE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSERUPDATE.new_park_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_park_disco_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableUSERUPDATE.new_park_disco_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_park_disco_ic_area_sqft\' in table \'USERUPDATE\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableUSERUPDATE.new_park_disco_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_park_drywell_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableUSERUPDATE.new_park_drywell_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_park_drywell_ic_area_sqft\' in table \'USERUPDATE\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableUSERUPDATE.new_park_drywell_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrnoNull() {
                return this.IsNull(this.tableUSERUPDATE.rnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrnoNull() {
                this[this.tableUSERUPDATE.rnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_roof_area_sqftNull() {
                return this.IsNull(this.tableUSERUPDATE.new_roof_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_roof_area_sqftNull() {
                this[this.tableUSERUPDATE.new_roof_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_roof_disco_ic_area_sqftNull() {
                return this.IsNull(this.tableUSERUPDATE.new_roof_disco_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_roof_disco_ic_area_sqftNull() {
                this[this.tableUSERUPDATE.new_roof_disco_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_roof_drywell_ic_area_sqftNull() {
                return this.IsNull(this.tableUSERUPDATE.new_roof_drywell_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_roof_drywell_ic_area_sqftNull() {
                this[this.tableUSERUPDATE.new_roof_drywell_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_park_area_sqftNull() {
                return this.IsNull(this.tableUSERUPDATE.new_park_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_park_area_sqftNull() {
                this[this.tableUSERUPDATE.new_park_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_park_disco_ic_area_sqftNull() {
                return this.IsNull(this.tableUSERUPDATE.new_park_disco_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_park_disco_ic_area_sqftNull() {
                this[this.tableUSERUPDATE.new_park_disco_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_park_drywell_ic_area_sqftNull() {
                return this.IsNull(this.tableUSERUPDATE.new_park_drywell_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_park_drywell_ic_area_sqftNull() {
                this[this.tableUSERUPDATE.new_park_drywell_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DSCEDITAppendTableRow : global::System.Data.DataRow {
            
            private DSCEDITAppendTableDataTable tableDSCEDITAppendTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DSCEDITAppendTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDSCEDITAppendTable = ((DSCEDITAppendTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dsc_edit_id {
                get {
                    return ((int)(this[this.tableDSCEDITAppendTable.dsc_edit_idColumn]));
                }
                set {
                    this[this.tableDSCEDITAppendTable.dsc_edit_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int edit_id {
                get {
                    return ((int)(this[this.tableDSCEDITAppendTable.edit_idColumn]));
                }
                set {
                    this[this.tableDSCEDITAppendTable.edit_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime edit_date {
                get {
                    return ((global::System.DateTime)(this[this.tableDSCEDITAppendTable.edit_dateColumn]));
                }
                set {
                    this[this.tableDSCEDITAppendTable.edit_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string edited_by {
                get {
                    return ((string)(this[this.tableDSCEDITAppendTable.edited_byColumn]));
                }
                set {
                    this[this.tableDSCEDITAppendTable.edited_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rno {
                get {
                    return ((string)(this[this.tableDSCEDITAppendTable.rnoColumn]));
                }
                set {
                    this[this.tableDSCEDITAppendTable.rnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dsc_id {
                get {
                    return ((int)(this[this.tableDSCEDITAppendTable.dsc_idColumn]));
                }
                set {
                    this[this.tableDSCEDITAppendTable.dsc_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int old_roof_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDITAppendTable.old_roof_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'old_roof_area_sqft\' in table \'DSCEDITAppendTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDSCEDITAppendTable.old_roof_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_roof_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDITAppendTable.new_roof_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_roof_area_sqft\' in table \'DSCEDITAppendTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDSCEDITAppendTable.new_roof_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int old_roof_disco_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDITAppendTable.old_roof_disco_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'old_roof_disco_ic_area_sqft\' in table \'DSCEDITAppendTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDITAppendTable.old_roof_disco_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_roof_disco_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDITAppendTable.new_roof_disco_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_roof_disco_ic_area_sqft\' in table \'DSCEDITAppendTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDITAppendTable.new_roof_disco_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int old_roof_drywell_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDITAppendTable.old_roof_drywell_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'old_roof_drywell_ic_area_sqft\' in table \'DSCEDITAppendTable" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDITAppendTable.old_roof_drywell_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_roof_drywell_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDITAppendTable.new_roof_drywell_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_roof_drywell_ic_area_sqft\' in table \'DSCEDITAppendTable" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDITAppendTable.new_roof_drywell_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int old_park_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDITAppendTable.old_park_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'old_park_area_sqft\' in table \'DSCEDITAppendTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDSCEDITAppendTable.old_park_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_park_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDITAppendTable.new_park_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_park_area_sqft\' in table \'DSCEDITAppendTable\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDSCEDITAppendTable.new_park_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int old_park_disco_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDITAppendTable.old_park_disco_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'old_park_disco_ic_area_sqft\' in table \'DSCEDITAppendTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDITAppendTable.old_park_disco_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_park_disco_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDITAppendTable.new_park_disco_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_park_disco_ic_area_sqft\' in table \'DSCEDITAppendTable\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDITAppendTable.new_park_disco_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int old_park_drywell_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDITAppendTable.old_park_drywell_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'old_park_drywell_ic_area_sqft\' in table \'DSCEDITAppendTable" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDITAppendTable.old_park_drywell_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_park_drywell_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDITAppendTable.new_park_drywell_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_park_drywell_ic_area_sqft\' in table \'DSCEDITAppendTable" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDITAppendTable.new_park_drywell_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isold_roof_area_sqftNull() {
                return this.IsNull(this.tableDSCEDITAppendTable.old_roof_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setold_roof_area_sqftNull() {
                this[this.tableDSCEDITAppendTable.old_roof_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_roof_area_sqftNull() {
                return this.IsNull(this.tableDSCEDITAppendTable.new_roof_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_roof_area_sqftNull() {
                this[this.tableDSCEDITAppendTable.new_roof_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isold_roof_disco_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDITAppendTable.old_roof_disco_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setold_roof_disco_ic_area_sqftNull() {
                this[this.tableDSCEDITAppendTable.old_roof_disco_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_roof_disco_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDITAppendTable.new_roof_disco_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_roof_disco_ic_area_sqftNull() {
                this[this.tableDSCEDITAppendTable.new_roof_disco_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isold_roof_drywell_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDITAppendTable.old_roof_drywell_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setold_roof_drywell_ic_area_sqftNull() {
                this[this.tableDSCEDITAppendTable.old_roof_drywell_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_roof_drywell_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDITAppendTable.new_roof_drywell_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_roof_drywell_ic_area_sqftNull() {
                this[this.tableDSCEDITAppendTable.new_roof_drywell_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isold_park_area_sqftNull() {
                return this.IsNull(this.tableDSCEDITAppendTable.old_park_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setold_park_area_sqftNull() {
                this[this.tableDSCEDITAppendTable.old_park_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_park_area_sqftNull() {
                return this.IsNull(this.tableDSCEDITAppendTable.new_park_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_park_area_sqftNull() {
                this[this.tableDSCEDITAppendTable.new_park_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isold_park_disco_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDITAppendTable.old_park_disco_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setold_park_disco_ic_area_sqftNull() {
                this[this.tableDSCEDITAppendTable.old_park_disco_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_park_disco_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDITAppendTable.new_park_disco_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_park_disco_ic_area_sqftNull() {
                this[this.tableDSCEDITAppendTable.new_park_disco_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isold_park_drywell_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDITAppendTable.old_park_drywell_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setold_park_drywell_ic_area_sqftNull() {
                this[this.tableDSCEDITAppendTable.old_park_drywell_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_park_drywell_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDITAppendTable.new_park_drywell_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_park_drywell_ic_area_sqftNull() {
                this[this.tableDSCEDITAppendTable.new_park_drywell_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DSCEDITRow : global::System.Data.DataRow {
            
            private DSCEDITDataTable tableDSCEDIT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DSCEDITRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDSCEDIT = ((DSCEDITDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dsc_edit_id {
                get {
                    return ((int)(this[this.tableDSCEDIT.dsc_edit_idColumn]));
                }
                set {
                    this[this.tableDSCEDIT.dsc_edit_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int edit_id {
                get {
                    return ((int)(this[this.tableDSCEDIT.edit_idColumn]));
                }
                set {
                    this[this.tableDSCEDIT.edit_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime edit_date {
                get {
                    return ((global::System.DateTime)(this[this.tableDSCEDIT.edit_dateColumn]));
                }
                set {
                    this[this.tableDSCEDIT.edit_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string edited_by {
                get {
                    return ((string)(this[this.tableDSCEDIT.edited_byColumn]));
                }
                set {
                    this[this.tableDSCEDIT.edited_byColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rno {
                get {
                    try {
                        return ((string)(this[this.tableDSCEDIT.rnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rno\' in table \'DSCEDIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDIT.rnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dsc_id {
                get {
                    return ((int)(this[this.tableDSCEDIT.dsc_idColumn]));
                }
                set {
                    this[this.tableDSCEDIT.dsc_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int old_roof_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDIT.old_roof_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'old_roof_area_sqft\' in table \'DSCEDIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDIT.old_roof_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_roof_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDIT.new_roof_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_roof_area_sqft\' in table \'DSCEDIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDIT.new_roof_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int old_roof_disco_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDIT.old_roof_disco_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'old_roof_disco_ic_area_sqft\' in table \'DSCEDIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDIT.old_roof_disco_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_roof_disco_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDIT.new_roof_disco_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_roof_disco_ic_area_sqft\' in table \'DSCEDIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDIT.new_roof_disco_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int old_roof_drywell_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDIT.old_roof_drywell_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'old_roof_drywell_ic_area_sqft\' in table \'DSCEDIT\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDSCEDIT.old_roof_drywell_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_roof_drywell_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDIT.new_roof_drywell_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_roof_drywell_ic_area_sqft\' in table \'DSCEDIT\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDSCEDIT.new_roof_drywell_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int old_park_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDIT.old_park_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'old_park_area_sqft\' in table \'DSCEDIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDIT.old_park_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_park_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDIT.new_park_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_park_area_sqft\' in table \'DSCEDIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDIT.new_park_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int old_park_disco_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDIT.old_park_disco_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'old_park_disco_ic_area_sqft\' in table \'DSCEDIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDIT.old_park_disco_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_park_disco_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDIT.new_park_disco_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_park_disco_ic_area_sqft\' in table \'DSCEDIT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDSCEDIT.new_park_disco_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int old_park_drywell_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDIT.old_park_drywell_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'old_park_drywell_ic_area_sqft\' in table \'DSCEDIT\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDSCEDIT.old_park_drywell_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int new_park_drywell_ic_area_sqft {
                get {
                    try {
                        return ((int)(this[this.tableDSCEDIT.new_park_drywell_ic_area_sqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'new_park_drywell_ic_area_sqft\' in table \'DSCEDIT\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDSCEDIT.new_park_drywell_ic_area_sqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool updater_editor_value_changed {
                get {
                    try {
                        return ((bool)(this[this.tableDSCEDIT.updater_editor_value_changedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'updater_editor_value_changed\' in table \'DSCEDIT\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDSCEDIT.updater_editor_value_changedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrnoNull() {
                return this.IsNull(this.tableDSCEDIT.rnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrnoNull() {
                this[this.tableDSCEDIT.rnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isold_roof_area_sqftNull() {
                return this.IsNull(this.tableDSCEDIT.old_roof_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setold_roof_area_sqftNull() {
                this[this.tableDSCEDIT.old_roof_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_roof_area_sqftNull() {
                return this.IsNull(this.tableDSCEDIT.new_roof_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_roof_area_sqftNull() {
                this[this.tableDSCEDIT.new_roof_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isold_roof_disco_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDIT.old_roof_disco_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setold_roof_disco_ic_area_sqftNull() {
                this[this.tableDSCEDIT.old_roof_disco_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_roof_disco_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDIT.new_roof_disco_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_roof_disco_ic_area_sqftNull() {
                this[this.tableDSCEDIT.new_roof_disco_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isold_roof_drywell_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDIT.old_roof_drywell_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setold_roof_drywell_ic_area_sqftNull() {
                this[this.tableDSCEDIT.old_roof_drywell_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_roof_drywell_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDIT.new_roof_drywell_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_roof_drywell_ic_area_sqftNull() {
                this[this.tableDSCEDIT.new_roof_drywell_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isold_park_area_sqftNull() {
                return this.IsNull(this.tableDSCEDIT.old_park_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setold_park_area_sqftNull() {
                this[this.tableDSCEDIT.old_park_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_park_area_sqftNull() {
                return this.IsNull(this.tableDSCEDIT.new_park_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_park_area_sqftNull() {
                this[this.tableDSCEDIT.new_park_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isold_park_disco_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDIT.old_park_disco_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setold_park_disco_ic_area_sqftNull() {
                this[this.tableDSCEDIT.old_park_disco_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_park_disco_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDIT.new_park_disco_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_park_disco_ic_area_sqftNull() {
                this[this.tableDSCEDIT.new_park_disco_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isold_park_drywell_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDIT.old_park_drywell_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setold_park_drywell_ic_area_sqftNull() {
                this[this.tableDSCEDIT.old_park_drywell_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnew_park_drywell_ic_area_sqftNull() {
                return this.IsNull(this.tableDSCEDIT.new_park_drywell_ic_area_sqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnew_park_drywell_ic_area_sqftNull() {
                this[this.tableDSCEDIT.new_park_drywell_ic_area_sqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isupdater_editor_value_changedNull() {
                return this.IsNull(this.tableDSCEDIT.updater_editor_value_changedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setupdater_editor_value_changedNull() {
                this[this.tableDSCEDIT.updater_editor_value_changedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DscUpdaterRow : global::System.Data.DataRow {
            
            private DscUpdaterDataTable tableDscUpdater;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DscUpdaterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDscUpdater = ((DscUpdaterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RNo {
                get {
                    try {
                        return ((string)(this[this.tableDscUpdater.RNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RNo\' in table \'DscUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDscUpdater.RNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DscId {
                get {
                    return ((int)(this[this.tableDscUpdater.DscIdColumn]));
                }
                set {
                    this[this.tableDscUpdater.DscIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NewRoofArea {
                get {
                    try {
                        return ((double)(this[this.tableDscUpdater.NewRoofAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NewRoofArea\' in table \'DscUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDscUpdater.NewRoofAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NewRoofDiscoArea {
                get {
                    try {
                        return ((double)(this[this.tableDscUpdater.NewRoofDiscoAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NewRoofDiscoArea\' in table \'DscUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDscUpdater.NewRoofDiscoAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NewRoofDrywellIcArea {
                get {
                    try {
                        return ((double)(this[this.tableDscUpdater.NewRoofDrywellIcAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NewRoofDrywellIcArea\' in table \'DscUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDscUpdater.NewRoofDrywellIcAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NewParkArea {
                get {
                    try {
                        return ((double)(this[this.tableDscUpdater.NewParkAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NewParkArea\' in table \'DscUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDscUpdater.NewParkAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NewParkDiscoIcArea {
                get {
                    try {
                        return ((double)(this[this.tableDscUpdater.NewParkDiscoIcAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NewParkDiscoIcArea\' in table \'DscUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDscUpdater.NewParkDiscoIcAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double NewParkDrywellIcArea {
                get {
                    try {
                        return ((double)(this[this.tableDscUpdater.NewParkDrywellIcAreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NewParkDrywellIcArea\' in table \'DscUpdater\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDscUpdater.NewParkDrywellIcAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRNoNull() {
                return this.IsNull(this.tableDscUpdater.RNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRNoNull() {
                this[this.tableDscUpdater.RNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewRoofAreaNull() {
                return this.IsNull(this.tableDscUpdater.NewRoofAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewRoofAreaNull() {
                this[this.tableDscUpdater.NewRoofAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewRoofDiscoAreaNull() {
                return this.IsNull(this.tableDscUpdater.NewRoofDiscoAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewRoofDiscoAreaNull() {
                this[this.tableDscUpdater.NewRoofDiscoAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewRoofDrywellIcAreaNull() {
                return this.IsNull(this.tableDscUpdater.NewRoofDrywellIcAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewRoofDrywellIcAreaNull() {
                this[this.tableDscUpdater.NewRoofDrywellIcAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewParkAreaNull() {
                return this.IsNull(this.tableDscUpdater.NewParkAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewParkAreaNull() {
                this[this.tableDscUpdater.NewParkAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewParkDiscoIcAreaNull() {
                return this.IsNull(this.tableDscUpdater.NewParkDiscoIcAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewParkDiscoIcAreaNull() {
                this[this.tableDscUpdater.NewParkDiscoIcAreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewParkDrywellIcAreaNull() {
                return this.IsNull(this.tableDscUpdater.NewParkDrywellIcAreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNewParkDrywellIcAreaNull() {
                this[this.tableDscUpdater.NewParkDrywellIcAreaColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MstDscRow : global::System.Data.DataRow {
            
            private MstDscDataTable tableMstDsc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstDscRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMstDsc = ((MstDscDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAPINFO_ID {
                get {
                    return ((int)(this[this.tableMstDsc.MAPINFO_IDColumn]));
                }
                set {
                    this[this.tableMstDsc.MAPINFO_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DivideID {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.DivideIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DivideID\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.DivideIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DSCID {
                get {
                    return ((int)(this[this.tableMstDsc.DSCIDColumn]));
                }
                set {
                    this[this.tableMstDsc.DSCIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int discoSiteID {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.discoSiteIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'discoSiteID\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.discoSiteIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiscoClass {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.DiscoClassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiscoClass\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.DiscoClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToMLinkSan {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.ToMLinkSanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToMLinkSan\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ToMLinkSanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ToMLinkStorm {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.ToMLinkStormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ToMLinkStorm\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ToMLinkStormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeFlowTypeSan {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.PipeFlowTypeSanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeFlowTypeSan\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.PipeFlowTypeSanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PipeFlowTypeStorm {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.PipeFlowTypeStormColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PipeFlowTypeStorm\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.PipeFlowTypeStormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double SanSwrCrown {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.SanSwrCrownColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SanSwrCrown\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.SanSwrCrownColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Frac2SwrBeg {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.Frac2SwrBegColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Frac2SwrBeg\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.Frac2SwrBegColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FloodRefElev {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.FloodRefElevColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FloodRefElev\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.FloodRefElevColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FalseBFRisk {
                get {
                    try {
                        return ((bool)(this[this.tableMstDsc.FalseBFRiskColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FalseBFRisk\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.FalseBFRiskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RNO {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.RNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RNO\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.RNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OWNER1 {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.OWNER1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNER1\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.OWNER1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OWNER2 {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.OWNER2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNER2\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.OWNER2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OWNER3 {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.OWNER3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNER3\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.OWNER3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OWNERADDR {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.OWNERADDRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNERADDR\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.OWNERADDRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OWNERCITY {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.OWNERCITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNERCITY\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.OWNERCITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OWNERSTATE {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.OWNERSTATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNERSTATE\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.OWNERSTATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OWNERZIP {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.OWNERZIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OWNERZIP\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.OWNERZIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SITEADDR {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.SITEADDRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SITEADDR\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.SITEADDRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SITECITY {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.SITECITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SITECITY\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.SITECITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SITE_STATE {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.SITE_STATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SITE_STATE\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.SITE_STATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SITEZIP {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.SITEZIPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SITEZIP\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.SITEZIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double FloodRefElev_2 {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.FloodRefElev_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FloodRefElev_2\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.FloodRefElev_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isVacant {
                get {
                    try {
                        return ((bool)(this[this.tableMstDsc.isVacantColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isVacant\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.isVacantColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZoneEX {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.ZoneEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZoneEX\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ZoneEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ZoneCP {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.ZoneCPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ZoneCP\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ZoneCPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GenEX {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.GenEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GenEX\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.GenEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GenCP {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.GenCPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GenCP\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.GenCPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PZsqft {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.PZsqftColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PZsqft\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.PZsqftColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ImpFractEX {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.ImpFractEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpFractEX\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ImpFractEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ImpFractCP {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.ImpFractCPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpFractCP\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ImpFractCPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ImpFractFB {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.ImpFractFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImpFractFB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ImpFractFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AreaFt {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.AreaFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AreaFt\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.AreaFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RfAreaFtEX {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.RfAreaFtEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RfAreaFtEX\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.RfAreaFtEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int surveyedRfAreaSqFt {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.surveyedRfAreaSqFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'surveyedRfAreaSqFt\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.surveyedRfAreaSqFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RfAreaFtFB {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.RfAreaFtFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RfAreaFtFB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.RfAreaFtFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool roofAreaNeedsUpdate {
                get {
                    try {
                        return ((bool)(this[this.tableMstDsc.roofAreaNeedsUpdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'roofAreaNeedsUpdate\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.roofAreaNeedsUpdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PkAreaFtEX {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.PkAreaFtEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PkAreaFtEX\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.PkAreaFtEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PkAreaFtFB {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.PkAreaFtFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PkAreaFtFB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.PkAreaFtFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool parkAreaNeedsUpdate {
                get {
                    try {
                        return ((bool)(this[this.tableMstDsc.parkAreaNeedsUpdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'parkAreaNeedsUpdate\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.parkAreaNeedsUpdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BaseflowEXcfs {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.BaseflowEXcfsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseflowEXcfs\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.BaseflowEXcfsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BaseflowFBcfs {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.BaseflowFBcfsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseflowFBcfs\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.BaseflowFBcfsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double BaseflowDMcfs {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.BaseflowDMcfsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BaseflowDMcfs\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.BaseflowDMcfsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GrowthState {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.GrowthStateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrowthState\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.GrowthStateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IncIA4FB {
                get {
                    try {
                        return ((bool)(this[this.tableMstDsc.IncIA4FBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IncIA4FB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.IncIA4FBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string gisBasin {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.gisBasinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'gisBasin\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.gisBasinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ICFtRoofEX {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.ICFtRoofEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICFtRoofEX\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ICFtRoofEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ICFtRoofFB {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.ICFtRoofFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICFtRoofFB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ICFtRoofFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ICFtParkEX {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.ICFtParkEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICFtParkEX\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ICFtParkEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ICFtParkFB {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.ICFtParkFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ICFtParkFB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.ICFtParkFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EICFtRoofEX {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.EICFtRoofEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EICFtRoofEX\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.EICFtRoofEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EICFtParkEX {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.EICFtParkEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EICFtParkEX\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.EICFtParkEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EICFtRoofFB {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.EICFtRoofFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EICFtRoofFB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.EICFtRoofFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double EICFtParkFB {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.EICFtParkFBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EICFtParkFB\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.EICFtParkFBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Sewerable {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.SewerableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sewerable\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.SewerableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceQuality {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.SourceQualityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SourceQuality\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.SourceQualityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Septic {
                get {
                    try {
                        return ((bool)(this[this.tableMstDsc.SepticColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Septic\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.SepticColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HasBasement {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.HasBasementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasBasement\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.HasBasementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int surveyedPkAreaSqFt {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.surveyedPkAreaSqFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'surveyedPkAreaSqFt\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.surveyedPkAreaSqFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EICFtRoofEX1 {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.EICFtRoofEX1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EICFtRoofEX1\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.EICFtRoofEX1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EICFtParkEX1 {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.EICFtParkEX1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EICFtParkEX1\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.EICFtParkEX1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EICFtRoofFB1 {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.EICFtRoofFB1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EICFtRoofFB1\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.EICFtRoofFB1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EICFtParkFB1 {
                get {
                    try {
                        return ((int)(this[this.tableMstDsc.EICFtParkFB1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EICFtParkFB1\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.EICFtParkFB1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Shape_Length {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.Shape_LengthColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Shape_Length\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.Shape_LengthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Shape_Area {
                get {
                    try {
                        return ((double)(this[this.tableMstDsc.Shape_AreaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Shape_Area\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.Shape_AreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Pzone {
                get {
                    try {
                        return ((bool)(this[this.tableMstDsc.PzoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pzone\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.PzoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PROPERTYID {
                get {
                    try {
                        return ((string)(this[this.tableMstDsc.PROPERTYIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PROPERTYID\' in table \'MstDsc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstDsc.PROPERTYIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableMstDsc.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableMstDsc.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDivideIDNull() {
                return this.IsNull(this.tableMstDsc.DivideIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDivideIDNull() {
                this[this.tableMstDsc.DivideIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiscoSiteIDNull() {
                return this.IsNull(this.tableMstDsc.discoSiteIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiscoSiteIDNull() {
                this[this.tableMstDsc.discoSiteIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscoClassNull() {
                return this.IsNull(this.tableMstDsc.DiscoClassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscoClassNull() {
                this[this.tableMstDsc.DiscoClassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToMLinkSanNull() {
                return this.IsNull(this.tableMstDsc.ToMLinkSanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToMLinkSanNull() {
                this[this.tableMstDsc.ToMLinkSanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsToMLinkStormNull() {
                return this.IsNull(this.tableMstDsc.ToMLinkStormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetToMLinkStormNull() {
                this[this.tableMstDsc.ToMLinkStormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeFlowTypeSanNull() {
                return this.IsNull(this.tableMstDsc.PipeFlowTypeSanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeFlowTypeSanNull() {
                this[this.tableMstDsc.PipeFlowTypeSanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPipeFlowTypeStormNull() {
                return this.IsNull(this.tableMstDsc.PipeFlowTypeStormColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPipeFlowTypeStormNull() {
                this[this.tableMstDsc.PipeFlowTypeStormColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSanSwrCrownNull() {
                return this.IsNull(this.tableMstDsc.SanSwrCrownColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSanSwrCrownNull() {
                this[this.tableMstDsc.SanSwrCrownColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFrac2SwrBegNull() {
                return this.IsNull(this.tableMstDsc.Frac2SwrBegColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFrac2SwrBegNull() {
                this[this.tableMstDsc.Frac2SwrBegColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFloodRefElevNull() {
                return this.IsNull(this.tableMstDsc.FloodRefElevColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFloodRefElevNull() {
                this[this.tableMstDsc.FloodRefElevColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFalseBFRiskNull() {
                return this.IsNull(this.tableMstDsc.FalseBFRiskColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFalseBFRiskNull() {
                this[this.tableMstDsc.FalseBFRiskColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRNONull() {
                return this.IsNull(this.tableMstDsc.RNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRNONull() {
                this[this.tableMstDsc.RNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNER1Null() {
                return this.IsNull(this.tableMstDsc.OWNER1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNER1Null() {
                this[this.tableMstDsc.OWNER1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNER2Null() {
                return this.IsNull(this.tableMstDsc.OWNER2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNER2Null() {
                this[this.tableMstDsc.OWNER2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNER3Null() {
                return this.IsNull(this.tableMstDsc.OWNER3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNER3Null() {
                this[this.tableMstDsc.OWNER3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNERADDRNull() {
                return this.IsNull(this.tableMstDsc.OWNERADDRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNERADDRNull() {
                this[this.tableMstDsc.OWNERADDRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNERCITYNull() {
                return this.IsNull(this.tableMstDsc.OWNERCITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNERCITYNull() {
                this[this.tableMstDsc.OWNERCITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNERSTATENull() {
                return this.IsNull(this.tableMstDsc.OWNERSTATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNERSTATENull() {
                this[this.tableMstDsc.OWNERSTATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOWNERZIPNull() {
                return this.IsNull(this.tableMstDsc.OWNERZIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOWNERZIPNull() {
                this[this.tableMstDsc.OWNERZIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSITEADDRNull() {
                return this.IsNull(this.tableMstDsc.SITEADDRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSITEADDRNull() {
                this[this.tableMstDsc.SITEADDRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSITECITYNull() {
                return this.IsNull(this.tableMstDsc.SITECITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSITECITYNull() {
                this[this.tableMstDsc.SITECITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSITE_STATENull() {
                return this.IsNull(this.tableMstDsc.SITE_STATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSITE_STATENull() {
                this[this.tableMstDsc.SITE_STATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSITEZIPNull() {
                return this.IsNull(this.tableMstDsc.SITEZIPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSITEZIPNull() {
                this[this.tableMstDsc.SITEZIPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFloodRefElev_2Null() {
                return this.IsNull(this.tableMstDsc.FloodRefElev_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFloodRefElev_2Null() {
                this[this.tableMstDsc.FloodRefElev_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisVacantNull() {
                return this.IsNull(this.tableMstDsc.isVacantColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisVacantNull() {
                this[this.tableMstDsc.isVacantColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneEXNull() {
                return this.IsNull(this.tableMstDsc.ZoneEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneEXNull() {
                this[this.tableMstDsc.ZoneEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsZoneCPNull() {
                return this.IsNull(this.tableMstDsc.ZoneCPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetZoneCPNull() {
                this[this.tableMstDsc.ZoneCPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenEXNull() {
                return this.IsNull(this.tableMstDsc.GenEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenEXNull() {
                this[this.tableMstDsc.GenEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenCPNull() {
                return this.IsNull(this.tableMstDsc.GenCPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenCPNull() {
                this[this.tableMstDsc.GenCPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPZsqftNull() {
                return this.IsNull(this.tableMstDsc.PZsqftColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPZsqftNull() {
                this[this.tableMstDsc.PZsqftColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpFractEXNull() {
                return this.IsNull(this.tableMstDsc.ImpFractEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpFractEXNull() {
                this[this.tableMstDsc.ImpFractEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpFractCPNull() {
                return this.IsNull(this.tableMstDsc.ImpFractCPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpFractCPNull() {
                this[this.tableMstDsc.ImpFractCPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImpFractFBNull() {
                return this.IsNull(this.tableMstDsc.ImpFractFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImpFractFBNull() {
                this[this.tableMstDsc.ImpFractFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaFtNull() {
                return this.IsNull(this.tableMstDsc.AreaFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaFtNull() {
                this[this.tableMstDsc.AreaFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRfAreaFtEXNull() {
                return this.IsNull(this.tableMstDsc.RfAreaFtEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRfAreaFtEXNull() {
                this[this.tableMstDsc.RfAreaFtEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssurveyedRfAreaSqFtNull() {
                return this.IsNull(this.tableMstDsc.surveyedRfAreaSqFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsurveyedRfAreaSqFtNull() {
                this[this.tableMstDsc.surveyedRfAreaSqFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRfAreaFtFBNull() {
                return this.IsNull(this.tableMstDsc.RfAreaFtFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRfAreaFtFBNull() {
                this[this.tableMstDsc.RfAreaFtFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsroofAreaNeedsUpdateNull() {
                return this.IsNull(this.tableMstDsc.roofAreaNeedsUpdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetroofAreaNeedsUpdateNull() {
                this[this.tableMstDsc.roofAreaNeedsUpdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPkAreaFtEXNull() {
                return this.IsNull(this.tableMstDsc.PkAreaFtEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPkAreaFtEXNull() {
                this[this.tableMstDsc.PkAreaFtEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPkAreaFtFBNull() {
                return this.IsNull(this.tableMstDsc.PkAreaFtFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPkAreaFtFBNull() {
                this[this.tableMstDsc.PkAreaFtFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsparkAreaNeedsUpdateNull() {
                return this.IsNull(this.tableMstDsc.parkAreaNeedsUpdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetparkAreaNeedsUpdateNull() {
                this[this.tableMstDsc.parkAreaNeedsUpdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseflowEXcfsNull() {
                return this.IsNull(this.tableMstDsc.BaseflowEXcfsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseflowEXcfsNull() {
                this[this.tableMstDsc.BaseflowEXcfsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseflowFBcfsNull() {
                return this.IsNull(this.tableMstDsc.BaseflowFBcfsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseflowFBcfsNull() {
                this[this.tableMstDsc.BaseflowFBcfsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBaseflowDMcfsNull() {
                return this.IsNull(this.tableMstDsc.BaseflowDMcfsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBaseflowDMcfsNull() {
                this[this.tableMstDsc.BaseflowDMcfsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrowthStateNull() {
                return this.IsNull(this.tableMstDsc.GrowthStateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrowthStateNull() {
                this[this.tableMstDsc.GrowthStateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIncIA4FBNull() {
                return this.IsNull(this.tableMstDsc.IncIA4FBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIncIA4FBNull() {
                this[this.tableMstDsc.IncIA4FBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsgisBasinNull() {
                return this.IsNull(this.tableMstDsc.gisBasinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetgisBasinNull() {
                this[this.tableMstDsc.gisBasinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICFtRoofEXNull() {
                return this.IsNull(this.tableMstDsc.ICFtRoofEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICFtRoofEXNull() {
                this[this.tableMstDsc.ICFtRoofEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICFtRoofFBNull() {
                return this.IsNull(this.tableMstDsc.ICFtRoofFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICFtRoofFBNull() {
                this[this.tableMstDsc.ICFtRoofFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICFtParkEXNull() {
                return this.IsNull(this.tableMstDsc.ICFtParkEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICFtParkEXNull() {
                this[this.tableMstDsc.ICFtParkEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICFtParkFBNull() {
                return this.IsNull(this.tableMstDsc.ICFtParkFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICFtParkFBNull() {
                this[this.tableMstDsc.ICFtParkFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEICFtRoofEXNull() {
                return this.IsNull(this.tableMstDsc.EICFtRoofEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEICFtRoofEXNull() {
                this[this.tableMstDsc.EICFtRoofEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEICFtParkEXNull() {
                return this.IsNull(this.tableMstDsc.EICFtParkEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEICFtParkEXNull() {
                this[this.tableMstDsc.EICFtParkEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEICFtRoofFBNull() {
                return this.IsNull(this.tableMstDsc.EICFtRoofFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEICFtRoofFBNull() {
                this[this.tableMstDsc.EICFtRoofFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEICFtParkFBNull() {
                return this.IsNull(this.tableMstDsc.EICFtParkFBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEICFtParkFBNull() {
                this[this.tableMstDsc.EICFtParkFBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSewerableNull() {
                return this.IsNull(this.tableMstDsc.SewerableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSewerableNull() {
                this[this.tableMstDsc.SewerableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceQualityNull() {
                return this.IsNull(this.tableMstDsc.SourceQualityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceQualityNull() {
                this[this.tableMstDsc.SourceQualityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSepticNull() {
                return this.IsNull(this.tableMstDsc.SepticColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSepticNull() {
                this[this.tableMstDsc.SepticColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasBasementNull() {
                return this.IsNull(this.tableMstDsc.HasBasementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasBasementNull() {
                this[this.tableMstDsc.HasBasementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssurveyedPkAreaSqFtNull() {
                return this.IsNull(this.tableMstDsc.surveyedPkAreaSqFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsurveyedPkAreaSqFtNull() {
                this[this.tableMstDsc.surveyedPkAreaSqFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEICFtRoofEX1Null() {
                return this.IsNull(this.tableMstDsc.EICFtRoofEX1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEICFtRoofEX1Null() {
                this[this.tableMstDsc.EICFtRoofEX1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEICFtParkEX1Null() {
                return this.IsNull(this.tableMstDsc.EICFtParkEX1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEICFtParkEX1Null() {
                this[this.tableMstDsc.EICFtParkEX1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEICFtRoofFB1Null() {
                return this.IsNull(this.tableMstDsc.EICFtRoofFB1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEICFtRoofFB1Null() {
                this[this.tableMstDsc.EICFtRoofFB1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEICFtParkFB1Null() {
                return this.IsNull(this.tableMstDsc.EICFtParkFB1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEICFtParkFB1Null() {
                this[this.tableMstDsc.EICFtParkFB1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShape_LengthNull() {
                return this.IsNull(this.tableMstDsc.Shape_LengthColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShape_LengthNull() {
                this[this.tableMstDsc.Shape_LengthColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShape_AreaNull() {
                return this.IsNull(this.tableMstDsc.Shape_AreaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShape_AreaNull() {
                this[this.tableMstDsc.Shape_AreaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPzoneNull() {
                return this.IsNull(this.tableMstDsc.PzoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPzoneNull() {
                this[this.tableMstDsc.PzoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPROPERTYIDNull() {
                return this.IsNull(this.tableMstDsc.PROPERTYIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPROPERTYIDNull() {
                this[this.tableMstDsc.PROPERTYIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MstIcDiscoVegRow : global::System.Data.DataRow {
            
            private MstIcDiscoVegDataTable tableMstIcDiscoVeg;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstIcDiscoVegRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMstIcDiscoVeg = ((MstIcDiscoVegDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAPINFO_ID {
                get {
                    return ((int)(this[this.tableMstIcDiscoVeg.MAPINFO_IDColumn]));
                }
                set {
                    this[this.tableMstIcDiscoVeg.MAPINFO_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dscID {
                get {
                    return ((int)(this[this.tableMstIcDiscoVeg.dscIDColumn]));
                }
                set {
                    this[this.tableMstIcDiscoVeg.dscIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableMstIcDiscoVeg.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'MstIcDiscoVeg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDiscoVeg.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DivideID {
                get {
                    try {
                        return ((int)(this[this.tableMstIcDiscoVeg.DivideIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DivideID\' in table \'MstIcDiscoVeg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDiscoVeg.DivideIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RoofRPark {
                get {
                    return ((string)(this[this.tableMstIcDiscoVeg.RoofRParkColumn]));
                }
                set {
                    this[this.tableMstIcDiscoVeg.RoofRParkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string assumekey {
                get {
                    return ((string)(this[this.tableMstIcDiscoVeg.assumekeyColumn]));
                }
                set {
                    this[this.tableMstIcDiscoVeg.assumekeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeFrame {
                get {
                    try {
                        return ((string)(this[this.tableMstIcDiscoVeg.TimeFrameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeFrame\' in table \'MstIcDiscoVeg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDiscoVeg.TimeFrameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApplyAreaTF {
                get {
                    try {
                        return ((string)(this[this.tableMstIcDiscoVeg.ApplyAreaTFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApplyAreaTF\' in table \'MstIcDiscoVeg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDiscoVeg.ApplyAreaTFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValidFromDate {
                get {
                    try {
                        return ((string)(this[this.tableMstIcDiscoVeg.ValidFromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidFromDate\' in table \'MstIcDiscoVeg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDiscoVeg.ValidFromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValidToDate {
                get {
                    try {
                        return ((string)(this[this.tableMstIcDiscoVeg.ValidToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidToDate\' in table \'MstIcDiscoVeg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDiscoVeg.ValidToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SqFt {
                get {
                    try {
                        return ((int)(this[this.tableMstIcDiscoVeg.SqFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SqFt\' in table \'MstIcDiscoVeg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDiscoVeg.SqFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Effectiveness {
                get {
                    try {
                        return ((double)(this[this.tableMstIcDiscoVeg.EffectivenessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Effectiveness\' in table \'MstIcDiscoVeg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDiscoVeg.EffectivenessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableMstIcDiscoVeg.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'MstIcDiscoVeg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDiscoVeg.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AppendDate {
                get {
                    try {
                        return ((string)(this[this.tableMstIcDiscoVeg.AppendDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppendDate\' in table \'MstIcDiscoVeg\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDiscoVeg.AppendDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableMstIcDiscoVeg.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableMstIcDiscoVeg.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDivideIDNull() {
                return this.IsNull(this.tableMstIcDiscoVeg.DivideIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDivideIDNull() {
                this[this.tableMstIcDiscoVeg.DivideIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeFrameNull() {
                return this.IsNull(this.tableMstIcDiscoVeg.TimeFrameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeFrameNull() {
                this[this.tableMstIcDiscoVeg.TimeFrameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplyAreaTFNull() {
                return this.IsNull(this.tableMstIcDiscoVeg.ApplyAreaTFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplyAreaTFNull() {
                this[this.tableMstIcDiscoVeg.ApplyAreaTFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidFromDateNull() {
                return this.IsNull(this.tableMstIcDiscoVeg.ValidFromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidFromDateNull() {
                this[this.tableMstIcDiscoVeg.ValidFromDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidToDateNull() {
                return this.IsNull(this.tableMstIcDiscoVeg.ValidToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidToDateNull() {
                this[this.tableMstIcDiscoVeg.ValidToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqFtNull() {
                return this.IsNull(this.tableMstIcDiscoVeg.SqFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqFtNull() {
                this[this.tableMstIcDiscoVeg.SqFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectivenessNull() {
                return this.IsNull(this.tableMstIcDiscoVeg.EffectivenessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectivenessNull() {
                this[this.tableMstIcDiscoVeg.EffectivenessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableMstIcDiscoVeg.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableMstIcDiscoVeg.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppendDateNull() {
                return this.IsNull(this.tableMstIcDiscoVeg.AppendDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppendDateNull() {
                this[this.tableMstIcDiscoVeg.AppendDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MstIcDrywellRow : global::System.Data.DataRow {
            
            private MstIcDrywellDataTable tableMstIcDrywell;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MstIcDrywellRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMstIcDrywell = ((MstIcDrywellDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MAPINFO_ID {
                get {
                    return ((int)(this[this.tableMstIcDrywell.MAPINFO_IDColumn]));
                }
                set {
                    this[this.tableMstIcDrywell.MAPINFO_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int dscID {
                get {
                    try {
                        return ((int)(this[this.tableMstIcDrywell.dscIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'dscID\' in table \'MstIcDrywell\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDrywell.dscIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParcelID {
                get {
                    try {
                        return ((int)(this[this.tableMstIcDrywell.ParcelIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParcelID\' in table \'MstIcDrywell\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDrywell.ParcelIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DivideID {
                get {
                    try {
                        return ((int)(this[this.tableMstIcDrywell.DivideIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DivideID\' in table \'MstIcDrywell\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDrywell.DivideIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RoofRPark {
                get {
                    try {
                        return ((string)(this[this.tableMstIcDrywell.RoofRParkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RoofRPark\' in table \'MstIcDrywell\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDrywell.RoofRParkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string assumeKey {
                get {
                    try {
                        return ((string)(this[this.tableMstIcDrywell.assumeKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'assumeKey\' in table \'MstIcDrywell\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDrywell.assumeKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TimeFrame {
                get {
                    try {
                        return ((string)(this[this.tableMstIcDrywell.TimeFrameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeFrame\' in table \'MstIcDrywell\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDrywell.TimeFrameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApplyAreaTF {
                get {
                    try {
                        return ((string)(this[this.tableMstIcDrywell.ApplyAreaTFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApplyAreaTF\' in table \'MstIcDrywell\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDrywell.ApplyAreaTFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValidFromDate {
                get {
                    try {
                        return ((string)(this[this.tableMstIcDrywell.ValidFromDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidFromDate\' in table \'MstIcDrywell\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDrywell.ValidFromDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ValidToDate {
                get {
                    try {
                        return ((string)(this[this.tableMstIcDrywell.ValidToDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidToDate\' in table \'MstIcDrywell\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDrywell.ValidToDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SqFt {
                get {
                    try {
                        return ((int)(this[this.tableMstIcDrywell.SqFtColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SqFt\' in table \'MstIcDrywell\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDrywell.SqFtColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableMstIcDrywell.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'MstIcDrywell\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDrywell.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AppendDate {
                get {
                    try {
                        return ((string)(this[this.tableMstIcDrywell.AppendDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AppendDate\' in table \'MstIcDrywell\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMstIcDrywell.AppendDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdscIDNull() {
                return this.IsNull(this.tableMstIcDrywell.dscIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdscIDNull() {
                this[this.tableMstIcDrywell.dscIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParcelIDNull() {
                return this.IsNull(this.tableMstIcDrywell.ParcelIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParcelIDNull() {
                this[this.tableMstIcDrywell.ParcelIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDivideIDNull() {
                return this.IsNull(this.tableMstIcDrywell.DivideIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDivideIDNull() {
                this[this.tableMstIcDrywell.DivideIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRoofRParkNull() {
                return this.IsNull(this.tableMstIcDrywell.RoofRParkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRoofRParkNull() {
                this[this.tableMstIcDrywell.RoofRParkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsassumeKeyNull() {
                return this.IsNull(this.tableMstIcDrywell.assumeKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetassumeKeyNull() {
                this[this.tableMstIcDrywell.assumeKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeFrameNull() {
                return this.IsNull(this.tableMstIcDrywell.TimeFrameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeFrameNull() {
                this[this.tableMstIcDrywell.TimeFrameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApplyAreaTFNull() {
                return this.IsNull(this.tableMstIcDrywell.ApplyAreaTFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApplyAreaTFNull() {
                this[this.tableMstIcDrywell.ApplyAreaTFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidFromDateNull() {
                return this.IsNull(this.tableMstIcDrywell.ValidFromDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidFromDateNull() {
                this[this.tableMstIcDrywell.ValidFromDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidToDateNull() {
                return this.IsNull(this.tableMstIcDrywell.ValidToDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidToDateNull() {
                this[this.tableMstIcDrywell.ValidToDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSqFtNull() {
                return this.IsNull(this.tableMstIcDrywell.SqFtColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSqFtNull() {
                this[this.tableMstIcDrywell.SqFtColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableMstIcDrywell.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableMstIcDrywell.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAppendDateNull() {
                return this.IsNull(this.tableMstIcDrywell.AppendDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAppendDateNull() {
                this[this.tableMstIcDrywell.AppendDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DscQcRow : global::System.Data.DataRow {
            
            private DscQcDataTable tableDscQc;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DscQcRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDscQc = ((DscQcDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DscID {
                get {
                    try {
                        return ((int)(this[this.tableDscQc.DscIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DscID\' in table \'DscQc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDscQc.DscIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DscError {
                get {
                    try {
                        return ((string)(this[this.tableDscQc.DscErrorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DscError\' in table \'DscQc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDscQc.DscErrorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ErrorDescription {
                get {
                    try {
                        return ((string)(this[this.tableDscQc.ErrorDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ErrorDescription\' in table \'DscQc\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDscQc.ErrorDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDscIDNull() {
                return this.IsNull(this.tableDscQc.DscIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDscIDNull() {
                this[this.tableDscQc.DscIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDscErrorNull() {
                return this.IsNull(this.tableDscQc.DscErrorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDscErrorNull() {
                this[this.tableDscQc.DscErrorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsErrorDescriptionNull() {
                return this.IsNull(this.tableDscQc.ErrorDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetErrorDescriptionNull() {
                this[this.tableDscQc.ErrorDescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SESSIONRowChangeEvent : global::System.EventArgs {
            
            private SESSIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRowChangeEvent(SESSIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SESSIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class USERUPDATERowChangeEvent : global::System.EventArgs {
            
            private USERUPDATERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERUPDATERowChangeEvent(USERUPDATERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERUPDATERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DSCEDITAppendTableRowChangeEvent : global::System.EventArgs {
            
            private DSCEDITAppendTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DSCEDITAppendTableRowChangeEvent(DSCEDITAppendTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DSCEDITAppendTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DSCEDITRowChangeEvent : global::System.EventArgs {
            
            private DSCEDITRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DSCEDITRowChangeEvent(DSCEDITRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DSCEDITRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DscUpdaterRowChangeEvent : global::System.EventArgs {
            
            private DscUpdaterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DscUpdaterRowChangeEvent(DscUpdaterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DscUpdaterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MstDscRowChangeEvent : global::System.EventArgs {
            
            private MstDscRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscRowChangeEvent(MstDscRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstDscRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MstIcDiscoVegRowChangeEvent : global::System.EventArgs {
            
            private MstIcDiscoVegRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstIcDiscoVegRowChangeEvent(MstIcDiscoVegRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstIcDiscoVegRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MstIcDrywellRowChangeEvent : global::System.EventArgs {
            
            private MstIcDrywellRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstIcDrywellRowChangeEvent(MstIcDrywellRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MstIcDrywellRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DscQcRowChangeEvent : global::System.EventArgs {
            
            private DscQcRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DscQcRowChangeEvent(DscQcRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DscQcRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace DSCUpdater.ProjectDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SESSIONTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SESSIONTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SESSION";
            tableMapping.ColumnMappings.Add("edit_id", "edit_id");
            tableMapping.ColumnMappings.Add("edit_date", "edit_date");
            tableMapping.ColumnMappings.Add("edited_by", "edited_by");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SESSION] WHERE (([edit_id] = @Original_edit_id) AND ([edit_dat" +
                "e] = @Original_edit_date) AND ([edited_by] = @Original_edited_by))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SESSION] ([edit_id], [edit_date], [edited_by]) VALUES (@edit_i" +
                "d, @edit_date, @edited_by);\r\nSELECT edit_id, edit_date, edited_by FROM SESSION W" +
                "HERE (edit_id = @edit_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SESSION] SET [edit_id] = @edit_id, [edit_date] = @edit_date, [edited_by] = @edited_by WHERE (([edit_id] = @Original_edit_id) AND ([edit_date] = @Original_edit_date) AND ([edited_by] = @Original_edited_by));
SELECT edit_id, edit_date, edited_by FROM SESSION WHERE (edit_id = @edit_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edited_by", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT edit_id, edit_date, edited_by FROM dbo.SESSION";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectDataSet.SESSIONDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectDataSet.SESSIONDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectDataSet.SESSIONDataTable dataTable = new ProjectDataSet.SESSIONDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet.SESSIONDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SESSION");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_edit_id, System.DateTime Original_edit_date, string Original_edited_by) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_edit_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_edit_date));
            if ((Original_edited_by == null)) {
                throw new global::System.ArgumentNullException("Original_edited_by");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_edited_by));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int edit_id, System.DateTime edit_date, string edited_by) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(edit_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(edit_date));
            if ((edited_by == null)) {
                throw new global::System.ArgumentNullException("edited_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(edited_by));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int edit_id, System.DateTime edit_date, string edited_by, int Original_edit_id, System.DateTime Original_edit_date, string Original_edited_by) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(edit_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(edit_date));
            if ((edited_by == null)) {
                throw new global::System.ArgumentNullException("edited_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(edited_by));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_edit_id));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(Original_edit_date));
            if ((Original_edited_by == null)) {
                throw new global::System.ArgumentNullException("Original_edited_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_edited_by));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime edit_date, string edited_by, int Original_edit_id, System.DateTime Original_edit_date, string Original_edited_by) {
            return this.Update(Original_edit_id, edit_date, edited_by, Original_edit_id, Original_edit_date, Original_edited_by);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class USERUPDATETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public USERUPDATETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "USERUPDATE";
            tableMapping.ColumnMappings.Add("dsc_id", "dsc_id");
            tableMapping.ColumnMappings.Add("rno", "rno");
            tableMapping.ColumnMappings.Add("new_roof_area_sqft", "new_roof_area_sqft");
            tableMapping.ColumnMappings.Add("new_roof_disco_ic_area_sqft", "new_roof_disco_ic_area_sqft");
            tableMapping.ColumnMappings.Add("new_roof_drywell_ic_area_sqft", "new_roof_drywell_ic_area_sqft");
            tableMapping.ColumnMappings.Add("new_park_area_sqft", "new_park_area_sqft");
            tableMapping.ColumnMappings.Add("new_park_disco_ic_area_sqft", "new_park_disco_ic_area_sqft");
            tableMapping.ColumnMappings.Add("new_park_drywell_ic_area_sqft", "new_park_drywell_ic_area_sqft");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [USERUPDATE] WHERE (([dsc_id] = @Original_dsc_id) AND ((@IsNull_new_roof_area_sqft = 1 AND [new_roof_area_sqft] IS NULL) OR ([new_roof_area_sqft] = @Original_new_roof_area_sqft)) AND ((@IsNull_new_roof_disco_ic_area_sqft = 1 AND [new_roof_disco_ic_area_sqft] IS NULL) OR ([new_roof_disco_ic_area_sqft] = @Original_new_roof_disco_ic_area_sqft)) AND ((@IsNull_new_roof_drywell_ic_area_sqft = 1 AND [new_roof_drywell_ic_area_sqft] IS NULL) OR ([new_roof_drywell_ic_area_sqft] = @Original_new_roof_drywell_ic_area_sqft)) AND ((@IsNull_new_park_area_sqft = 1 AND [new_park_area_sqft] IS NULL) OR ([new_park_area_sqft] = @Original_new_park_area_sqft)) AND ((@IsNull_new_park_disco_ic_area_sqft = 1 AND [new_park_disco_ic_area_sqft] IS NULL) OR ([new_park_disco_ic_area_sqft] = @Original_new_park_disco_ic_area_sqft)) AND ((@IsNull_new_park_drywell_ic_area_sqft = 1 AND [new_park_drywell_ic_area_sqft] IS NULL) OR ([new_park_drywell_ic_area_sqft] = @Original_new_park_drywell_ic_area_sqft)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_dsc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dsc_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [USERUPDATE] ([rno], [dsc_id], [new_roof_area_sqft], [new_roof_disco_ic_area_sqft], [new_roof_drywell_ic_area_sqft], [new_park_area_sqft], [new_park_disco_ic_area_sqft], [new_park_drywell_ic_area_sqft]) VALUES (@rno, @dsc_id, @new_roof_area_sqft, @new_roof_disco_ic_area_sqft, @new_roof_drywell_ic_area_sqft, @new_park_area_sqft, @new_park_disco_ic_area_sqft, @new_park_drywell_ic_area_sqft)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rno", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rno", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dsc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dsc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [USERUPDATE] SET [rno] = @rno, [dsc_id] = @dsc_id, [new_roof_area_sqft] = @new_roof_area_sqft, [new_roof_disco_ic_area_sqft] = @new_roof_disco_ic_area_sqft, [new_roof_drywell_ic_area_sqft] = @new_roof_drywell_ic_area_sqft, [new_park_area_sqft] = @new_park_area_sqft, [new_park_disco_ic_area_sqft] = @new_park_disco_ic_area_sqft, [new_park_drywell_ic_area_sqft] = @new_park_drywell_ic_area_sqft WHERE (([dsc_id] = @Original_dsc_id) AND ((@IsNull_new_roof_area_sqft = 1 AND [new_roof_area_sqft] IS NULL) OR ([new_roof_area_sqft] = @Original_new_roof_area_sqft)) AND ((@IsNull_new_roof_disco_ic_area_sqft = 1 AND [new_roof_disco_ic_area_sqft] IS NULL) OR ([new_roof_disco_ic_area_sqft] = @Original_new_roof_disco_ic_area_sqft)) AND ((@IsNull_new_roof_drywell_ic_area_sqft = 1 AND [new_roof_drywell_ic_area_sqft] IS NULL) OR ([new_roof_drywell_ic_area_sqft] = @Original_new_roof_drywell_ic_area_sqft)) AND ((@IsNull_new_park_area_sqft = 1 AND [new_park_area_sqft] IS NULL) OR ([new_park_area_sqft] = @Original_new_park_area_sqft)) AND ((@IsNull_new_park_disco_ic_area_sqft = 1 AND [new_park_disco_ic_area_sqft] IS NULL) OR ([new_park_disco_ic_area_sqft] = @Original_new_park_disco_ic_area_sqft)) AND ((@IsNull_new_park_drywell_ic_area_sqft = 1 AND [new_park_drywell_ic_area_sqft] IS NULL) OR ([new_park_drywell_ic_area_sqft] = @Original_new_park_drywell_ic_area_sqft)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rno", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rno", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dsc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dsc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_dsc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dsc_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     USERUPDATE.*\r\nFROM         USERUPDATE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectDataSet.USERUPDATEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectDataSet.USERUPDATEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectDataSet.USERUPDATEDataTable dataTable = new ProjectDataSet.USERUPDATEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet.USERUPDATEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet dataSet) {
            return this.Adapter.Update(dataSet, "USERUPDATE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_dsc_id, global::System.Nullable<int> Original_new_roof_area_sqft, global::System.Nullable<int> Original_new_roof_disco_ic_area_sqft, global::System.Nullable<int> Original_new_roof_drywell_ic_area_sqft, global::System.Nullable<int> Original_new_park_area_sqft, global::System.Nullable<int> Original_new_park_disco_ic_area_sqft, global::System.Nullable<int> Original_new_park_drywell_ic_area_sqft) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_dsc_id));
            if ((Original_new_roof_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_new_roof_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_new_roof_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_new_roof_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_new_roof_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_new_roof_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_new_park_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_new_park_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_new_park_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_new_park_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_new_park_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_new_park_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string rno, int dsc_id, global::System.Nullable<int> new_roof_area_sqft, global::System.Nullable<int> new_roof_disco_ic_area_sqft, global::System.Nullable<int> new_roof_drywell_ic_area_sqft, global::System.Nullable<int> new_park_area_sqft, global::System.Nullable<int> new_park_disco_ic_area_sqft, global::System.Nullable<int> new_park_drywell_ic_area_sqft) {
            if ((rno == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(rno));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(dsc_id));
            if ((new_roof_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(new_roof_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((new_roof_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(new_roof_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((new_roof_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(new_roof_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((new_park_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(new_park_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((new_park_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(new_park_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((new_park_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(new_park_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string rno, int dsc_id, global::System.Nullable<int> new_roof_area_sqft, global::System.Nullable<int> new_roof_disco_ic_area_sqft, global::System.Nullable<int> new_roof_drywell_ic_area_sqft, global::System.Nullable<int> new_park_area_sqft, global::System.Nullable<int> new_park_disco_ic_area_sqft, global::System.Nullable<int> new_park_drywell_ic_area_sqft, int Original_dsc_id, global::System.Nullable<int> Original_new_roof_area_sqft, global::System.Nullable<int> Original_new_roof_disco_ic_area_sqft, global::System.Nullable<int> Original_new_roof_drywell_ic_area_sqft, global::System.Nullable<int> Original_new_park_area_sqft, global::System.Nullable<int> Original_new_park_disco_ic_area_sqft, global::System.Nullable<int> Original_new_park_drywell_ic_area_sqft) {
            if ((rno == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(rno));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(dsc_id));
            if ((new_roof_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(new_roof_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((new_roof_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(new_roof_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((new_roof_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(new_roof_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((new_park_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(new_park_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((new_park_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(new_park_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((new_park_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(new_park_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_dsc_id));
            if ((Original_new_roof_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_new_roof_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_new_roof_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_new_roof_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_new_roof_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_new_roof_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_new_park_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_new_park_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_new_park_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_new_park_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_new_park_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_new_park_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string rno, global::System.Nullable<int> new_roof_area_sqft, global::System.Nullable<int> new_roof_disco_ic_area_sqft, global::System.Nullable<int> new_roof_drywell_ic_area_sqft, global::System.Nullable<int> new_park_area_sqft, global::System.Nullable<int> new_park_disco_ic_area_sqft, global::System.Nullable<int> new_park_drywell_ic_area_sqft, int Original_dsc_id, global::System.Nullable<int> Original_new_roof_area_sqft, global::System.Nullable<int> Original_new_roof_disco_ic_area_sqft, global::System.Nullable<int> Original_new_roof_drywell_ic_area_sqft, global::System.Nullable<int> Original_new_park_area_sqft, global::System.Nullable<int> Original_new_park_disco_ic_area_sqft, global::System.Nullable<int> Original_new_park_drywell_ic_area_sqft) {
            return this.Update(rno, Original_dsc_id, new_roof_area_sqft, new_roof_disco_ic_area_sqft, new_roof_drywell_ic_area_sqft, new_park_area_sqft, new_park_disco_ic_area_sqft, new_park_drywell_ic_area_sqft, Original_dsc_id, Original_new_roof_area_sqft, Original_new_roof_disco_ic_area_sqft, Original_new_roof_drywell_ic_area_sqft, Original_new_park_area_sqft, Original_new_park_disco_ic_area_sqft, Original_new_park_drywell_ic_area_sqft);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DSCEDITAppendTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DSCEDITAppendTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DSCEDITAppendTable";
            tableMapping.ColumnMappings.Add("dsc_edit_id", "dsc_edit_id");
            tableMapping.ColumnMappings.Add("edit_id", "edit_id");
            tableMapping.ColumnMappings.Add("edit_date", "edit_date");
            tableMapping.ColumnMappings.Add("edited_by", "edited_by");
            tableMapping.ColumnMappings.Add("rno", "rno");
            tableMapping.ColumnMappings.Add("dsc_id", "dsc_id");
            tableMapping.ColumnMappings.Add("old_roof_area_sqft", "old_roof_area_sqft");
            tableMapping.ColumnMappings.Add("new_roof_area_sqft", "new_roof_area_sqft");
            tableMapping.ColumnMappings.Add("old_roof_disco_ic_area_sqft", "old_roof_disco_ic_area_sqft");
            tableMapping.ColumnMappings.Add("new_roof_disco_ic_area_sqft", "new_roof_disco_ic_area_sqft");
            tableMapping.ColumnMappings.Add("old_roof_drywell_ic_area_sqft", "old_roof_drywell_ic_area_sqft");
            tableMapping.ColumnMappings.Add("new_roof_drywell_ic_area_sqft", "new_roof_drywell_ic_area_sqft");
            tableMapping.ColumnMappings.Add("old_park_area_sqft", "old_park_area_sqft");
            tableMapping.ColumnMappings.Add("new_park_area_sqft", "new_park_area_sqft");
            tableMapping.ColumnMappings.Add("old_park_disco_ic_area_sqft", "old_park_disco_ic_area_sqft");
            tableMapping.ColumnMappings.Add("new_park_disco_ic_area_sqft", "new_park_disco_ic_area_sqft");
            tableMapping.ColumnMappings.Add("old_park_drywell_ic_area_sqft", "old_park_drywell_ic_area_sqft");
            tableMapping.ColumnMappings.Add("new_park_drywell_ic_area_sqft", "new_park_drywell_ic_area_sqft");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DSCEDITAppendTable] ([dsc_edit_id], [edit_id], [edit_date], [edited_by], [rno], [dsc_id], [old_roof_area_sqft], [new_roof_area_sqft], [old_roof_disco_ic_area_sqft], [new_roof_disco_ic_area_sqft], [old_roof_drywell_ic_area_sqft], [new_roof_drywell_ic_area_sqft], [old_park_area_sqft], [new_park_area_sqft], [old_park_disco_ic_area_sqft], [new_park_disco_ic_area_sqft], [old_park_drywell_ic_area_sqft], [new_park_drywell_ic_area_sqft]) VALUES (@dsc_edit_id, @edit_id, @edit_date, @edited_by, @rno, @dsc_id, @old_roof_area_sqft, @new_roof_area_sqft, @old_roof_disco_ic_area_sqft, @new_roof_disco_ic_area_sqft, @old_roof_drywell_ic_area_sqft, @new_roof_drywell_ic_area_sqft, @old_park_area_sqft, @new_park_area_sqft, @old_park_disco_ic_area_sqft, @new_park_disco_ic_area_sqft, @old_park_drywell_ic_area_sqft, @new_park_drywell_ic_area_sqft)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dsc_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dsc_edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edited_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rno", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rno", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dsc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dsc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT dsc_edit_id, edit_id, edit_date, edited_by, rno, dsc_id, old_roof_area_sqft, new_roof_area_sqft, old_roof_disco_ic_area_sqft, new_roof_disco_ic_area_sqft, old_roof_drywell_ic_area_sqft, new_roof_drywell_ic_area_sqft, old_park_area_sqft, new_park_area_sqft, old_park_disco_ic_area_sqft, new_park_disco_ic_area_sqft, old_park_drywell_ic_area_sqft, new_park_drywell_ic_area_sqft FROM dbo.DSCEDITAppendTable";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectDataSet.DSCEDITAppendTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectDataSet.DSCEDITAppendTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectDataSet.DSCEDITAppendTableDataTable dataTable = new ProjectDataSet.DSCEDITAppendTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet.DSCEDITAppendTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DSCEDITAppendTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int dsc_edit_id, 
                    int edit_id, 
                    System.DateTime edit_date, 
                    string edited_by, 
                    string rno, 
                    int dsc_id, 
                    global::System.Nullable<int> old_roof_area_sqft, 
                    global::System.Nullable<int> new_roof_area_sqft, 
                    global::System.Nullable<int> old_roof_disco_ic_area_sqft, 
                    global::System.Nullable<int> new_roof_disco_ic_area_sqft, 
                    global::System.Nullable<int> old_roof_drywell_ic_area_sqft, 
                    global::System.Nullable<int> new_roof_drywell_ic_area_sqft, 
                    global::System.Nullable<int> old_park_area_sqft, 
                    global::System.Nullable<int> new_park_area_sqft, 
                    global::System.Nullable<int> old_park_disco_ic_area_sqft, 
                    global::System.Nullable<int> new_park_disco_ic_area_sqft, 
                    global::System.Nullable<int> old_park_drywell_ic_area_sqft, 
                    global::System.Nullable<int> new_park_drywell_ic_area_sqft) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(dsc_edit_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(edit_id));
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(edit_date));
            if ((edited_by == null)) {
                throw new global::System.ArgumentNullException("edited_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(edited_by));
            }
            if ((rno == null)) {
                throw new global::System.ArgumentNullException("rno");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(rno));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(dsc_id));
            if ((old_roof_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(old_roof_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((new_roof_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(new_roof_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((old_roof_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(old_roof_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((new_roof_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(new_roof_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((old_roof_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(old_roof_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((new_roof_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(new_roof_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((old_park_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(old_park_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((new_park_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(new_park_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((old_park_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(old_park_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((new_park_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((int)(new_park_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((old_park_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((int)(old_park_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((new_park_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((int)(new_park_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DSCEDITTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DSCEDITTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DSCEDIT";
            tableMapping.ColumnMappings.Add("dsc_edit_id", "dsc_edit_id");
            tableMapping.ColumnMappings.Add("edit_id", "edit_id");
            tableMapping.ColumnMappings.Add("edit_date", "edit_date");
            tableMapping.ColumnMappings.Add("edited_by", "edited_by");
            tableMapping.ColumnMappings.Add("rno", "rno");
            tableMapping.ColumnMappings.Add("dsc_id", "dsc_id");
            tableMapping.ColumnMappings.Add("old_roof_area_sqft", "old_roof_area_sqft");
            tableMapping.ColumnMappings.Add("new_roof_area_sqft", "new_roof_area_sqft");
            tableMapping.ColumnMappings.Add("old_roof_disco_ic_area_sqft", "old_roof_disco_ic_area_sqft");
            tableMapping.ColumnMappings.Add("new_roof_disco_ic_area_sqft", "new_roof_disco_ic_area_sqft");
            tableMapping.ColumnMappings.Add("old_roof_drywell_ic_area_sqft", "old_roof_drywell_ic_area_sqft");
            tableMapping.ColumnMappings.Add("new_roof_drywell_ic_area_sqft", "new_roof_drywell_ic_area_sqft");
            tableMapping.ColumnMappings.Add("old_park_area_sqft", "old_park_area_sqft");
            tableMapping.ColumnMappings.Add("new_park_area_sqft", "new_park_area_sqft");
            tableMapping.ColumnMappings.Add("old_park_disco_ic_area_sqft", "old_park_disco_ic_area_sqft");
            tableMapping.ColumnMappings.Add("new_park_disco_ic_area_sqft", "new_park_disco_ic_area_sqft");
            tableMapping.ColumnMappings.Add("old_park_drywell_ic_area_sqft", "old_park_drywell_ic_area_sqft");
            tableMapping.ColumnMappings.Add("new_park_drywell_ic_area_sqft", "new_park_drywell_ic_area_sqft");
            tableMapping.ColumnMappings.Add("updater_editor_value_changed", "updater_editor_value_changed");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DSCEDIT] WHERE (([dsc_edit_id] = @Original_dsc_edit_id) AND ([" +
                "edit_id] = @Original_edit_id) AND ([edit_date] = @Original_edit_date) AND ([edit" +
                "ed_by] = @Original_edited_by) AND ((@IsNull_rno = 1 AND [rno] IS NULL) OR ([rno]" +
                " = @Original_rno)) AND ([dsc_id] = @Original_dsc_id) AND ((@IsNull_old_roof_area" +
                "_sqft = 1 AND [old_roof_area_sqft] IS NULL) OR ([old_roof_area_sqft] = @Original" +
                "_old_roof_area_sqft)) AND ((@IsNull_new_roof_area_sqft = 1 AND [new_roof_area_sq" +
                "ft] IS NULL) OR ([new_roof_area_sqft] = @Original_new_roof_area_sqft)) AND ((@Is" +
                "Null_old_roof_disco_ic_area_sqft = 1 AND [old_roof_disco_ic_area_sqft] IS NULL) " +
                "OR ([old_roof_disco_ic_area_sqft] = @Original_old_roof_disco_ic_area_sqft)) AND " +
                "((@IsNull_new_roof_disco_ic_area_sqft = 1 AND [new_roof_disco_ic_area_sqft] IS N" +
                "ULL) OR ([new_roof_disco_ic_area_sqft] = @Original_new_roof_disco_ic_area_sqft))" +
                " AND ((@IsNull_old_roof_drywell_ic_area_sqft = 1 AND [old_roof_drywell_ic_area_s" +
                "qft] IS NULL) OR ([old_roof_drywell_ic_area_sqft] = @Original_old_roof_drywell_i" +
                "c_area_sqft)) AND ((@IsNull_new_roof_drywell_ic_area_sqft = 1 AND [new_roof_dryw" +
                "ell_ic_area_sqft] IS NULL) OR ([new_roof_drywell_ic_area_sqft] = @Original_new_r" +
                "oof_drywell_ic_area_sqft)) AND ((@IsNull_old_park_area_sqft = 1 AND [old_park_ar" +
                "ea_sqft] IS NULL) OR ([old_park_area_sqft] = @Original_old_park_area_sqft)) AND " +
                "((@IsNull_new_park_area_sqft = 1 AND [new_park_area_sqft] IS NULL) OR ([new_park" +
                "_area_sqft] = @Original_new_park_area_sqft)) AND ((@IsNull_old_park_disco_ic_are" +
                "a_sqft = 1 AND [old_park_disco_ic_area_sqft] IS NULL) OR ([old_park_disco_ic_are" +
                "a_sqft] = @Original_old_park_disco_ic_area_sqft)) AND ((@IsNull_new_park_disco_i" +
                "c_area_sqft = 1 AND [new_park_disco_ic_area_sqft] IS NULL) OR ([new_park_disco_i" +
                "c_area_sqft] = @Original_new_park_disco_ic_area_sqft)) AND ((@IsNull_old_park_dr" +
                "ywell_ic_area_sqft = 1 AND [old_park_drywell_ic_area_sqft] IS NULL) OR ([old_par" +
                "k_drywell_ic_area_sqft] = @Original_old_park_drywell_ic_area_sqft)) AND ((@IsNul" +
                "l_new_park_drywell_ic_area_sqft = 1 AND [new_park_drywell_ic_area_sqft] IS NULL)" +
                " OR ([new_park_drywell_ic_area_sqft] = @Original_new_park_drywell_ic_area_sqft))" +
                " AND ((@IsNull_updater_editor_value_changed = 1 AND [updater_editor_value_change" +
                "d] IS NULL) OR ([updater_editor_value_changed] = @Original_updater_editor_value_" +
                "changed)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_dsc_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dsc_edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edited_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_rno", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rno", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_rno", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rno", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_dsc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dsc_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_old_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_old_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_old_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_old_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_old_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_old_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_old_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_old_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_old_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_old_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_old_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_old_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_updater_editor_value_changed", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "updater_editor_value_changed", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_updater_editor_value_changed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "updater_editor_value_changed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[DSCEDIT] ([edit_id], [edit_date], [edited_by], [rno], [dsc_id], [old_roof_area_sqft], [new_roof_area_sqft], [old_roof_disco_ic_area_sqft], [new_roof_disco_ic_area_sqft], [old_roof_drywell_ic_area_sqft], [new_roof_drywell_ic_area_sqft], [old_park_area_sqft], [new_park_area_sqft], [old_park_disco_ic_area_sqft], [new_park_disco_ic_area_sqft], [old_park_drywell_ic_area_sqft], [new_park_drywell_ic_area_sqft], [updater_editor_value_changed]) VALUES (@edit_id, @edit_date, @edited_by, @rno, @dsc_id, @old_roof_area_sqft, @new_roof_area_sqft, @old_roof_disco_ic_area_sqft, @new_roof_disco_ic_area_sqft, @old_roof_drywell_ic_area_sqft, @new_roof_drywell_ic_area_sqft, @old_park_area_sqft, @new_park_area_sqft, @old_park_disco_ic_area_sqft, @new_park_disco_ic_area_sqft, @old_park_drywell_ic_area_sqft, @new_park_drywell_ic_area_sqft, @updater_editor_value_changed);
SELECT dsc_edit_id, edit_id, edit_date, edited_by, rno, dsc_id, old_roof_area_sqft, new_roof_area_sqft, old_roof_disco_ic_area_sqft, new_roof_disco_ic_area_sqft, old_roof_drywell_ic_area_sqft, new_roof_drywell_ic_area_sqft, old_park_area_sqft, new_park_area_sqft, old_park_disco_ic_area_sqft, new_park_disco_ic_area_sqft, old_park_drywell_ic_area_sqft, new_park_drywell_ic_area_sqft, updater_editor_value_changed FROM DSCEDIT WHERE (dsc_edit_id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edited_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rno", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rno", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dsc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dsc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@updater_editor_value_changed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "updater_editor_value_changed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[DSCEDIT] SET [edit_id] = @edit_id, [edit_date] = @edit_date, [edite" +
                "d_by] = @edited_by, [rno] = @rno, [dsc_id] = @dsc_id, [old_roof_area_sqft] = @ol" +
                "d_roof_area_sqft, [new_roof_area_sqft] = @new_roof_area_sqft, [old_roof_disco_ic" +
                "_area_sqft] = @old_roof_disco_ic_area_sqft, [new_roof_disco_ic_area_sqft] = @new" +
                "_roof_disco_ic_area_sqft, [old_roof_drywell_ic_area_sqft] = @old_roof_drywell_ic" +
                "_area_sqft, [new_roof_drywell_ic_area_sqft] = @new_roof_drywell_ic_area_sqft, [o" +
                "ld_park_area_sqft] = @old_park_area_sqft, [new_park_area_sqft] = @new_park_area_" +
                "sqft, [old_park_disco_ic_area_sqft] = @old_park_disco_ic_area_sqft, [new_park_di" +
                "sco_ic_area_sqft] = @new_park_disco_ic_area_sqft, [old_park_drywell_ic_area_sqft" +
                "] = @old_park_drywell_ic_area_sqft, [new_park_drywell_ic_area_sqft] = @new_park_" +
                "drywell_ic_area_sqft, [updater_editor_value_changed] = @updater_editor_value_cha" +
                "nged WHERE (([dsc_edit_id] = @Original_dsc_edit_id) AND ([edit_id] = @Original_e" +
                "dit_id) AND ([edit_date] = @Original_edit_date) AND ([edited_by] = @Original_edi" +
                "ted_by) AND ((@IsNull_rno = 1 AND [rno] IS NULL) OR ([rno] = @Original_rno)) AND" +
                " ([dsc_id] = @Original_dsc_id) AND ((@IsNull_old_roof_area_sqft = 1 AND [old_roo" +
                "f_area_sqft] IS NULL) OR ([old_roof_area_sqft] = @Original_old_roof_area_sqft)) " +
                "AND ((@IsNull_new_roof_area_sqft = 1 AND [new_roof_area_sqft] IS NULL) OR ([new_" +
                "roof_area_sqft] = @Original_new_roof_area_sqft)) AND ((@IsNull_old_roof_disco_ic" +
                "_area_sqft = 1 AND [old_roof_disco_ic_area_sqft] IS NULL) OR ([old_roof_disco_ic" +
                "_area_sqft] = @Original_old_roof_disco_ic_area_sqft)) AND ((@IsNull_new_roof_dis" +
                "co_ic_area_sqft = 1 AND [new_roof_disco_ic_area_sqft] IS NULL) OR ([new_roof_dis" +
                "co_ic_area_sqft] = @Original_new_roof_disco_ic_area_sqft)) AND ((@IsNull_old_roo" +
                "f_drywell_ic_area_sqft = 1 AND [old_roof_drywell_ic_area_sqft] IS NULL) OR ([old" +
                "_roof_drywell_ic_area_sqft] = @Original_old_roof_drywell_ic_area_sqft)) AND ((@I" +
                "sNull_new_roof_drywell_ic_area_sqft = 1 AND [new_roof_drywell_ic_area_sqft] IS N" +
                "ULL) OR ([new_roof_drywell_ic_area_sqft] = @Original_new_roof_drywell_ic_area_sq" +
                "ft)) AND ((@IsNull_old_park_area_sqft = 1 AND [old_park_area_sqft] IS NULL) OR (" +
                "[old_park_area_sqft] = @Original_old_park_area_sqft)) AND ((@IsNull_new_park_are" +
                "a_sqft = 1 AND [new_park_area_sqft] IS NULL) OR ([new_park_area_sqft] = @Origina" +
                "l_new_park_area_sqft)) AND ((@IsNull_old_park_disco_ic_area_sqft = 1 AND [old_pa" +
                "rk_disco_ic_area_sqft] IS NULL) OR ([old_park_disco_ic_area_sqft] = @Original_ol" +
                "d_park_disco_ic_area_sqft)) AND ((@IsNull_new_park_disco_ic_area_sqft = 1 AND [n" +
                "ew_park_disco_ic_area_sqft] IS NULL) OR ([new_park_disco_ic_area_sqft] = @Origin" +
                "al_new_park_disco_ic_area_sqft)) AND ((@IsNull_old_park_drywell_ic_area_sqft = 1" +
                " AND [old_park_drywell_ic_area_sqft] IS NULL) OR ([old_park_drywell_ic_area_sqft" +
                "] = @Original_old_park_drywell_ic_area_sqft)) AND ((@IsNull_new_park_drywell_ic_" +
                "area_sqft = 1 AND [new_park_drywell_ic_area_sqft] IS NULL) OR ([new_park_drywell" +
                "_ic_area_sqft] = @Original_new_park_drywell_ic_area_sqft)) AND ((@IsNull_updater" +
                "_editor_value_changed = 1 AND [updater_editor_value_changed] IS NULL) OR ([updat" +
                "er_editor_value_changed] = @Original_updater_editor_value_changed)));\r\nSELECT ds" +
                "c_edit_id, edit_id, edit_date, edited_by, rno, dsc_id, old_roof_area_sqft, new_r" +
                "oof_area_sqft, old_roof_disco_ic_area_sqft, new_roof_disco_ic_area_sqft, old_roo" +
                "f_drywell_ic_area_sqft, new_roof_drywell_ic_area_sqft, old_park_area_sqft, new_p" +
                "ark_area_sqft, old_park_disco_ic_area_sqft, new_park_disco_ic_area_sqft, old_par" +
                "k_drywell_ic_area_sqft, new_park_drywell_ic_area_sqft, updater_editor_value_chan" +
                "ged FROM DSCEDIT WHERE (dsc_edit_id = @dsc_edit_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@edited_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rno", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rno", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dsc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dsc_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@old_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@new_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@updater_editor_value_changed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "updater_editor_value_changed", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_dsc_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dsc_edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edit_date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edit_date", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_edited_by", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "edited_by", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_rno", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rno", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_rno", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rno", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_dsc_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "dsc_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_old_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_old_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_roof_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_old_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_old_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_roof_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_old_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_old_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_roof_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_roof_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_old_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_old_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_park_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_old_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_old_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_park_disco_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_disco_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_old_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_old_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "old_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_new_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_new_park_drywell_ic_area_sqft", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "new_park_drywell_ic_area_sqft", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_updater_editor_value_changed", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "updater_editor_value_changed", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_updater_editor_value_changed", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "updater_editor_value_changed", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dsc_edit_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "dsc_edit_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT dsc_edit_id, edit_id, edit_date, edited_by, rno, dsc_id, old_roof_area_sqft, new_roof_area_sqft, old_roof_disco_ic_area_sqft, new_roof_disco_ic_area_sqft, old_roof_drywell_ic_area_sqft, new_roof_drywell_ic_area_sqft, old_park_area_sqft, new_park_area_sqft, old_park_disco_ic_area_sqft, new_park_disco_ic_area_sqft, old_park_drywell_ic_area_sqft, new_park_drywell_ic_area_sqft, updater_editor_value_changed FROM dbo.DSCEDIT";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectDataSet.DSCEDITDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectDataSet.DSCEDITDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectDataSet.DSCEDITDataTable dataTable = new ProjectDataSet.DSCEDITDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet.DSCEDITDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DSCEDIT");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_dsc_edit_id, 
                    int Original_edit_id, 
                    System.DateTime Original_edit_date, 
                    string Original_edited_by, 
                    string Original_rno, 
                    int Original_dsc_id, 
                    global::System.Nullable<int> Original_old_roof_area_sqft, 
                    global::System.Nullable<int> Original_new_roof_area_sqft, 
                    global::System.Nullable<int> Original_old_roof_disco_ic_area_sqft, 
                    global::System.Nullable<int> Original_new_roof_disco_ic_area_sqft, 
                    global::System.Nullable<int> Original_old_roof_drywell_ic_area_sqft, 
                    global::System.Nullable<int> Original_new_roof_drywell_ic_area_sqft, 
                    global::System.Nullable<int> Original_old_park_area_sqft, 
                    global::System.Nullable<int> Original_new_park_area_sqft, 
                    global::System.Nullable<int> Original_old_park_disco_ic_area_sqft, 
                    global::System.Nullable<int> Original_new_park_disco_ic_area_sqft, 
                    global::System.Nullable<int> Original_old_park_drywell_ic_area_sqft, 
                    global::System.Nullable<int> Original_new_park_drywell_ic_area_sqft, 
                    global::System.Nullable<bool> Original_updater_editor_value_changed) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_dsc_edit_id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_edit_id));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_edit_date));
            if ((Original_edited_by == null)) {
                throw new global::System.ArgumentNullException("Original_edited_by");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_edited_by));
            }
            if ((Original_rno == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_rno));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_dsc_id));
            if ((Original_old_roof_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_old_roof_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_new_roof_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_new_roof_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_old_roof_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_old_roof_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_new_roof_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_new_roof_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_old_roof_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_old_roof_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_new_roof_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_new_roof_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_old_park_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_old_park_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_new_park_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((int)(Original_new_park_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_old_park_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((int)(Original_old_park_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_new_park_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[26].Value = ((int)(Original_new_park_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_old_park_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((int)(Original_old_park_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_new_park_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((int)(Original_new_park_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_updater_editor_value_changed.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((bool)(Original_updater_editor_value_changed.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int edit_id, 
                    System.DateTime edit_date, 
                    string edited_by, 
                    string rno, 
                    int dsc_id, 
                    global::System.Nullable<int> old_roof_area_sqft, 
                    global::System.Nullable<int> new_roof_area_sqft, 
                    global::System.Nullable<int> old_roof_disco_ic_area_sqft, 
                    global::System.Nullable<int> new_roof_disco_ic_area_sqft, 
                    global::System.Nullable<int> old_roof_drywell_ic_area_sqft, 
                    global::System.Nullable<int> new_roof_drywell_ic_area_sqft, 
                    global::System.Nullable<int> old_park_area_sqft, 
                    global::System.Nullable<int> new_park_area_sqft, 
                    global::System.Nullable<int> old_park_disco_ic_area_sqft, 
                    global::System.Nullable<int> new_park_disco_ic_area_sqft, 
                    global::System.Nullable<int> old_park_drywell_ic_area_sqft, 
                    global::System.Nullable<int> new_park_drywell_ic_area_sqft, 
                    global::System.Nullable<bool> updater_editor_value_changed) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(edit_id));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(edit_date));
            if ((edited_by == null)) {
                throw new global::System.ArgumentNullException("edited_by");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(edited_by));
            }
            if ((rno == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(rno));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(dsc_id));
            if ((old_roof_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(old_roof_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((new_roof_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(new_roof_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((old_roof_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((int)(old_roof_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((new_roof_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(new_roof_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((old_roof_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(old_roof_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((new_roof_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(new_roof_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((old_park_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(old_park_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((new_park_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(new_park_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((old_park_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(old_park_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((new_park_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(new_park_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((old_park_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((int)(old_park_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((new_park_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((int)(new_park_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((updater_editor_value_changed.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((bool)(updater_editor_value_changed.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int edit_id, 
                    System.DateTime edit_date, 
                    string edited_by, 
                    string rno, 
                    int dsc_id, 
                    global::System.Nullable<int> old_roof_area_sqft, 
                    global::System.Nullable<int> new_roof_area_sqft, 
                    global::System.Nullable<int> old_roof_disco_ic_area_sqft, 
                    global::System.Nullable<int> new_roof_disco_ic_area_sqft, 
                    global::System.Nullable<int> old_roof_drywell_ic_area_sqft, 
                    global::System.Nullable<int> new_roof_drywell_ic_area_sqft, 
                    global::System.Nullable<int> old_park_area_sqft, 
                    global::System.Nullable<int> new_park_area_sqft, 
                    global::System.Nullable<int> old_park_disco_ic_area_sqft, 
                    global::System.Nullable<int> new_park_disco_ic_area_sqft, 
                    global::System.Nullable<int> old_park_drywell_ic_area_sqft, 
                    global::System.Nullable<int> new_park_drywell_ic_area_sqft, 
                    global::System.Nullable<bool> updater_editor_value_changed, 
                    int Original_dsc_edit_id, 
                    int Original_edit_id, 
                    System.DateTime Original_edit_date, 
                    string Original_edited_by, 
                    string Original_rno, 
                    int Original_dsc_id, 
                    global::System.Nullable<int> Original_old_roof_area_sqft, 
                    global::System.Nullable<int> Original_new_roof_area_sqft, 
                    global::System.Nullable<int> Original_old_roof_disco_ic_area_sqft, 
                    global::System.Nullable<int> Original_new_roof_disco_ic_area_sqft, 
                    global::System.Nullable<int> Original_old_roof_drywell_ic_area_sqft, 
                    global::System.Nullable<int> Original_new_roof_drywell_ic_area_sqft, 
                    global::System.Nullable<int> Original_old_park_area_sqft, 
                    global::System.Nullable<int> Original_new_park_area_sqft, 
                    global::System.Nullable<int> Original_old_park_disco_ic_area_sqft, 
                    global::System.Nullable<int> Original_new_park_disco_ic_area_sqft, 
                    global::System.Nullable<int> Original_old_park_drywell_ic_area_sqft, 
                    global::System.Nullable<int> Original_new_park_drywell_ic_area_sqft, 
                    global::System.Nullable<bool> Original_updater_editor_value_changed, 
                    int dsc_edit_id) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(edit_id));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(edit_date));
            if ((edited_by == null)) {
                throw new global::System.ArgumentNullException("edited_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(edited_by));
            }
            if ((rno == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(rno));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(dsc_id));
            if ((old_roof_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(old_roof_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((new_roof_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(new_roof_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((old_roof_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(old_roof_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((new_roof_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(new_roof_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((old_roof_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(old_roof_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((new_roof_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(new_roof_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((old_park_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(old_park_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((new_park_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(new_park_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((old_park_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(old_park_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((new_park_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(new_park_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((old_park_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(old_park_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((new_park_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(new_park_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((updater_editor_value_changed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((bool)(updater_editor_value_changed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_dsc_edit_id));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_edit_id));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((System.DateTime)(Original_edit_date));
            if ((Original_edited_by == null)) {
                throw new global::System.ArgumentNullException("Original_edited_by");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_edited_by));
            }
            if ((Original_rno == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_rno));
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_dsc_id));
            if ((Original_old_roof_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_old_roof_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_new_roof_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(Original_new_roof_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_old_roof_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(Original_old_roof_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_new_roof_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_new_roof_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_old_roof_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(Original_old_roof_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((Original_new_roof_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(Original_new_roof_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((Original_old_park_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[38].Value = ((int)(Original_old_park_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            if ((Original_new_park_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[40].Value = ((int)(Original_new_park_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((Original_old_park_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[42].Value = ((int)(Original_old_park_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            if ((Original_new_park_disco_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[44].Value = ((int)(Original_new_park_disco_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((Original_old_park_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[46].Value = ((int)(Original_old_park_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((Original_new_park_drywell_ic_area_sqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[48].Value = ((int)(Original_new_park_drywell_ic_area_sqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            if ((Original_updater_editor_value_changed.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[50].Value = ((bool)(Original_updater_editor_value_changed.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[51].Value = ((int)(dsc_edit_id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int edit_id, 
                    System.DateTime edit_date, 
                    string edited_by, 
                    string rno, 
                    int dsc_id, 
                    global::System.Nullable<int> old_roof_area_sqft, 
                    global::System.Nullable<int> new_roof_area_sqft, 
                    global::System.Nullable<int> old_roof_disco_ic_area_sqft, 
                    global::System.Nullable<int> new_roof_disco_ic_area_sqft, 
                    global::System.Nullable<int> old_roof_drywell_ic_area_sqft, 
                    global::System.Nullable<int> new_roof_drywell_ic_area_sqft, 
                    global::System.Nullable<int> old_park_area_sqft, 
                    global::System.Nullable<int> new_park_area_sqft, 
                    global::System.Nullable<int> old_park_disco_ic_area_sqft, 
                    global::System.Nullable<int> new_park_disco_ic_area_sqft, 
                    global::System.Nullable<int> old_park_drywell_ic_area_sqft, 
                    global::System.Nullable<int> new_park_drywell_ic_area_sqft, 
                    global::System.Nullable<bool> updater_editor_value_changed, 
                    int Original_dsc_edit_id, 
                    int Original_edit_id, 
                    System.DateTime Original_edit_date, 
                    string Original_edited_by, 
                    string Original_rno, 
                    int Original_dsc_id, 
                    global::System.Nullable<int> Original_old_roof_area_sqft, 
                    global::System.Nullable<int> Original_new_roof_area_sqft, 
                    global::System.Nullable<int> Original_old_roof_disco_ic_area_sqft, 
                    global::System.Nullable<int> Original_new_roof_disco_ic_area_sqft, 
                    global::System.Nullable<int> Original_old_roof_drywell_ic_area_sqft, 
                    global::System.Nullable<int> Original_new_roof_drywell_ic_area_sqft, 
                    global::System.Nullable<int> Original_old_park_area_sqft, 
                    global::System.Nullable<int> Original_new_park_area_sqft, 
                    global::System.Nullable<int> Original_old_park_disco_ic_area_sqft, 
                    global::System.Nullable<int> Original_new_park_disco_ic_area_sqft, 
                    global::System.Nullable<int> Original_old_park_drywell_ic_area_sqft, 
                    global::System.Nullable<int> Original_new_park_drywell_ic_area_sqft, 
                    global::System.Nullable<bool> Original_updater_editor_value_changed) {
            return this.Update(edit_id, edit_date, edited_by, rno, dsc_id, old_roof_area_sqft, new_roof_area_sqft, old_roof_disco_ic_area_sqft, new_roof_disco_ic_area_sqft, old_roof_drywell_ic_area_sqft, new_roof_drywell_ic_area_sqft, old_park_area_sqft, new_park_area_sqft, old_park_disco_ic_area_sqft, new_park_disco_ic_area_sqft, old_park_drywell_ic_area_sqft, new_park_drywell_ic_area_sqft, updater_editor_value_changed, Original_dsc_edit_id, Original_edit_id, Original_edit_date, Original_edited_by, Original_rno, Original_dsc_id, Original_old_roof_area_sqft, Original_new_roof_area_sqft, Original_old_roof_disco_ic_area_sqft, Original_new_roof_disco_ic_area_sqft, Original_old_roof_drywell_ic_area_sqft, Original_new_roof_drywell_ic_area_sqft, Original_old_park_area_sqft, Original_new_park_area_sqft, Original_old_park_disco_ic_area_sqft, Original_new_park_disco_ic_area_sqft, Original_old_park_drywell_ic_area_sqft, Original_new_park_drywell_ic_area_sqft, Original_updater_editor_value_changed, Original_dsc_edit_id);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DscUpdaterTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DscUpdaterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DscUpdater";
            tableMapping.ColumnMappings.Add("RNO", "RNo");
            tableMapping.ColumnMappings.Add("New Roof Area", "NewRoofArea");
            tableMapping.ColumnMappings.Add("New Roof DISCO IC Area", "NewRoofDiscoArea");
            tableMapping.ColumnMappings.Add("New Roof Drywell IC Area", "NewRoofDrywellIcArea");
            tableMapping.ColumnMappings.Add("New Park Area", "NewParkArea");
            tableMapping.ColumnMappings.Add("New Park DISCO IC Area", "NewParkDiscoIcArea");
            tableMapping.ColumnMappings.Add("New Park Drywell IC Area", "NewParkDrywellIcArea");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `DscUpdater` WHERE (((? = 1 AND `RNO` IS NULL) OR (`RNO` = ?)) AND (`DSCID` = ?) AND ((? = 1 AND `New Roof Area` IS NULL) OR (`New Roof Area` = ?)) AND ((? = 1 AND `New Roof DISCO IC Area` IS NULL) OR (`New Roof DISCO IC Area` = ?)) AND ((? = 1 AND `New Roof Drywell IC Area` IS NULL) OR (`New Roof Drywell IC Area` = ?)) AND ((? = 1 AND `New Park Area` IS NULL) OR (`New Park Area` = ?)) AND ((? = 1 AND `New Park DISCO IC Area` IS NULL) OR (`New Park DISCO IC Area` = ?)) AND ((? = 1 AND `New Park Drywell IC Area` IS NULL) OR (`New Park Drywell IC Area` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RNO", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RNO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RNO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RNO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_New_Roof_Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_New_Roof_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_New_Roof_DISCO_IC_Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof DISCO IC Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_New_Roof_DISCO_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof DISCO IC Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_New_Roof_Drywell_IC_Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof Drywell IC Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_New_Roof_Drywell_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof Drywell IC Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_New_Park_Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_New_Park_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_New_Park_DISCO_IC_Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park DISCO IC Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_New_Park_DISCO_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park DISCO IC Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_New_Park_Drywell_IC_Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park Drywell IC Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_New_Park_Drywell_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park Drywell IC Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `DscUpdater` (`RNO`, `DSCID`, `New Roof Area`, `New Roof DISCO IC Are" +
                "a`, `New Roof Drywell IC Area`, `New Park Area`, `New Park DISCO IC Area`, `New " +
                "Park Drywell IC Area`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RNO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("New_Roof_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("New_Roof_DISCO_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof DISCO IC Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("New_Roof_Drywell_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof Drywell IC Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("New_Park_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("New_Park_DISCO_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park DISCO IC Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("New_Park_Drywell_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park Drywell IC Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `DscUpdater` SET `RNO` = ?, `DSCID` = ?, `New Roof Area` = ?, `New Roof DISCO IC Area` = ?, `New Roof Drywell IC Area` = ?, `New Park Area` = ?, `New Park DISCO IC Area` = ?, `New Park Drywell IC Area` = ? WHERE (((? = 1 AND `RNO` IS NULL) OR (`RNO` = ?)) AND (`DSCID` = ?) AND ((? = 1 AND `New Roof Area` IS NULL) OR (`New Roof Area` = ?)) AND ((? = 1 AND `New Roof DISCO IC Area` IS NULL) OR (`New Roof DISCO IC Area` = ?)) AND ((? = 1 AND `New Roof Drywell IC Area` IS NULL) OR (`New Roof Drywell IC Area` = ?)) AND ((? = 1 AND `New Park Area` IS NULL) OR (`New Park Area` = ?)) AND ((? = 1 AND `New Park DISCO IC Area` IS NULL) OR (`New Park DISCO IC Area` = ?)) AND ((? = 1 AND `New Park Drywell IC Area` IS NULL) OR (`New Park Drywell IC Area` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RNO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("New_Roof_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("New_Roof_DISCO_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof DISCO IC Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("New_Roof_Drywell_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof Drywell IC Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("New_Park_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("New_Park_DISCO_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park DISCO IC Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("New_Park_Drywell_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park Drywell IC Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RNO", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RNO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RNO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RNO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_New_Roof_Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_New_Roof_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_New_Roof_DISCO_IC_Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof DISCO IC Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_New_Roof_DISCO_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof DISCO IC Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_New_Roof_Drywell_IC_Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof Drywell IC Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_New_Roof_Drywell_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Roof Drywell IC Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_New_Park_Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_New_Park_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_New_Park_DISCO_IC_Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park DISCO IC Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_New_Park_DISCO_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park DISCO IC Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_New_Park_Drywell_IC_Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park Drywell IC Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_New_Park_Drywell_IC_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "New Park Drywell IC Area", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::DSCUpdater.Properties.Settings.Default.DscUpdateConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT RNO, DSCID, [New Roof Area], [New Roof DISCO IC Area], [New Roof Drywell I" +
                "C Area], [New Park Area], [New Park DISCO IC Area], [New Park Drywell IC Area] F" +
                "ROM UserUpdate.csv Where Not (DSCID is null)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectDataSet.DscUpdaterDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectDataSet.DscUpdaterDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectDataSet.DscUpdaterDataTable dataTable = new ProjectDataSet.DscUpdaterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet.DscUpdaterDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DscUpdater");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_RNO, int Original_DSCID, global::System.Nullable<double> Original_New_Roof_Area, global::System.Nullable<double> Original_New_Roof_DISCO_IC_Area, global::System.Nullable<double> Original_New_Roof_Drywell_IC_Area, global::System.Nullable<double> Original_New_Park_Area, global::System.Nullable<double> Original_New_Park_DISCO_IC_Area, global::System.Nullable<double> Original_New_Park_Drywell_IC_Area) {
            if ((Original_RNO == null)) {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_RNO));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_DSCID));
            if ((Original_New_Roof_Area.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_New_Roof_Area.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_New_Roof_DISCO_IC_Area.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_New_Roof_DISCO_IC_Area.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_New_Roof_Drywell_IC_Area.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((double)(Original_New_Roof_Drywell_IC_Area.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_New_Park_Area.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((double)(Original_New_Park_Area.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_New_Park_DISCO_IC_Area.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_New_Park_DISCO_IC_Area.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_New_Park_Drywell_IC_Area.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((double)(Original_New_Park_Drywell_IC_Area.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string RNO, int DSCID, global::System.Nullable<double> New_Roof_Area, global::System.Nullable<double> New_Roof_DISCO_IC_Area, global::System.Nullable<double> New_Roof_Drywell_IC_Area, global::System.Nullable<double> New_Park_Area, global::System.Nullable<double> New_Park_DISCO_IC_Area, global::System.Nullable<double> New_Park_Drywell_IC_Area) {
            if ((RNO == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(RNO));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(DSCID));
            if ((New_Roof_Area.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((double)(New_Roof_Area.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((New_Roof_DISCO_IC_Area.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((double)(New_Roof_DISCO_IC_Area.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((New_Roof_Drywell_IC_Area.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(New_Roof_Drywell_IC_Area.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((New_Park_Area.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(New_Park_Area.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((New_Park_DISCO_IC_Area.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(New_Park_DISCO_IC_Area.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((New_Park_Drywell_IC_Area.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(New_Park_Drywell_IC_Area.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string RNO, 
                    int DSCID, 
                    global::System.Nullable<double> New_Roof_Area, 
                    global::System.Nullable<double> New_Roof_DISCO_IC_Area, 
                    global::System.Nullable<double> New_Roof_Drywell_IC_Area, 
                    global::System.Nullable<double> New_Park_Area, 
                    global::System.Nullable<double> New_Park_DISCO_IC_Area, 
                    global::System.Nullable<double> New_Park_Drywell_IC_Area, 
                    string Original_RNO, 
                    int Original_DSCID, 
                    global::System.Nullable<double> Original_New_Roof_Area, 
                    global::System.Nullable<double> Original_New_Roof_DISCO_IC_Area, 
                    global::System.Nullable<double> Original_New_Roof_Drywell_IC_Area, 
                    global::System.Nullable<double> Original_New_Park_Area, 
                    global::System.Nullable<double> Original_New_Park_DISCO_IC_Area, 
                    global::System.Nullable<double> Original_New_Park_Drywell_IC_Area) {
            if ((RNO == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(RNO));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(DSCID));
            if ((New_Roof_Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(New_Roof_Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((New_Roof_DISCO_IC_Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(New_Roof_DISCO_IC_Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((New_Roof_Drywell_IC_Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(New_Roof_Drywell_IC_Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((New_Park_Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(New_Park_Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((New_Park_DISCO_IC_Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(New_Park_DISCO_IC_Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((New_Park_Drywell_IC_Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(New_Park_Drywell_IC_Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_RNO == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_RNO));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_DSCID));
            if ((Original_New_Roof_Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[12].Value = ((double)(Original_New_Roof_Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_New_Roof_DISCO_IC_Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((double)(Original_New_Roof_DISCO_IC_Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_New_Roof_Drywell_IC_Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(Original_New_Roof_Drywell_IC_Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_New_Park_Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((double)(Original_New_Park_Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_New_Park_DISCO_IC_Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(Original_New_Park_DISCO_IC_Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_New_Park_Drywell_IC_Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(Original_New_Park_Drywell_IC_Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MstDscTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MstDscTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MstDsc";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
            tableMapping.ColumnMappings.Add("ParcelID", "ParcelID");
            tableMapping.ColumnMappings.Add("DivideID", "DivideID");
            tableMapping.ColumnMappings.Add("DSCID", "DSCID");
            tableMapping.ColumnMappings.Add("discoSiteID", "discoSiteID");
            tableMapping.ColumnMappings.Add("DiscoClass", "DiscoClass");
            tableMapping.ColumnMappings.Add("ToMLinkSan", "ToMLinkSan");
            tableMapping.ColumnMappings.Add("ToMLinkStorm", "ToMLinkStorm");
            tableMapping.ColumnMappings.Add("PipeFlowTypeSan", "PipeFlowTypeSan");
            tableMapping.ColumnMappings.Add("PipeFlowTypeStorm", "PipeFlowTypeStorm");
            tableMapping.ColumnMappings.Add("SanSwrCrown", "SanSwrCrown");
            tableMapping.ColumnMappings.Add("Frac2SwrBeg", "Frac2SwrBeg");
            tableMapping.ColumnMappings.Add("FloodRefElev", "FloodRefElev");
            tableMapping.ColumnMappings.Add("FalseBFRisk", "FalseBFRisk");
            tableMapping.ColumnMappings.Add("RNO", "RNO");
            tableMapping.ColumnMappings.Add("OWNER1", "OWNER1");
            tableMapping.ColumnMappings.Add("OWNER2", "OWNER2");
            tableMapping.ColumnMappings.Add("OWNER3", "OWNER3");
            tableMapping.ColumnMappings.Add("OWNERADDR", "OWNERADDR");
            tableMapping.ColumnMappings.Add("OWNERCITY", "OWNERCITY");
            tableMapping.ColumnMappings.Add("OWNERSTATE", "OWNERSTATE");
            tableMapping.ColumnMappings.Add("OWNERZIP", "OWNERZIP");
            tableMapping.ColumnMappings.Add("SITEADDR", "SITEADDR");
            tableMapping.ColumnMappings.Add("SITECITY", "SITECITY");
            tableMapping.ColumnMappings.Add("SITE_STATE", "SITE_STATE");
            tableMapping.ColumnMappings.Add("SITEZIP", "SITEZIP");
            tableMapping.ColumnMappings.Add("FloodRefElev_2", "FloodRefElev_2");
            tableMapping.ColumnMappings.Add("isVacant", "isVacant");
            tableMapping.ColumnMappings.Add("ZoneEX", "ZoneEX");
            tableMapping.ColumnMappings.Add("ZoneCP", "ZoneCP");
            tableMapping.ColumnMappings.Add("GenEX", "GenEX");
            tableMapping.ColumnMappings.Add("GenCP", "GenCP");
            tableMapping.ColumnMappings.Add("PZsqft", "PZsqft");
            tableMapping.ColumnMappings.Add("ImpFractEX", "ImpFractEX");
            tableMapping.ColumnMappings.Add("ImpFractCP", "ImpFractCP");
            tableMapping.ColumnMappings.Add("ImpFractFB", "ImpFractFB");
            tableMapping.ColumnMappings.Add("AreaFt", "AreaFt");
            tableMapping.ColumnMappings.Add("RfAreaFtEX", "RfAreaFtEX");
            tableMapping.ColumnMappings.Add("surveyedRfAreaSqFt", "surveyedRfAreaSqFt");
            tableMapping.ColumnMappings.Add("RfAreaFtFB", "RfAreaFtFB");
            tableMapping.ColumnMappings.Add("roofAreaNeedsUpdate", "roofAreaNeedsUpdate");
            tableMapping.ColumnMappings.Add("PkAreaFtEX", "PkAreaFtEX");
            tableMapping.ColumnMappings.Add("PkAreaFtFB", "PkAreaFtFB");
            tableMapping.ColumnMappings.Add("parkAreaNeedsUpdate", "parkAreaNeedsUpdate");
            tableMapping.ColumnMappings.Add("BaseflowEXcfs", "BaseflowEXcfs");
            tableMapping.ColumnMappings.Add("BaseflowFBcfs", "BaseflowFBcfs");
            tableMapping.ColumnMappings.Add("BaseflowDMcfs", "BaseflowDMcfs");
            tableMapping.ColumnMappings.Add("GrowthState", "GrowthState");
            tableMapping.ColumnMappings.Add("IncIA4FB", "IncIA4FB");
            tableMapping.ColumnMappings.Add("gisBasin", "gisBasin");
            tableMapping.ColumnMappings.Add("ICFtRoofEX", "ICFtRoofEX");
            tableMapping.ColumnMappings.Add("ICFtRoofFB", "ICFtRoofFB");
            tableMapping.ColumnMappings.Add("ICFtParkEX", "ICFtParkEX");
            tableMapping.ColumnMappings.Add("ICFtParkFB", "ICFtParkFB");
            tableMapping.ColumnMappings.Add("Sewerable", "Sewerable");
            tableMapping.ColumnMappings.Add("SourceQuality", "SourceQuality");
            tableMapping.ColumnMappings.Add("Septic", "Septic");
            tableMapping.ColumnMappings.Add("HasBasement", "HasBasement");
            tableMapping.ColumnMappings.Add("surveyedPkAreaSqFt", "surveyedPkAreaSqFt");
            tableMapping.ColumnMappings.Add("EICFtRoofEX", "EICFtRoofEX1");
            tableMapping.ColumnMappings.Add("EICFtParkEX", "EICFtParkEX1");
            tableMapping.ColumnMappings.Add("EICFtRoofFB", "EICFtRoofFB1");
            tableMapping.ColumnMappings.Add("EICFtParkFB", "EICFtParkFB1");
            tableMapping.ColumnMappings.Add("Shape_Length", "Shape_Length");
            tableMapping.ColumnMappings.Add("Shape_Area", "Shape_Area");
            tableMapping.ColumnMappings.Add("Pzone", "Pzone");
            tableMapping.ColumnMappings.Add("PROPERTYID", "PROPERTYID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM `mst_dsc_ac` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `ParcelID` IS " +
                "NULL) OR (`ParcelID` = ?)) AND ((? = 1 AND `DivideID` IS NULL) OR (`DivideID` = " +
                "?)) AND ((? = 1 AND `DSCID` IS NULL) OR (`DSCID` = ?)) AND ((? = 1 AND `discoSit" +
                "eID` IS NULL) OR (`discoSiteID` = ?)) AND ((? = 1 AND `DiscoClass` IS NULL) OR (" +
                "`DiscoClass` = ?)) AND ((? = 1 AND `ToMLinkSan` IS NULL) OR (`ToMLinkSan` = ?)) " +
                "AND ((? = 1 AND `ToMLinkStorm` IS NULL) OR (`ToMLinkStorm` = ?)) AND ((? = 1 AND" +
                " `PipeFlowTypeSan` IS NULL) OR (`PipeFlowTypeSan` = ?)) AND ((? = 1 AND `PipeFlo" +
                "wTypeStorm` IS NULL) OR (`PipeFlowTypeStorm` = ?)) AND ((? = 1 AND `SanSwrCrown`" +
                " IS NULL) OR (`SanSwrCrown` = ?)) AND ((? = 1 AND `Frac2SwrBeg` IS NULL) OR (`Fr" +
                "ac2SwrBeg` = ?)) AND ((? = 1 AND `FloodRefElev` IS NULL) OR (`FloodRefElev` = ?)" +
                ") AND ((? = 1 AND `FalseBFRisk` IS NULL) OR (`FalseBFRisk` = ?)) AND ((? = 1 AND" +
                " `RNO` IS NULL) OR (`RNO` = ?)) AND ((? = 1 AND `OWNER1` IS NULL) OR (`OWNER1` =" +
                " ?)) AND ((? = 1 AND `OWNER2` IS NULL) OR (`OWNER2` = ?)) AND ((? = 1 AND `OWNER" +
                "3` IS NULL) OR (`OWNER3` = ?)) AND ((? = 1 AND `OWNERADDR` IS NULL) OR (`OWNERAD" +
                "DR` = ?)) AND ((? = 1 AND `OWNERCITY` IS NULL) OR (`OWNERCITY` = ?)) AND ((? = 1" +
                " AND `OWNERSTATE` IS NULL) OR (`OWNERSTATE` = ?)) AND ((? = 1 AND `OWNERZIP` IS " +
                "NULL) OR (`OWNERZIP` = ?)) AND ((? = 1 AND `SITEADDR` IS NULL) OR (`SITEADDR` = " +
                "?)) AND ((? = 1 AND `SITECITY` IS NULL) OR (`SITECITY` = ?)) AND ((? = 1 AND `SI" +
                "TE_STATE` IS NULL) OR (`SITE_STATE` = ?)) AND ((? = 1 AND `SITEZIP` IS NULL) OR " +
                "(`SITEZIP` = ?)) AND ((? = 1 AND `FloodRefElev_2` IS NULL) OR (`FloodRefElev_2` " +
                "= ?)) AND ((? = 1 AND `isVacant` IS NULL) OR (`isVacant` = ?)) AND ((? = 1 AND `" +
                "ZoneEX` IS NULL) OR (`ZoneEX` = ?)) AND ((? = 1 AND `ZoneCP` IS NULL) OR (`ZoneC" +
                "P` = ?)) AND ((? = 1 AND `GenEX` IS NULL) OR (`GenEX` = ?)) AND ((? = 1 AND `Gen" +
                "CP` IS NULL) OR (`GenCP` = ?)) AND ((? = 1 AND `PZsqft` IS NULL) OR (`PZsqft` = " +
                "?)) AND ((? = 1 AND `ImpFractEX` IS NULL) OR (`ImpFractEX` = ?)) AND ((? = 1 AND" +
                " `ImpFractCP` IS NULL) OR (`ImpFractCP` = ?)) AND ((? = 1 AND `ImpFractFB` IS NU" +
                "LL) OR (`ImpFractFB` = ?)) AND ((? = 1 AND `AreaFt` IS NULL) OR (`AreaFt` = ?)) " +
                "AND ((? = 1 AND `RfAreaFtEX` IS NULL) OR (`RfAreaFtEX` = ?)) AND ((? = 1 AND `su" +
                "rveyedRfAreaSqFt` IS NULL) OR (`surveyedRfAreaSqFt` = ?)) AND ((? = 1 AND `roofA" +
                "reaNeedsUpdate` IS NULL) OR (`roofAreaNeedsUpdate` = ?)) AND ((? = 1 AND `RfArea" +
                "FtFB` IS NULL) OR (`RfAreaFtFB` = ?)) AND ((? = 1 AND `PkAreaFtEX` IS NULL) OR (" +
                "`PkAreaFtEX` = ?)) AND ((? = 1 AND `surveyedPkAreaSqFt` IS NULL) OR (`surveyedPk" +
                "AreaSqFt` = ?)) AND ((? = 1 AND `parkAreaNeedsUpdate` IS NULL) OR (`parkAreaNeed" +
                "sUpdate` = ?)) AND ((? = 1 AND `PkAreaFtFB` IS NULL) OR (`PkAreaFtFB` = ?)) AND " +
                "((? = 1 AND `BaseflowEXcfs` IS NULL) OR (`BaseflowEXcfs` = ?)) AND ((? = 1 AND `" +
                "BaseflowFBcfs` IS NULL) OR (`BaseflowFBcfs` = ?)) AND ((? = 1 AND `BaseflowDMcfs" +
                "` IS NULL) OR (`BaseflowDMcfs` = ?)) AND ((? = 1 AND `GrowthState` IS NULL) OR (" +
                "`GrowthState` = ?)) AND ((? = 1 AND `IncIA4FB` IS NULL) OR (`IncIA4FB` = ?)) AND" +
                " ((? = 1 AND `gisBasin` IS NULL) OR (`gisBasin` = ?)) AND ((? = 1 AND `ICFtRoofE" +
                "X` IS NULL) OR (`ICFtRoofEX` = ?)) AND ((? = 1 AND `ICFtRoofFB` IS NULL) OR (`IC" +
                "FtRoofFB` = ?)) AND ((? = 1 AND `ICFtParkEX` IS NULL) OR (`ICFtParkEX` = ?)) AND" +
                " ((? = 1 AND `ICFtParkFB` IS NULL) OR (`ICFtParkFB` = ?)) AND ((? = 1 AND `EICFt" +
                "RoofEX` IS NULL) OR (`EICFtRoofEX` = ?)) AND ((? = 1 AND `EICFtParkEX` IS NULL) " +
                "OR (`EICFtParkEX` = ?)) AND ((? = 1 AND `EICFtRoofFB` IS NULL) OR (`EICFtRoofFB`" +
                " = ?)) AND ((? = 1 AND `EICFtParkFB` IS NULL) OR (`EICFtParkFB` = ?)) AND ((? = " +
                "1 AND `Sewerable` IS NULL) OR (`Sewerable` = ?)) AND ((? = 1 AND `Shape_Length` " +
                "IS NULL) OR (`Shape_Length` = ?)) AND ((? = 1 AND `Shape_Area` IS NULL) OR (`Sha" +
                "pe_Area` = ?)) AND ((? = 1 AND `SourceQuality` IS NULL) OR (`SourceQuality` = ?)" +
                ") AND ((? = 1 AND `Septic` IS NULL) OR (`Septic` = ?)) AND ((? = 1 AND `Pzone` I" +
                "S NULL) OR (`Pzone` = ?)) AND ((? = 1 AND `HasBasement` IS NULL) OR (`HasBasemen" +
                "t` = ?)) AND ((? = 1 AND `PROPERTYID` IS NULL) OR (`PROPERTYID` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DiscoClass", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DiscoClass", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToMLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToMLinkSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToMLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToMLinkSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToMLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToMLinkStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToMLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToMLinkStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SanSwrCrown", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SanSwrCrown", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FloodRefElev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FloodRefElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FalseBFRisk", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FalseBFRisk", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RNO", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RNO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RNO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RNO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OWNER1", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER1", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OWNER1", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER1", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OWNER2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OWNER2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OWNER3", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER3", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OWNER3", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER3", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OWNERADDR", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERADDR", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OWNERADDR", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERADDR", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OWNERCITY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERCITY", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OWNERCITY", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERCITY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OWNERSTATE", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERSTATE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OWNERSTATE", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERSTATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OWNERZIP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERZIP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OWNERZIP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERZIP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SITEADDR", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITEADDR", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SITEADDR", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITEADDR", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SITECITY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITECITY", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SITECITY", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITECITY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SITE_STATE", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITE_STATE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SITE_STATE", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITE_STATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SITEZIP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITEZIP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SITEZIP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITEZIP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FloodRefElev_2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev_2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FloodRefElev_2", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev_2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_isVacant", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "isVacant", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_isVacant", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "isVacant", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ZoneEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ZoneEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ZoneCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ZoneCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GenEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GenEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GenCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GenCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PZsqft", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PZsqft", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PZsqft", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PZsqft", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractCP", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractFB", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RfAreaFtEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFtEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RfAreaFtEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFtEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_surveyedRfAreaSqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surveyedRfAreaSqFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_surveyedRfAreaSqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surveyedRfAreaSqFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_roofAreaNeedsUpdate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "roofAreaNeedsUpdate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_roofAreaNeedsUpdate", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "roofAreaNeedsUpdate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RfAreaFtFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFtFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RfAreaFtFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFtFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PkAreaFtEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFtEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PkAreaFtEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFtEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_surveyedPkAreaSqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surveyedPkAreaSqFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_surveyedPkAreaSqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surveyedPkAreaSqFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_parkAreaNeedsUpdate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkAreaNeedsUpdate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_parkAreaNeedsUpdate", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkAreaNeedsUpdate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PkAreaFtFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFtFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PkAreaFtFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFtFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseflowEXcfs", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowEXcfs", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseflowEXcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowEXcfs", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseflowFBcfs", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowFBcfs", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseflowFBcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowFBcfs", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseflowDMcfs", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowDMcfs", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseflowDMcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowDMcfs", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GrowthState", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GrowthState", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GrowthState", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GrowthState", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IncIA4FB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IncIA4FB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IncIA4FB", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IncIA4FB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_gisBasin", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "gisBasin", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_gisBasin", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "gisBasin", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtRoofEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoofEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtRoofEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoofEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtRoofFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoofFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtRoofFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoofFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtParkEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParkEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtParkEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParkEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtParkFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParkFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtParkFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParkFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EICFtRoofEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtRoofEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EICFtRoofEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtRoofEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EICFtParkEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtParkEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EICFtParkEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtParkEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EICFtRoofFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtRoofFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EICFtRoofFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtRoofFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EICFtParkFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtParkFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EICFtParkFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtParkFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Shape_Length", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Shape_Length", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Shape_Length", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Shape_Length", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Shape_Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Shape_Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Shape_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Shape_Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SourceQuality", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SourceQuality", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SourceQuality", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SourceQuality", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Septic", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Septic", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Septic", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Septic", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Pzone", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Pzone", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Pzone", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Pzone", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HasBasement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasBasement", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HasBasement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasBasement", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PROPERTYID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PROPERTYID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PROPERTYID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PROPERTYID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO `mst_dsc_ac` (`ParcelID`, `DivideID`, `DSCID`, `discoSiteID`, `DiscoClass`, `ToMLinkSan`, `ToMLinkStorm`, `PipeFlowTypeSan`, `PipeFlowTypeStorm`, `SanSwrCrown`, `Frac2SwrBeg`, `FloodRefElev`, `FalseBFRisk`, `RNO`, `OWNER1`, `OWNER2`, `OWNER3`, `OWNERADDR`, `OWNERCITY`, `OWNERSTATE`, `OWNERZIP`, `SITEADDR`, `SITECITY`, `SITE_STATE`, `SITEZIP`, `FloodRefElev_2`, `isVacant`, `ZoneEX`, `ZoneCP`, `GenEX`, `GenCP`, `PZsqft`, `ImpFractEX`, `ImpFractCP`, `ImpFractFB`, `AreaFt`, `RfAreaFtEX`, `surveyedRfAreaSqFt`, `roofAreaNeedsUpdate`, `RfAreaFtFB`, `PkAreaFtEX`, `surveyedPkAreaSqFt`, `parkAreaNeedsUpdate`, `PkAreaFtFB`, `BaseflowEXcfs`, `BaseflowFBcfs`, `BaseflowDMcfs`, `GrowthState`, `IncIA4FB`, `gisBasin`, `ICFtRoofEX`, `ICFtRoofFB`, `ICFtParkEX`, `ICFtParkFB`, `EICFtRoofEX`, `EICFtParkEX`, `EICFtRoofFB`, `EICFtParkFB`, `Sewerable`, `Shape_Length`, `Shape_Area`, `SourceQuality`, `Septic`, `Pzone`, `HasBasement`, `PROPERTYID`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DiscoClass", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToMLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToMLinkSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToMLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToMLinkStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SanSwrCrown", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FloodRefElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FalseBFRisk", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RNO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OWNER1", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER1", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OWNER2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OWNER3", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER3", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OWNERADDR", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERADDR", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OWNERCITY", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERCITY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OWNERSTATE", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERSTATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OWNERZIP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERZIP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SITEADDR", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITEADDR", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SITECITY", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITECITY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SITE_STATE", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITE_STATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SITEZIP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITEZIP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FloodRefElev_2", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev_2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("isVacant", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "isVacant", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ZoneEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ZoneCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GenEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GenCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PZsqft", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PZsqft", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractCP", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractFB", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RfAreaFtEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFtEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("surveyedRfAreaSqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surveyedRfAreaSqFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("roofAreaNeedsUpdate", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "roofAreaNeedsUpdate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RfAreaFtFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFtFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PkAreaFtEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFtEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("surveyedPkAreaSqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surveyedPkAreaSqFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("parkAreaNeedsUpdate", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkAreaNeedsUpdate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PkAreaFtFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFtFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseflowEXcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowEXcfs", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseflowFBcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowFBcfs", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseflowDMcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowDMcfs", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GrowthState", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GrowthState", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IncIA4FB", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IncIA4FB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("gisBasin", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "gisBasin", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtRoofEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoofEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtRoofFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoofFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtParkEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParkEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtParkFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParkFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EICFtRoofEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtRoofEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EICFtParkEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtParkEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EICFtRoofFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtRoofFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EICFtParkFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtParkFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Shape_Length", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Shape_Length", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Shape_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Shape_Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SourceQuality", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SourceQuality", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Septic", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Septic", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Pzone", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Pzone", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HasBasement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasBasement", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PROPERTYID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PROPERTYID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE `mst_dsc_ac` SET `ParcelID` = ?, `DivideID` = ?, `DSCID` = ?, `discoSiteID" +
                "` = ?, `DiscoClass` = ?, `ToMLinkSan` = ?, `ToMLinkStorm` = ?, `PipeFlowTypeSan`" +
                " = ?, `PipeFlowTypeStorm` = ?, `SanSwrCrown` = ?, `Frac2SwrBeg` = ?, `FloodRefEl" +
                "ev` = ?, `FalseBFRisk` = ?, `RNO` = ?, `OWNER1` = ?, `OWNER2` = ?, `OWNER3` = ?," +
                " `OWNERADDR` = ?, `OWNERCITY` = ?, `OWNERSTATE` = ?, `OWNERZIP` = ?, `SITEADDR` " +
                "= ?, `SITECITY` = ?, `SITE_STATE` = ?, `SITEZIP` = ?, `FloodRefElev_2` = ?, `isV" +
                "acant` = ?, `ZoneEX` = ?, `ZoneCP` = ?, `GenEX` = ?, `GenCP` = ?, `PZsqft` = ?, " +
                "`ImpFractEX` = ?, `ImpFractCP` = ?, `ImpFractFB` = ?, `AreaFt` = ?, `RfAreaFtEX`" +
                " = ?, `surveyedRfAreaSqFt` = ?, `roofAreaNeedsUpdate` = ?, `RfAreaFtFB` = ?, `Pk" +
                "AreaFtEX` = ?, `surveyedPkAreaSqFt` = ?, `parkAreaNeedsUpdate` = ?, `PkAreaFtFB`" +
                " = ?, `BaseflowEXcfs` = ?, `BaseflowFBcfs` = ?, `BaseflowDMcfs` = ?, `GrowthStat" +
                "e` = ?, `IncIA4FB` = ?, `gisBasin` = ?, `ICFtRoofEX` = ?, `ICFtRoofFB` = ?, `ICF" +
                "tParkEX` = ?, `ICFtParkFB` = ?, `EICFtRoofEX` = ?, `EICFtParkEX` = ?, `EICFtRoof" +
                "FB` = ?, `EICFtParkFB` = ?, `Sewerable` = ?, `Shape_Length` = ?, `Shape_Area` = " +
                "?, `SourceQuality` = ?, `Septic` = ?, `Pzone` = ?, `HasBasement` = ?, `PROPERTYI" +
                "D` = ? WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `ParcelID` IS NULL) OR (`Parcel" +
                "ID` = ?)) AND ((? = 1 AND `DivideID` IS NULL) OR (`DivideID` = ?)) AND ((? = 1 A" +
                "ND `DSCID` IS NULL) OR (`DSCID` = ?)) AND ((? = 1 AND `discoSiteID` IS NULL) OR " +
                "(`discoSiteID` = ?)) AND ((? = 1 AND `DiscoClass` IS NULL) OR (`DiscoClass` = ?)" +
                ") AND ((? = 1 AND `ToMLinkSan` IS NULL) OR (`ToMLinkSan` = ?)) AND ((? = 1 AND `" +
                "ToMLinkStorm` IS NULL) OR (`ToMLinkStorm` = ?)) AND ((? = 1 AND `PipeFlowTypeSan" +
                "` IS NULL) OR (`PipeFlowTypeSan` = ?)) AND ((? = 1 AND `PipeFlowTypeStorm` IS NU" +
                "LL) OR (`PipeFlowTypeStorm` = ?)) AND ((? = 1 AND `SanSwrCrown` IS NULL) OR (`Sa" +
                "nSwrCrown` = ?)) AND ((? = 1 AND `Frac2SwrBeg` IS NULL) OR (`Frac2SwrBeg` = ?)) " +
                "AND ((? = 1 AND `FloodRefElev` IS NULL) OR (`FloodRefElev` = ?)) AND ((? = 1 AND" +
                " `FalseBFRisk` IS NULL) OR (`FalseBFRisk` = ?)) AND ((? = 1 AND `RNO` IS NULL) O" +
                "R (`RNO` = ?)) AND ((? = 1 AND `OWNER1` IS NULL) OR (`OWNER1` = ?)) AND ((? = 1 " +
                "AND `OWNER2` IS NULL) OR (`OWNER2` = ?)) AND ((? = 1 AND `OWNER3` IS NULL) OR (`" +
                "OWNER3` = ?)) AND ((? = 1 AND `OWNERADDR` IS NULL) OR (`OWNERADDR` = ?)) AND ((?" +
                " = 1 AND `OWNERCITY` IS NULL) OR (`OWNERCITY` = ?)) AND ((? = 1 AND `OWNERSTATE`" +
                " IS NULL) OR (`OWNERSTATE` = ?)) AND ((? = 1 AND `OWNERZIP` IS NULL) OR (`OWNERZ" +
                "IP` = ?)) AND ((? = 1 AND `SITEADDR` IS NULL) OR (`SITEADDR` = ?)) AND ((? = 1 A" +
                "ND `SITECITY` IS NULL) OR (`SITECITY` = ?)) AND ((? = 1 AND `SITE_STATE` IS NULL" +
                ") OR (`SITE_STATE` = ?)) AND ((? = 1 AND `SITEZIP` IS NULL) OR (`SITEZIP` = ?)) " +
                "AND ((? = 1 AND `FloodRefElev_2` IS NULL) OR (`FloodRefElev_2` = ?)) AND ((? = 1" +
                " AND `isVacant` IS NULL) OR (`isVacant` = ?)) AND ((? = 1 AND `ZoneEX` IS NULL) " +
                "OR (`ZoneEX` = ?)) AND ((? = 1 AND `ZoneCP` IS NULL) OR (`ZoneCP` = ?)) AND ((? " +
                "= 1 AND `GenEX` IS NULL) OR (`GenEX` = ?)) AND ((? = 1 AND `GenCP` IS NULL) OR (" +
                "`GenCP` = ?)) AND ((? = 1 AND `PZsqft` IS NULL) OR (`PZsqft` = ?)) AND ((? = 1 A" +
                "ND `ImpFractEX` IS NULL) OR (`ImpFractEX` = ?)) AND ((? = 1 AND `ImpFractCP` IS " +
                "NULL) OR (`ImpFractCP` = ?)) AND ((? = 1 AND `ImpFractFB` IS NULL) OR (`ImpFract" +
                "FB` = ?)) AND ((? = 1 AND `AreaFt` IS NULL) OR (`AreaFt` = ?)) AND ((? = 1 AND `" +
                "RfAreaFtEX` IS NULL) OR (`RfAreaFtEX` = ?)) AND ((? = 1 AND `surveyedRfAreaSqFt`" +
                " IS NULL) OR (`surveyedRfAreaSqFt` = ?)) AND ((? = 1 AND `roofAreaNeedsUpdate` I" +
                "S NULL) OR (`roofAreaNeedsUpdate` = ?)) AND ((? = 1 AND `RfAreaFtFB` IS NULL) OR" +
                " (`RfAreaFtFB` = ?)) AND ((? = 1 AND `PkAreaFtEX` IS NULL) OR (`PkAreaFtEX` = ?)" +
                ") AND ((? = 1 AND `surveyedPkAreaSqFt` IS NULL) OR (`surveyedPkAreaSqFt` = ?)) A" +
                "ND ((? = 1 AND `parkAreaNeedsUpdate` IS NULL) OR (`parkAreaNeedsUpdate` = ?)) AN" +
                "D ((? = 1 AND `PkAreaFtFB` IS NULL) OR (`PkAreaFtFB` = ?)) AND ((? = 1 AND `Base" +
                "flowEXcfs` IS NULL) OR (`BaseflowEXcfs` = ?)) AND ((? = 1 AND `BaseflowFBcfs` IS" +
                " NULL) OR (`BaseflowFBcfs` = ?)) AND ((? = 1 AND `BaseflowDMcfs` IS NULL) OR (`B" +
                "aseflowDMcfs` = ?)) AND ((? = 1 AND `GrowthState` IS NULL) OR (`GrowthState` = ?" +
                ")) AND ((? = 1 AND `IncIA4FB` IS NULL) OR (`IncIA4FB` = ?)) AND ((? = 1 AND `gis" +
                "Basin` IS NULL) OR (`gisBasin` = ?)) AND ((? = 1 AND `ICFtRoofEX` IS NULL) OR (`" +
                "ICFtRoofEX` = ?)) AND ((? = 1 AND `ICFtRoofFB` IS NULL) OR (`ICFtRoofFB` = ?)) A" +
                "ND ((? = 1 AND `ICFtParkEX` IS NULL) OR (`ICFtParkEX` = ?)) AND ((? = 1 AND `ICF" +
                "tParkFB` IS NULL) OR (`ICFtParkFB` = ?)) AND ((? = 1 AND `EICFtRoofEX` IS NULL) " +
                "OR (`EICFtRoofEX` = ?)) AND ((? = 1 AND `EICFtParkEX` IS NULL) OR (`EICFtParkEX`" +
                " = ?)) AND ((? = 1 AND `EICFtRoofFB` IS NULL) OR (`EICFtRoofFB` = ?)) AND ((? = " +
                "1 AND `EICFtParkFB` IS NULL) OR (`EICFtParkFB` = ?)) AND ((? = 1 AND `Sewerable`" +
                " IS NULL) OR (`Sewerable` = ?)) AND ((? = 1 AND `Shape_Length` IS NULL) OR (`Sha" +
                "pe_Length` = ?)) AND ((? = 1 AND `Shape_Area` IS NULL) OR (`Shape_Area` = ?)) AN" +
                "D ((? = 1 AND `SourceQuality` IS NULL) OR (`SourceQuality` = ?)) AND ((? = 1 AND" +
                " `Septic` IS NULL) OR (`Septic` = ?)) AND ((? = 1 AND `Pzone` IS NULL) OR (`Pzon" +
                "e` = ?)) AND ((? = 1 AND `HasBasement` IS NULL) OR (`HasBasement` = ?)) AND ((? " +
                "= 1 AND `PROPERTYID` IS NULL) OR (`PROPERTYID` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DiscoClass", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToMLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToMLinkSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ToMLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToMLinkStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SanSwrCrown", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FloodRefElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FalseBFRisk", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RNO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RNO", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OWNER1", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER1", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OWNER2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OWNER3", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER3", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OWNERADDR", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERADDR", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OWNERCITY", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERCITY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OWNERSTATE", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERSTATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("OWNERZIP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERZIP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SITEADDR", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITEADDR", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SITECITY", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITECITY", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SITE_STATE", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITE_STATE", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SITEZIP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITEZIP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("FloodRefElev_2", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev_2", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("isVacant", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "isVacant", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ZoneEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ZoneCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GenEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GenCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PZsqft", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PZsqft", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractCP", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ImpFractFB", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RfAreaFtEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFtEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("surveyedRfAreaSqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surveyedRfAreaSqFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("roofAreaNeedsUpdate", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "roofAreaNeedsUpdate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RfAreaFtFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFtFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PkAreaFtEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFtEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("surveyedPkAreaSqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surveyedPkAreaSqFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("parkAreaNeedsUpdate", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkAreaNeedsUpdate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PkAreaFtFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFtFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseflowEXcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowEXcfs", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseflowFBcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowFBcfs", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("BaseflowDMcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowDMcfs", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("GrowthState", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GrowthState", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IncIA4FB", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IncIA4FB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("gisBasin", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "gisBasin", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtRoofEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoofEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtRoofFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoofFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtParkEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParkEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ICFtParkFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParkFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EICFtRoofEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtRoofEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EICFtParkEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtParkEX", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EICFtRoofFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtRoofFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("EICFtParkFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtParkFB", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Shape_Length", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Shape_Length", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Shape_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Shape_Area", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SourceQuality", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SourceQuality", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Septic", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Septic", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Pzone", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Pzone", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("HasBasement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasBasement", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("PROPERTYID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PROPERTYID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DSCID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DSCID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_discoSiteID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "discoSiteID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DiscoClass", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DiscoClass", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DiscoClass", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToMLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToMLinkSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToMLinkSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToMLinkSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ToMLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToMLinkStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ToMLinkStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ToMLinkStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeFlowTypeSan", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeSan", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PipeFlowTypeStorm", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PipeFlowTypeStorm", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SanSwrCrown", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SanSwrCrown", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SanSwrCrown", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Frac2SwrBeg", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Frac2SwrBeg", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FloodRefElev", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FloodRefElev", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FalseBFRisk", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FalseBFRisk", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FalseBFRisk", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RNO", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RNO", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RNO", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RNO", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OWNER1", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER1", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OWNER1", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER1", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OWNER2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OWNER2", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OWNER3", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER3", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OWNER3", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNER3", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OWNERADDR", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERADDR", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OWNERADDR", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERADDR", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OWNERCITY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERCITY", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OWNERCITY", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERCITY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OWNERSTATE", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERSTATE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OWNERSTATE", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERSTATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_OWNERZIP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERZIP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_OWNERZIP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "OWNERZIP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SITEADDR", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITEADDR", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SITEADDR", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITEADDR", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SITECITY", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITECITY", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SITECITY", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITECITY", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SITE_STATE", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITE_STATE", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SITE_STATE", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITE_STATE", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SITEZIP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITEZIP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SITEZIP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SITEZIP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_FloodRefElev_2", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev_2", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_FloodRefElev_2", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FloodRefElev_2", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_isVacant", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "isVacant", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_isVacant", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "isVacant", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ZoneEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ZoneEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ZoneCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ZoneCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ZoneCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GenEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GenEX", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GenCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GenCP", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GenCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PZsqft", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PZsqft", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PZsqft", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PZsqft", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractEX", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractCP", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractCP", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractCP", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ImpFractFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ImpFractFB", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ImpFractFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AreaFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AreaFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RfAreaFtEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFtEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RfAreaFtEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFtEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_surveyedRfAreaSqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surveyedRfAreaSqFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_surveyedRfAreaSqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surveyedRfAreaSqFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_roofAreaNeedsUpdate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "roofAreaNeedsUpdate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_roofAreaNeedsUpdate", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "roofAreaNeedsUpdate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RfAreaFtFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFtFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RfAreaFtFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RfAreaFtFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PkAreaFtEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFtEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PkAreaFtEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFtEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_surveyedPkAreaSqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surveyedPkAreaSqFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_surveyedPkAreaSqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "surveyedPkAreaSqFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_parkAreaNeedsUpdate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkAreaNeedsUpdate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_parkAreaNeedsUpdate", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "parkAreaNeedsUpdate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PkAreaFtFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFtFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PkAreaFtFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PkAreaFtFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseflowEXcfs", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowEXcfs", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseflowEXcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowEXcfs", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseflowFBcfs", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowFBcfs", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseflowFBcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowFBcfs", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_BaseflowDMcfs", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowDMcfs", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_BaseflowDMcfs", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "BaseflowDMcfs", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_GrowthState", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GrowthState", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_GrowthState", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "GrowthState", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_IncIA4FB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IncIA4FB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_IncIA4FB", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "IncIA4FB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_gisBasin", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "gisBasin", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_gisBasin", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "gisBasin", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtRoofEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoofEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtRoofEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoofEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtRoofFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoofFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtRoofFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtRoofFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtParkEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParkEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtParkEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParkEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ICFtParkFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParkFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ICFtParkFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ICFtParkFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EICFtRoofEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtRoofEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EICFtRoofEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtRoofEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EICFtParkEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtParkEX", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EICFtParkEX", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtParkEX", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EICFtRoofFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtRoofFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EICFtRoofFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtRoofFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_EICFtParkFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtParkFB", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_EICFtParkFB", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "EICFtParkFB", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Sewerable", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Sewerable", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Shape_Length", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Shape_Length", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Shape_Length", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Shape_Length", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Shape_Area", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Shape_Area", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Shape_Area", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Shape_Area", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SourceQuality", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SourceQuality", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SourceQuality", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SourceQuality", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Septic", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Septic", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Septic", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Septic", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Pzone", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Pzone", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Pzone", global::System.Data.OleDb.OleDbType.Boolean, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Pzone", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_HasBasement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasBasement", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_HasBasement", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "HasBasement", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_PROPERTYID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PROPERTYID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_PROPERTYID", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PROPERTYID", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::DSCUpdater.Properties.Settings.Default.MasterDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     MAPINFO_ID, ParcelID, DivideID, DSCID, discoSiteID, DiscoClass, ToMLinkSan, ToMLinkStorm, PipeFlowTypeSan, PipeFlowTypeStorm, SanSwrCrown, 
                      Frac2SwrBeg, FloodRefElev, FalseBFRisk, RNO, OWNER1, OWNER2, OWNER3, OWNERADDR, OWNERCITY, OWNERSTATE, OWNERZIP, SITEADDR, 
                      SITECITY, SITE_STATE, SITEZIP, FloodRefElev_2, isVacant, ZoneEX, ZoneCP, GenEX, GenCP, PZsqft, ImpFractEX, ImpFractCP, ImpFractFB, AreaFt, 
                      RfAreaFtEX, surveyedRfAreaSqFt, roofAreaNeedsUpdate, RfAreaFtFB, PkAreaFtEX, surveyedPkAreaSqFt, parkAreaNeedsUpdate, PkAreaFtFB, 
                      BaseflowEXcfs, BaseflowFBcfs, BaseflowDMcfs, GrowthState, IncIA4FB, gisBasin, ICFtRoofEX, ICFtRoofFB, ICFtParkEX, ICFtParkFB, EICFtRoofEX, 
                      EICFtParkEX, EICFtRoofFB, EICFtParkFB, Sewerable, Shape_Length, Shape_Area, SourceQuality, Septic, Pzone, HasBasement, PROPERTYID
FROM         mst_dsc_ac";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectDataSet.MstDscDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectDataSet.MstDscDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectDataSet.MstDscDataTable dataTable = new ProjectDataSet.MstDscDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet.MstDscDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MstDsc");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_ParcelID, 
                    global::System.Nullable<int> Original_DivideID, 
                    global::System.Nullable<int> Original_DSCID, 
                    global::System.Nullable<int> Original_discoSiteID, 
                    string Original_DiscoClass, 
                    global::System.Nullable<int> Original_ToMLinkSan, 
                    global::System.Nullable<int> Original_ToMLinkStorm, 
                    string Original_PipeFlowTypeSan, 
                    string Original_PipeFlowTypeStorm, 
                    global::System.Nullable<double> Original_SanSwrCrown, 
                    global::System.Nullable<double> Original_Frac2SwrBeg, 
                    global::System.Nullable<double> Original_FloodRefElev, 
                    bool Original_FalseBFRisk, 
                    string Original_RNO, 
                    string Original_OWNER1, 
                    string Original_OWNER2, 
                    string Original_OWNER3, 
                    string Original_OWNERADDR, 
                    string Original_OWNERCITY, 
                    string Original_OWNERSTATE, 
                    string Original_OWNERZIP, 
                    string Original_SITEADDR, 
                    string Original_SITECITY, 
                    string Original_SITE_STATE, 
                    string Original_SITEZIP, 
                    global::System.Nullable<double> Original_FloodRefElev_2, 
                    bool Original_isVacant, 
                    string Original_ZoneEX, 
                    string Original_ZoneCP, 
                    string Original_GenEX, 
                    string Original_GenCP, 
                    global::System.Nullable<int> Original_PZsqft, 
                    global::System.Nullable<double> Original_ImpFractEX, 
                    global::System.Nullable<double> Original_ImpFractCP, 
                    global::System.Nullable<double> Original_ImpFractFB, 
                    global::System.Nullable<int> Original_AreaFt, 
                    global::System.Nullable<int> Original_RfAreaFtEX, 
                    global::System.Nullable<int> Original_surveyedRfAreaSqFt, 
                    bool Original_roofAreaNeedsUpdate, 
                    global::System.Nullable<int> Original_RfAreaFtFB, 
                    global::System.Nullable<int> Original_PkAreaFtEX, 
                    global::System.Nullable<int> Original_surveyedPkAreaSqFt, 
                    bool Original_parkAreaNeedsUpdate, 
                    global::System.Nullable<int> Original_PkAreaFtFB, 
                    global::System.Nullable<double> Original_BaseflowEXcfs, 
                    global::System.Nullable<double> Original_BaseflowFBcfs, 
                    global::System.Nullable<double> Original_BaseflowDMcfs, 
                    global::System.Nullable<int> Original_GrowthState, 
                    bool Original_IncIA4FB, 
                    string Original_gisBasin, 
                    global::System.Nullable<int> Original_ICFtRoofEX, 
                    global::System.Nullable<int> Original_ICFtRoofFB, 
                    global::System.Nullable<int> Original_ICFtParkEX, 
                    global::System.Nullable<int> Original_ICFtParkFB, 
                    global::System.Nullable<int> Original_EICFtRoofEX, 
                    global::System.Nullable<int> Original_EICFtParkEX, 
                    global::System.Nullable<int> Original_EICFtRoofFB, 
                    global::System.Nullable<int> Original_EICFtParkFB, 
                    global::System.Nullable<int> Original_Sewerable, 
                    global::System.Nullable<double> Original_Shape_Length, 
                    global::System.Nullable<double> Original_Shape_Area, 
                    string Original_SourceQuality, 
                    bool Original_Septic, 
                    bool Original_Pzone, 
                    global::System.Nullable<int> Original_HasBasement, 
                    string Original_PROPERTYID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_ParcelID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ParcelID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_DivideID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_DivideID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_DSCID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_DSCID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_discoSiteID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_discoSiteID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_DiscoClass == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_DiscoClass));
            }
            if ((Original_ToMLinkSan.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_ToMLinkSan.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_ToMLinkStorm.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_ToMLinkStorm.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_PipeFlowTypeSan == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_PipeFlowTypeSan));
            }
            if ((Original_PipeFlowTypeStorm == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_PipeFlowTypeStorm));
            }
            if ((Original_SanSwrCrown.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((double)(Original_SanSwrCrown.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_Frac2SwrBeg.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((double)(Original_Frac2SwrBeg.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_FloodRefElev.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((double)(Original_FloodRefElev.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[25].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[26].Value = ((bool)(Original_FalseBFRisk));
            if ((Original_RNO == null)) {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[28].Value = ((string)(Original_RNO));
            }
            if ((Original_OWNER1 == null)) {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[30].Value = ((string)(Original_OWNER1));
            }
            if ((Original_OWNER2 == null)) {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[32].Value = ((string)(Original_OWNER2));
            }
            if ((Original_OWNER3 == null)) {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[34].Value = ((string)(Original_OWNER3));
            }
            if ((Original_OWNERADDR == null)) {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[36].Value = ((string)(Original_OWNERADDR));
            }
            if ((Original_OWNERCITY == null)) {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[38].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[37].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[38].Value = ((string)(Original_OWNERCITY));
            }
            if ((Original_OWNERSTATE == null)) {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[39].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[40].Value = ((string)(Original_OWNERSTATE));
            }
            if ((Original_OWNERZIP == null)) {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[42].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[41].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[42].Value = ((string)(Original_OWNERZIP));
            }
            if ((Original_SITEADDR == null)) {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[43].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[44].Value = ((string)(Original_SITEADDR));
            }
            if ((Original_SITECITY == null)) {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[45].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[46].Value = ((string)(Original_SITECITY));
            }
            if ((Original_SITE_STATE == null)) {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[48].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[47].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[48].Value = ((string)(Original_SITE_STATE));
            }
            if ((Original_SITEZIP == null)) {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[49].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[50].Value = ((string)(Original_SITEZIP));
            }
            if ((Original_FloodRefElev_2.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[52].Value = ((double)(Original_FloodRefElev_2.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[51].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[53].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[54].Value = ((bool)(Original_isVacant));
            if ((Original_ZoneEX == null)) {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[55].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[56].Value = ((string)(Original_ZoneEX));
            }
            if ((Original_ZoneCP == null)) {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[57].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[58].Value = ((string)(Original_ZoneCP));
            }
            if ((Original_GenEX == null)) {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[59].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[60].Value = ((string)(Original_GenEX));
            }
            if ((Original_GenCP == null)) {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[62].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[61].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[62].Value = ((string)(Original_GenCP));
            }
            if ((Original_PZsqft.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[64].Value = ((int)(Original_PZsqft.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[63].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((Original_ImpFractEX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[66].Value = ((double)(Original_ImpFractEX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[65].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[66].Value = global::System.DBNull.Value;
            }
            if ((Original_ImpFractCP.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[68].Value = ((double)(Original_ImpFractCP.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((Original_ImpFractFB.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[70].Value = ((double)(Original_ImpFractFB.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((Original_AreaFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[72].Value = ((int)(Original_AreaFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((Original_RfAreaFtEX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[74].Value = ((int)(Original_RfAreaFtEX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_surveyedRfAreaSqFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[76].Value = ((int)(Original_surveyedRfAreaSqFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[77].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[78].Value = ((bool)(Original_roofAreaNeedsUpdate));
            if ((Original_RfAreaFtFB.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[80].Value = ((int)(Original_RfAreaFtFB.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((Original_PkAreaFtEX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[82].Value = ((int)(Original_PkAreaFtEX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            if ((Original_surveyedPkAreaSqFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[84].Value = ((int)(Original_surveyedPkAreaSqFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[85].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[86].Value = ((bool)(Original_parkAreaNeedsUpdate));
            if ((Original_PkAreaFtFB.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[88].Value = ((int)(Original_PkAreaFtFB.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            if ((Original_BaseflowEXcfs.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[89].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[90].Value = ((double)(Original_BaseflowEXcfs.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[89].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            if ((Original_BaseflowFBcfs.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[91].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[92].Value = ((double)(Original_BaseflowFBcfs.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[91].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[92].Value = global::System.DBNull.Value;
            }
            if ((Original_BaseflowDMcfs.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[93].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[94].Value = ((double)(Original_BaseflowDMcfs.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[93].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            if ((Original_GrowthState.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[95].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[96].Value = ((int)(Original_GrowthState.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[95].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[97].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[98].Value = ((bool)(Original_IncIA4FB));
            if ((Original_gisBasin == null)) {
                this.Adapter.DeleteCommand.Parameters[99].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[100].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[99].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[100].Value = ((string)(Original_gisBasin));
            }
            if ((Original_ICFtRoofEX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[101].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[102].Value = ((int)(Original_ICFtRoofEX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[101].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[102].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFtRoofFB.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[103].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[104].Value = ((int)(Original_ICFtRoofFB.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[103].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[104].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFtParkEX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[105].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[106].Value = ((int)(Original_ICFtParkEX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[105].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[106].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFtParkFB.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[107].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[108].Value = ((int)(Original_ICFtParkFB.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[107].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[108].Value = global::System.DBNull.Value;
            }
            if ((Original_EICFtRoofEX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[109].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[110].Value = ((int)(Original_EICFtRoofEX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[109].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[110].Value = global::System.DBNull.Value;
            }
            if ((Original_EICFtParkEX.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[111].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[112].Value = ((int)(Original_EICFtParkEX.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[111].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[112].Value = global::System.DBNull.Value;
            }
            if ((Original_EICFtRoofFB.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[113].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[114].Value = ((int)(Original_EICFtRoofFB.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[113].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[114].Value = global::System.DBNull.Value;
            }
            if ((Original_EICFtParkFB.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[115].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[116].Value = ((int)(Original_EICFtParkFB.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[115].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[116].Value = global::System.DBNull.Value;
            }
            if ((Original_Sewerable.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[117].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[118].Value = ((int)(Original_Sewerable.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[117].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[118].Value = global::System.DBNull.Value;
            }
            if ((Original_Shape_Length.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[119].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[120].Value = ((double)(Original_Shape_Length.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[119].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[120].Value = global::System.DBNull.Value;
            }
            if ((Original_Shape_Area.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[121].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[122].Value = ((double)(Original_Shape_Area.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[121].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[122].Value = global::System.DBNull.Value;
            }
            if ((Original_SourceQuality == null)) {
                this.Adapter.DeleteCommand.Parameters[123].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[124].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[123].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[124].Value = ((string)(Original_SourceQuality));
            }
            this.Adapter.DeleteCommand.Parameters[125].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[126].Value = ((bool)(Original_Septic));
            this.Adapter.DeleteCommand.Parameters[127].Value = ((object)(0));
            this.Adapter.DeleteCommand.Parameters[128].Value = ((bool)(Original_Pzone));
            if ((Original_HasBasement.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[129].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[130].Value = ((int)(Original_HasBasement.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[129].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[130].Value = global::System.DBNull.Value;
            }
            if ((Original_PROPERTYID == null)) {
                this.Adapter.DeleteCommand.Parameters[131].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[132].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[131].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[132].Value = ((string)(Original_PROPERTYID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    global::System.Nullable<int> ParcelID, 
                    global::System.Nullable<int> DivideID, 
                    global::System.Nullable<int> DSCID, 
                    global::System.Nullable<int> discoSiteID, 
                    string DiscoClass, 
                    global::System.Nullable<int> ToMLinkSan, 
                    global::System.Nullable<int> ToMLinkStorm, 
                    string PipeFlowTypeSan, 
                    string PipeFlowTypeStorm, 
                    global::System.Nullable<double> SanSwrCrown, 
                    global::System.Nullable<double> Frac2SwrBeg, 
                    global::System.Nullable<double> FloodRefElev, 
                    bool FalseBFRisk, 
                    string RNO, 
                    string OWNER1, 
                    string OWNER2, 
                    string OWNER3, 
                    string OWNERADDR, 
                    string OWNERCITY, 
                    string OWNERSTATE, 
                    string OWNERZIP, 
                    string SITEADDR, 
                    string SITECITY, 
                    string SITE_STATE, 
                    string SITEZIP, 
                    global::System.Nullable<double> FloodRefElev_2, 
                    bool isVacant, 
                    string ZoneEX, 
                    string ZoneCP, 
                    string GenEX, 
                    string GenCP, 
                    global::System.Nullable<int> PZsqft, 
                    global::System.Nullable<double> ImpFractEX, 
                    global::System.Nullable<double> ImpFractCP, 
                    global::System.Nullable<double> ImpFractFB, 
                    global::System.Nullable<int> AreaFt, 
                    global::System.Nullable<int> RfAreaFtEX, 
                    global::System.Nullable<int> surveyedRfAreaSqFt, 
                    bool roofAreaNeedsUpdate, 
                    global::System.Nullable<int> RfAreaFtFB, 
                    global::System.Nullable<int> PkAreaFtEX, 
                    global::System.Nullable<int> surveyedPkAreaSqFt, 
                    bool parkAreaNeedsUpdate, 
                    global::System.Nullable<int> PkAreaFtFB, 
                    global::System.Nullable<double> BaseflowEXcfs, 
                    global::System.Nullable<double> BaseflowFBcfs, 
                    global::System.Nullable<double> BaseflowDMcfs, 
                    global::System.Nullable<int> GrowthState, 
                    bool IncIA4FB, 
                    string gisBasin, 
                    global::System.Nullable<int> ICFtRoofEX, 
                    global::System.Nullable<int> ICFtRoofFB, 
                    global::System.Nullable<int> ICFtParkEX, 
                    global::System.Nullable<int> ICFtParkFB, 
                    global::System.Nullable<int> EICFtRoofEX, 
                    global::System.Nullable<int> EICFtParkEX, 
                    global::System.Nullable<int> EICFtRoofFB, 
                    global::System.Nullable<int> EICFtParkFB, 
                    global::System.Nullable<int> Sewerable, 
                    global::System.Nullable<double> Shape_Length, 
                    global::System.Nullable<double> Shape_Area, 
                    string SourceQuality, 
                    bool Septic, 
                    bool Pzone, 
                    global::System.Nullable<int> HasBasement, 
                    string PROPERTYID) {
            if ((ParcelID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ParcelID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DivideID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(DivideID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((DSCID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(DSCID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((discoSiteID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(discoSiteID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DiscoClass == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(DiscoClass));
            }
            if ((ToMLinkSan.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(ToMLinkSan.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ToMLinkStorm.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((int)(ToMLinkStorm.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((PipeFlowTypeSan == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(PipeFlowTypeSan));
            }
            if ((PipeFlowTypeStorm == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(PipeFlowTypeStorm));
            }
            if ((SanSwrCrown.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(SanSwrCrown.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Frac2SwrBeg.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(Frac2SwrBeg.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((FloodRefElev.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(FloodRefElev.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(FalseBFRisk));
            if ((RNO == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(RNO));
            }
            if ((OWNER1 == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(OWNER1));
            }
            if ((OWNER2 == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(OWNER2));
            }
            if ((OWNER3 == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(OWNER3));
            }
            if ((OWNERADDR == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(OWNERADDR));
            }
            if ((OWNERCITY == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(OWNERCITY));
            }
            if ((OWNERSTATE == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(OWNERSTATE));
            }
            if ((OWNERZIP == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(OWNERZIP));
            }
            if ((SITEADDR == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(SITEADDR));
            }
            if ((SITECITY == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(SITECITY));
            }
            if ((SITE_STATE == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(SITE_STATE));
            }
            if ((SITEZIP == null)) {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = ((string)(SITEZIP));
            }
            if ((FloodRefElev_2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((double)(FloodRefElev_2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[26].Value = ((bool)(isVacant));
            if ((ZoneEX == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(ZoneEX));
            }
            if ((ZoneCP == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(ZoneCP));
            }
            if ((GenEX == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(GenEX));
            }
            if ((GenCP == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(GenCP));
            }
            if ((PZsqft.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((int)(PZsqft.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((ImpFractEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((double)(ImpFractEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((ImpFractCP.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((double)(ImpFractCP.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((ImpFractFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((double)(ImpFractFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((AreaFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[35].Value = ((int)(AreaFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((RfAreaFtEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[36].Value = ((int)(RfAreaFtEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((surveyedRfAreaSqFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[37].Value = ((int)(surveyedRfAreaSqFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[38].Value = ((bool)(roofAreaNeedsUpdate));
            if ((RfAreaFtFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[39].Value = ((int)(RfAreaFtFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((PkAreaFtEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[40].Value = ((int)(PkAreaFtEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((surveyedPkAreaSqFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[41].Value = ((int)(surveyedPkAreaSqFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[42].Value = ((bool)(parkAreaNeedsUpdate));
            if ((PkAreaFtFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[43].Value = ((int)(PkAreaFtFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((BaseflowEXcfs.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[44].Value = ((double)(BaseflowEXcfs.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((BaseflowFBcfs.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[45].Value = ((double)(BaseflowFBcfs.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((BaseflowDMcfs.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[46].Value = ((double)(BaseflowDMcfs.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((GrowthState.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[47].Value = ((int)(GrowthState.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[48].Value = ((bool)(IncIA4FB));
            if ((gisBasin == null)) {
                this.Adapter.InsertCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[49].Value = ((string)(gisBasin));
            }
            if ((ICFtRoofEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[50].Value = ((int)(ICFtRoofEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((ICFtRoofFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[51].Value = ((int)(ICFtRoofFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((ICFtParkEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[52].Value = ((int)(ICFtParkEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((ICFtParkFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[53].Value = ((int)(ICFtParkFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((EICFtRoofEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[54].Value = ((int)(EICFtRoofEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((EICFtParkEX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[55].Value = ((int)(EICFtParkEX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((EICFtRoofFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[56].Value = ((int)(EICFtRoofFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((EICFtParkFB.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[57].Value = ((int)(EICFtParkFB.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((Sewerable.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[58].Value = ((int)(Sewerable.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Shape_Length.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[59].Value = ((double)(Shape_Length.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((Shape_Area.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[60].Value = ((double)(Shape_Area.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((SourceQuality == null)) {
                this.Adapter.InsertCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[61].Value = ((string)(SourceQuality));
            }
            this.Adapter.InsertCommand.Parameters[62].Value = ((bool)(Septic));
            this.Adapter.InsertCommand.Parameters[63].Value = ((bool)(Pzone));
            if ((HasBasement.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[64].Value = ((int)(HasBasement.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((PROPERTYID == null)) {
                this.Adapter.InsertCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[65].Value = ((string)(PROPERTYID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> ParcelID, 
                    global::System.Nullable<int> DivideID, 
                    global::System.Nullable<int> DSCID, 
                    global::System.Nullable<int> discoSiteID, 
                    string DiscoClass, 
                    global::System.Nullable<int> ToMLinkSan, 
                    global::System.Nullable<int> ToMLinkStorm, 
                    string PipeFlowTypeSan, 
                    string PipeFlowTypeStorm, 
                    global::System.Nullable<double> SanSwrCrown, 
                    global::System.Nullable<double> Frac2SwrBeg, 
                    global::System.Nullable<double> FloodRefElev, 
                    bool FalseBFRisk, 
                    string RNO, 
                    string OWNER1, 
                    string OWNER2, 
                    string OWNER3, 
                    string OWNERADDR, 
                    string OWNERCITY, 
                    string OWNERSTATE, 
                    string OWNERZIP, 
                    string SITEADDR, 
                    string SITECITY, 
                    string SITE_STATE, 
                    string SITEZIP, 
                    global::System.Nullable<double> FloodRefElev_2, 
                    bool isVacant, 
                    string ZoneEX, 
                    string ZoneCP, 
                    string GenEX, 
                    string GenCP, 
                    global::System.Nullable<int> PZsqft, 
                    global::System.Nullable<double> ImpFractEX, 
                    global::System.Nullable<double> ImpFractCP, 
                    global::System.Nullable<double> ImpFractFB, 
                    global::System.Nullable<int> AreaFt, 
                    global::System.Nullable<int> RfAreaFtEX, 
                    global::System.Nullable<int> surveyedRfAreaSqFt, 
                    bool roofAreaNeedsUpdate, 
                    global::System.Nullable<int> RfAreaFtFB, 
                    global::System.Nullable<int> PkAreaFtEX, 
                    global::System.Nullable<int> surveyedPkAreaSqFt, 
                    bool parkAreaNeedsUpdate, 
                    global::System.Nullable<int> PkAreaFtFB, 
                    global::System.Nullable<double> BaseflowEXcfs, 
                    global::System.Nullable<double> BaseflowFBcfs, 
                    global::System.Nullable<double> BaseflowDMcfs, 
                    global::System.Nullable<int> GrowthState, 
                    bool IncIA4FB, 
                    string gisBasin, 
                    global::System.Nullable<int> ICFtRoofEX, 
                    global::System.Nullable<int> ICFtRoofFB, 
                    global::System.Nullable<int> ICFtParkEX, 
                    global::System.Nullable<int> ICFtParkFB, 
                    global::System.Nullable<int> EICFtRoofEX, 
                    global::System.Nullable<int> EICFtParkEX, 
                    global::System.Nullable<int> EICFtRoofFB, 
                    global::System.Nullable<int> EICFtParkFB, 
                    global::System.Nullable<int> Sewerable, 
                    global::System.Nullable<double> Shape_Length, 
                    global::System.Nullable<double> Shape_Area, 
                    string SourceQuality, 
                    bool Septic, 
                    bool Pzone, 
                    global::System.Nullable<int> HasBasement, 
                    string PROPERTYID, 
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_ParcelID, 
                    global::System.Nullable<int> Original_DivideID, 
                    global::System.Nullable<int> Original_DSCID, 
                    global::System.Nullable<int> Original_discoSiteID, 
                    string Original_DiscoClass, 
                    global::System.Nullable<int> Original_ToMLinkSan, 
                    global::System.Nullable<int> Original_ToMLinkStorm, 
                    string Original_PipeFlowTypeSan, 
                    string Original_PipeFlowTypeStorm, 
                    global::System.Nullable<double> Original_SanSwrCrown, 
                    global::System.Nullable<double> Original_Frac2SwrBeg, 
                    global::System.Nullable<double> Original_FloodRefElev, 
                    bool Original_FalseBFRisk, 
                    string Original_RNO, 
                    string Original_OWNER1, 
                    string Original_OWNER2, 
                    string Original_OWNER3, 
                    string Original_OWNERADDR, 
                    string Original_OWNERCITY, 
                    string Original_OWNERSTATE, 
                    string Original_OWNERZIP, 
                    string Original_SITEADDR, 
                    string Original_SITECITY, 
                    string Original_SITE_STATE, 
                    string Original_SITEZIP, 
                    global::System.Nullable<double> Original_FloodRefElev_2, 
                    bool Original_isVacant, 
                    string Original_ZoneEX, 
                    string Original_ZoneCP, 
                    string Original_GenEX, 
                    string Original_GenCP, 
                    global::System.Nullable<int> Original_PZsqft, 
                    global::System.Nullable<double> Original_ImpFractEX, 
                    global::System.Nullable<double> Original_ImpFractCP, 
                    global::System.Nullable<double> Original_ImpFractFB, 
                    global::System.Nullable<int> Original_AreaFt, 
                    global::System.Nullable<int> Original_RfAreaFtEX, 
                    global::System.Nullable<int> Original_surveyedRfAreaSqFt, 
                    bool Original_roofAreaNeedsUpdate, 
                    global::System.Nullable<int> Original_RfAreaFtFB, 
                    global::System.Nullable<int> Original_PkAreaFtEX, 
                    global::System.Nullable<int> Original_surveyedPkAreaSqFt, 
                    bool Original_parkAreaNeedsUpdate, 
                    global::System.Nullable<int> Original_PkAreaFtFB, 
                    global::System.Nullable<double> Original_BaseflowEXcfs, 
                    global::System.Nullable<double> Original_BaseflowFBcfs, 
                    global::System.Nullable<double> Original_BaseflowDMcfs, 
                    global::System.Nullable<int> Original_GrowthState, 
                    bool Original_IncIA4FB, 
                    string Original_gisBasin, 
                    global::System.Nullable<int> Original_ICFtRoofEX, 
                    global::System.Nullable<int> Original_ICFtRoofFB, 
                    global::System.Nullable<int> Original_ICFtParkEX, 
                    global::System.Nullable<int> Original_ICFtParkFB, 
                    global::System.Nullable<int> Original_EICFtRoofEX, 
                    global::System.Nullable<int> Original_EICFtParkEX, 
                    global::System.Nullable<int> Original_EICFtRoofFB, 
                    global::System.Nullable<int> Original_EICFtParkFB, 
                    global::System.Nullable<int> Original_Sewerable, 
                    global::System.Nullable<double> Original_Shape_Length, 
                    global::System.Nullable<double> Original_Shape_Area, 
                    string Original_SourceQuality, 
                    bool Original_Septic, 
                    bool Original_Pzone, 
                    global::System.Nullable<int> Original_HasBasement, 
                    string Original_PROPERTYID) {
            if ((ParcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ParcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((DivideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(DivideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((DSCID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(DSCID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((discoSiteID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(discoSiteID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((DiscoClass == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(DiscoClass));
            }
            if ((ToMLinkSan.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(ToMLinkSan.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((ToMLinkStorm.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ToMLinkStorm.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((PipeFlowTypeSan == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(PipeFlowTypeSan));
            }
            if ((PipeFlowTypeStorm == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(PipeFlowTypeStorm));
            }
            if ((SanSwrCrown.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(SanSwrCrown.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Frac2SwrBeg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(Frac2SwrBeg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((FloodRefElev.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(FloodRefElev.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(FalseBFRisk));
            if ((RNO == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(RNO));
            }
            if ((OWNER1 == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(OWNER1));
            }
            if ((OWNER2 == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(OWNER2));
            }
            if ((OWNER3 == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(OWNER3));
            }
            if ((OWNERADDR == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(OWNERADDR));
            }
            if ((OWNERCITY == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(OWNERCITY));
            }
            if ((OWNERSTATE == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(OWNERSTATE));
            }
            if ((OWNERZIP == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(OWNERZIP));
            }
            if ((SITEADDR == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(SITEADDR));
            }
            if ((SITECITY == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(SITECITY));
            }
            if ((SITE_STATE == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(SITE_STATE));
            }
            if ((SITEZIP == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(SITEZIP));
            }
            if ((FloodRefElev_2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((double)(FloodRefElev_2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((bool)(isVacant));
            if ((ZoneEX == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(ZoneEX));
            }
            if ((ZoneCP == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(ZoneCP));
            }
            if ((GenEX == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(GenEX));
            }
            if ((GenCP == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(GenCP));
            }
            if ((PZsqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((int)(PZsqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((ImpFractEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((double)(ImpFractEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((ImpFractCP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((double)(ImpFractCP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((ImpFractFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((double)(ImpFractFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            if ((AreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((int)(AreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            if ((RfAreaFtEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((int)(RfAreaFtEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            if ((surveyedRfAreaSqFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[37].Value = ((int)(surveyedRfAreaSqFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[37].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[38].Value = ((bool)(roofAreaNeedsUpdate));
            if ((RfAreaFtFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[39].Value = ((int)(RfAreaFtFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[39].Value = global::System.DBNull.Value;
            }
            if ((PkAreaFtEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[40].Value = ((int)(PkAreaFtEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[40].Value = global::System.DBNull.Value;
            }
            if ((surveyedPkAreaSqFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[41].Value = ((int)(surveyedPkAreaSqFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[41].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[42].Value = ((bool)(parkAreaNeedsUpdate));
            if ((PkAreaFtFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[43].Value = ((int)(PkAreaFtFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[43].Value = global::System.DBNull.Value;
            }
            if ((BaseflowEXcfs.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[44].Value = ((double)(BaseflowEXcfs.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[44].Value = global::System.DBNull.Value;
            }
            if ((BaseflowFBcfs.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[45].Value = ((double)(BaseflowFBcfs.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[45].Value = global::System.DBNull.Value;
            }
            if ((BaseflowDMcfs.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[46].Value = ((double)(BaseflowDMcfs.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[46].Value = global::System.DBNull.Value;
            }
            if ((GrowthState.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[47].Value = ((int)(GrowthState.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[47].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[48].Value = ((bool)(IncIA4FB));
            if ((gisBasin == null)) {
                this.Adapter.UpdateCommand.Parameters[49].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[49].Value = ((string)(gisBasin));
            }
            if ((ICFtRoofEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[50].Value = ((int)(ICFtRoofEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[50].Value = global::System.DBNull.Value;
            }
            if ((ICFtRoofFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[51].Value = ((int)(ICFtRoofFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[51].Value = global::System.DBNull.Value;
            }
            if ((ICFtParkEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[52].Value = ((int)(ICFtParkEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[52].Value = global::System.DBNull.Value;
            }
            if ((ICFtParkFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[53].Value = ((int)(ICFtParkFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[53].Value = global::System.DBNull.Value;
            }
            if ((EICFtRoofEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[54].Value = ((int)(EICFtRoofEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[54].Value = global::System.DBNull.Value;
            }
            if ((EICFtParkEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[55].Value = ((int)(EICFtParkEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[55].Value = global::System.DBNull.Value;
            }
            if ((EICFtRoofFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[56].Value = ((int)(EICFtRoofFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[56].Value = global::System.DBNull.Value;
            }
            if ((EICFtParkFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[57].Value = ((int)(EICFtParkFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[57].Value = global::System.DBNull.Value;
            }
            if ((Sewerable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[58].Value = ((int)(Sewerable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[58].Value = global::System.DBNull.Value;
            }
            if ((Shape_Length.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[59].Value = ((double)(Shape_Length.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[59].Value = global::System.DBNull.Value;
            }
            if ((Shape_Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[60].Value = ((double)(Shape_Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[60].Value = global::System.DBNull.Value;
            }
            if ((SourceQuality == null)) {
                this.Adapter.UpdateCommand.Parameters[61].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[61].Value = ((string)(SourceQuality));
            }
            this.Adapter.UpdateCommand.Parameters[62].Value = ((bool)(Septic));
            this.Adapter.UpdateCommand.Parameters[63].Value = ((bool)(Pzone));
            if ((HasBasement.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[64].Value = ((int)(HasBasement.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[64].Value = global::System.DBNull.Value;
            }
            if ((PROPERTYID == null)) {
                this.Adapter.UpdateCommand.Parameters[65].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[65].Value = ((string)(PROPERTYID));
            }
            this.Adapter.UpdateCommand.Parameters[66].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_ParcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[68].Value = ((int)(Original_ParcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[67].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[68].Value = global::System.DBNull.Value;
            }
            if ((Original_DivideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[70].Value = ((int)(Original_DivideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[69].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[70].Value = global::System.DBNull.Value;
            }
            if ((Original_DSCID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[72].Value = ((int)(Original_DSCID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[71].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[72].Value = global::System.DBNull.Value;
            }
            if ((Original_discoSiteID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[74].Value = ((int)(Original_discoSiteID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[73].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[74].Value = global::System.DBNull.Value;
            }
            if ((Original_DiscoClass == null)) {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[76].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[75].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[76].Value = ((string)(Original_DiscoClass));
            }
            if ((Original_ToMLinkSan.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[78].Value = ((int)(Original_ToMLinkSan.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[77].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[78].Value = global::System.DBNull.Value;
            }
            if ((Original_ToMLinkStorm.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[80].Value = ((int)(Original_ToMLinkStorm.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[79].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[80].Value = global::System.DBNull.Value;
            }
            if ((Original_PipeFlowTypeSan == null)) {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[82].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[81].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[82].Value = ((string)(Original_PipeFlowTypeSan));
            }
            if ((Original_PipeFlowTypeStorm == null)) {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[84].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[83].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[84].Value = ((string)(Original_PipeFlowTypeStorm));
            }
            if ((Original_SanSwrCrown.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[86].Value = ((double)(Original_SanSwrCrown.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[85].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[86].Value = global::System.DBNull.Value;
            }
            if ((Original_Frac2SwrBeg.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[88].Value = ((double)(Original_Frac2SwrBeg.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[87].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[88].Value = global::System.DBNull.Value;
            }
            if ((Original_FloodRefElev.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[90].Value = ((double)(Original_FloodRefElev.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[89].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[90].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[91].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[92].Value = ((bool)(Original_FalseBFRisk));
            if ((Original_RNO == null)) {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[94].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[93].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[94].Value = ((string)(Original_RNO));
            }
            if ((Original_OWNER1 == null)) {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[96].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[95].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[96].Value = ((string)(Original_OWNER1));
            }
            if ((Original_OWNER2 == null)) {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[98].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[97].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[98].Value = ((string)(Original_OWNER2));
            }
            if ((Original_OWNER3 == null)) {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[100].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[99].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[100].Value = ((string)(Original_OWNER3));
            }
            if ((Original_OWNERADDR == null)) {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[102].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[101].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[102].Value = ((string)(Original_OWNERADDR));
            }
            if ((Original_OWNERCITY == null)) {
                this.Adapter.UpdateCommand.Parameters[103].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[104].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[103].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[104].Value = ((string)(Original_OWNERCITY));
            }
            if ((Original_OWNERSTATE == null)) {
                this.Adapter.UpdateCommand.Parameters[105].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[106].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[105].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[106].Value = ((string)(Original_OWNERSTATE));
            }
            if ((Original_OWNERZIP == null)) {
                this.Adapter.UpdateCommand.Parameters[107].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[108].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[107].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[108].Value = ((string)(Original_OWNERZIP));
            }
            if ((Original_SITEADDR == null)) {
                this.Adapter.UpdateCommand.Parameters[109].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[110].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[109].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[110].Value = ((string)(Original_SITEADDR));
            }
            if ((Original_SITECITY == null)) {
                this.Adapter.UpdateCommand.Parameters[111].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[112].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[111].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[112].Value = ((string)(Original_SITECITY));
            }
            if ((Original_SITE_STATE == null)) {
                this.Adapter.UpdateCommand.Parameters[113].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[114].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[113].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[114].Value = ((string)(Original_SITE_STATE));
            }
            if ((Original_SITEZIP == null)) {
                this.Adapter.UpdateCommand.Parameters[115].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[116].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[115].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[116].Value = ((string)(Original_SITEZIP));
            }
            if ((Original_FloodRefElev_2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[117].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[118].Value = ((double)(Original_FloodRefElev_2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[117].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[118].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[119].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[120].Value = ((bool)(Original_isVacant));
            if ((Original_ZoneEX == null)) {
                this.Adapter.UpdateCommand.Parameters[121].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[122].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[121].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[122].Value = ((string)(Original_ZoneEX));
            }
            if ((Original_ZoneCP == null)) {
                this.Adapter.UpdateCommand.Parameters[123].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[124].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[123].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[124].Value = ((string)(Original_ZoneCP));
            }
            if ((Original_GenEX == null)) {
                this.Adapter.UpdateCommand.Parameters[125].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[126].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[125].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[126].Value = ((string)(Original_GenEX));
            }
            if ((Original_GenCP == null)) {
                this.Adapter.UpdateCommand.Parameters[127].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[128].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[127].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[128].Value = ((string)(Original_GenCP));
            }
            if ((Original_PZsqft.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[129].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[130].Value = ((int)(Original_PZsqft.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[129].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[130].Value = global::System.DBNull.Value;
            }
            if ((Original_ImpFractEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[131].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[132].Value = ((double)(Original_ImpFractEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[131].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[132].Value = global::System.DBNull.Value;
            }
            if ((Original_ImpFractCP.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[133].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[134].Value = ((double)(Original_ImpFractCP.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[133].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[134].Value = global::System.DBNull.Value;
            }
            if ((Original_ImpFractFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[135].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[136].Value = ((double)(Original_ImpFractFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[135].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[136].Value = global::System.DBNull.Value;
            }
            if ((Original_AreaFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[137].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[138].Value = ((int)(Original_AreaFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[137].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[138].Value = global::System.DBNull.Value;
            }
            if ((Original_RfAreaFtEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[139].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[140].Value = ((int)(Original_RfAreaFtEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[139].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[140].Value = global::System.DBNull.Value;
            }
            if ((Original_surveyedRfAreaSqFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[141].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[142].Value = ((int)(Original_surveyedRfAreaSqFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[141].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[142].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[143].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[144].Value = ((bool)(Original_roofAreaNeedsUpdate));
            if ((Original_RfAreaFtFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[145].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[146].Value = ((int)(Original_RfAreaFtFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[145].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[146].Value = global::System.DBNull.Value;
            }
            if ((Original_PkAreaFtEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[147].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[148].Value = ((int)(Original_PkAreaFtEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[147].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[148].Value = global::System.DBNull.Value;
            }
            if ((Original_surveyedPkAreaSqFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[149].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[150].Value = ((int)(Original_surveyedPkAreaSqFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[149].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[150].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[151].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[152].Value = ((bool)(Original_parkAreaNeedsUpdate));
            if ((Original_PkAreaFtFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[153].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[154].Value = ((int)(Original_PkAreaFtFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[153].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[154].Value = global::System.DBNull.Value;
            }
            if ((Original_BaseflowEXcfs.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[155].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[156].Value = ((double)(Original_BaseflowEXcfs.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[155].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[156].Value = global::System.DBNull.Value;
            }
            if ((Original_BaseflowFBcfs.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[157].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[158].Value = ((double)(Original_BaseflowFBcfs.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[157].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[158].Value = global::System.DBNull.Value;
            }
            if ((Original_BaseflowDMcfs.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[159].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[160].Value = ((double)(Original_BaseflowDMcfs.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[159].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[160].Value = global::System.DBNull.Value;
            }
            if ((Original_GrowthState.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[161].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[162].Value = ((int)(Original_GrowthState.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[161].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[162].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[163].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[164].Value = ((bool)(Original_IncIA4FB));
            if ((Original_gisBasin == null)) {
                this.Adapter.UpdateCommand.Parameters[165].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[166].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[165].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[166].Value = ((string)(Original_gisBasin));
            }
            if ((Original_ICFtRoofEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[167].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[168].Value = ((int)(Original_ICFtRoofEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[167].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[168].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFtRoofFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[169].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[170].Value = ((int)(Original_ICFtRoofFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[169].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[170].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFtParkEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[171].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[172].Value = ((int)(Original_ICFtParkEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[171].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[172].Value = global::System.DBNull.Value;
            }
            if ((Original_ICFtParkFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[173].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[174].Value = ((int)(Original_ICFtParkFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[173].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[174].Value = global::System.DBNull.Value;
            }
            if ((Original_EICFtRoofEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[175].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[176].Value = ((int)(Original_EICFtRoofEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[175].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[176].Value = global::System.DBNull.Value;
            }
            if ((Original_EICFtParkEX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[177].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[178].Value = ((int)(Original_EICFtParkEX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[177].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[178].Value = global::System.DBNull.Value;
            }
            if ((Original_EICFtRoofFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[179].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[180].Value = ((int)(Original_EICFtRoofFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[179].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[180].Value = global::System.DBNull.Value;
            }
            if ((Original_EICFtParkFB.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[181].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[182].Value = ((int)(Original_EICFtParkFB.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[181].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[182].Value = global::System.DBNull.Value;
            }
            if ((Original_Sewerable.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[183].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[184].Value = ((int)(Original_Sewerable.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[183].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[184].Value = global::System.DBNull.Value;
            }
            if ((Original_Shape_Length.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[185].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[186].Value = ((double)(Original_Shape_Length.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[185].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[186].Value = global::System.DBNull.Value;
            }
            if ((Original_Shape_Area.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[187].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[188].Value = ((double)(Original_Shape_Area.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[187].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[188].Value = global::System.DBNull.Value;
            }
            if ((Original_SourceQuality == null)) {
                this.Adapter.UpdateCommand.Parameters[189].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[190].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[189].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[190].Value = ((string)(Original_SourceQuality));
            }
            this.Adapter.UpdateCommand.Parameters[191].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[192].Value = ((bool)(Original_Septic));
            this.Adapter.UpdateCommand.Parameters[193].Value = ((object)(0));
            this.Adapter.UpdateCommand.Parameters[194].Value = ((bool)(Original_Pzone));
            if ((Original_HasBasement.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[195].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[196].Value = ((int)(Original_HasBasement.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[195].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[196].Value = global::System.DBNull.Value;
            }
            if ((Original_PROPERTYID == null)) {
                this.Adapter.UpdateCommand.Parameters[197].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[198].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[197].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[198].Value = ((string)(Original_PROPERTYID));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> ParcelID, 
                    global::System.Nullable<int> DivideID, 
                    global::System.Nullable<int> discoSiteID, 
                    string DiscoClass, 
                    global::System.Nullable<int> ToMLinkSan, 
                    global::System.Nullable<int> ToMLinkStorm, 
                    string PipeFlowTypeSan, 
                    string PipeFlowTypeStorm, 
                    global::System.Nullable<double> SanSwrCrown, 
                    global::System.Nullable<double> Frac2SwrBeg, 
                    global::System.Nullable<double> FloodRefElev, 
                    bool FalseBFRisk, 
                    string RNO, 
                    string OWNER1, 
                    string OWNER2, 
                    string OWNER3, 
                    string OWNERADDR, 
                    string OWNERCITY, 
                    string OWNERSTATE, 
                    string OWNERZIP, 
                    string SITEADDR, 
                    string SITECITY, 
                    string SITE_STATE, 
                    string SITEZIP, 
                    global::System.Nullable<double> FloodRefElev_2, 
                    bool isVacant, 
                    string ZoneEX, 
                    string ZoneCP, 
                    string GenEX, 
                    string GenCP, 
                    global::System.Nullable<int> PZsqft, 
                    global::System.Nullable<double> ImpFractEX, 
                    global::System.Nullable<double> ImpFractCP, 
                    global::System.Nullable<double> ImpFractFB, 
                    global::System.Nullable<int> AreaFt, 
                    global::System.Nullable<int> RfAreaFtEX, 
                    global::System.Nullable<int> surveyedRfAreaSqFt, 
                    bool roofAreaNeedsUpdate, 
                    global::System.Nullable<int> RfAreaFtFB, 
                    global::System.Nullable<int> PkAreaFtEX, 
                    global::System.Nullable<int> surveyedPkAreaSqFt, 
                    bool parkAreaNeedsUpdate, 
                    global::System.Nullable<int> PkAreaFtFB, 
                    global::System.Nullable<double> BaseflowEXcfs, 
                    global::System.Nullable<double> BaseflowFBcfs, 
                    global::System.Nullable<double> BaseflowDMcfs, 
                    global::System.Nullable<int> GrowthState, 
                    bool IncIA4FB, 
                    string gisBasin, 
                    global::System.Nullable<int> ICFtRoofEX, 
                    global::System.Nullable<int> ICFtRoofFB, 
                    global::System.Nullable<int> ICFtParkEX, 
                    global::System.Nullable<int> ICFtParkFB, 
                    global::System.Nullable<int> EICFtRoofEX, 
                    global::System.Nullable<int> EICFtParkEX, 
                    global::System.Nullable<int> EICFtRoofFB, 
                    global::System.Nullable<int> EICFtParkFB, 
                    global::System.Nullable<int> Sewerable, 
                    global::System.Nullable<double> Shape_Length, 
                    global::System.Nullable<double> Shape_Area, 
                    string SourceQuality, 
                    bool Septic, 
                    bool Pzone, 
                    global::System.Nullable<int> HasBasement, 
                    string PROPERTYID, 
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_ParcelID, 
                    global::System.Nullable<int> Original_DivideID, 
                    global::System.Nullable<int> Original_DSCID, 
                    global::System.Nullable<int> Original_discoSiteID, 
                    string Original_DiscoClass, 
                    global::System.Nullable<int> Original_ToMLinkSan, 
                    global::System.Nullable<int> Original_ToMLinkStorm, 
                    string Original_PipeFlowTypeSan, 
                    string Original_PipeFlowTypeStorm, 
                    global::System.Nullable<double> Original_SanSwrCrown, 
                    global::System.Nullable<double> Original_Frac2SwrBeg, 
                    global::System.Nullable<double> Original_FloodRefElev, 
                    bool Original_FalseBFRisk, 
                    string Original_RNO, 
                    string Original_OWNER1, 
                    string Original_OWNER2, 
                    string Original_OWNER3, 
                    string Original_OWNERADDR, 
                    string Original_OWNERCITY, 
                    string Original_OWNERSTATE, 
                    string Original_OWNERZIP, 
                    string Original_SITEADDR, 
                    string Original_SITECITY, 
                    string Original_SITE_STATE, 
                    string Original_SITEZIP, 
                    global::System.Nullable<double> Original_FloodRefElev_2, 
                    bool Original_isVacant, 
                    string Original_ZoneEX, 
                    string Original_ZoneCP, 
                    string Original_GenEX, 
                    string Original_GenCP, 
                    global::System.Nullable<int> Original_PZsqft, 
                    global::System.Nullable<double> Original_ImpFractEX, 
                    global::System.Nullable<double> Original_ImpFractCP, 
                    global::System.Nullable<double> Original_ImpFractFB, 
                    global::System.Nullable<int> Original_AreaFt, 
                    global::System.Nullable<int> Original_RfAreaFtEX, 
                    global::System.Nullable<int> Original_surveyedRfAreaSqFt, 
                    bool Original_roofAreaNeedsUpdate, 
                    global::System.Nullable<int> Original_RfAreaFtFB, 
                    global::System.Nullable<int> Original_PkAreaFtEX, 
                    global::System.Nullable<int> Original_surveyedPkAreaSqFt, 
                    bool Original_parkAreaNeedsUpdate, 
                    global::System.Nullable<int> Original_PkAreaFtFB, 
                    global::System.Nullable<double> Original_BaseflowEXcfs, 
                    global::System.Nullable<double> Original_BaseflowFBcfs, 
                    global::System.Nullable<double> Original_BaseflowDMcfs, 
                    global::System.Nullable<int> Original_GrowthState, 
                    bool Original_IncIA4FB, 
                    string Original_gisBasin, 
                    global::System.Nullable<int> Original_ICFtRoofEX, 
                    global::System.Nullable<int> Original_ICFtRoofFB, 
                    global::System.Nullable<int> Original_ICFtParkEX, 
                    global::System.Nullable<int> Original_ICFtParkFB, 
                    global::System.Nullable<int> Original_EICFtRoofEX, 
                    global::System.Nullable<int> Original_EICFtParkEX, 
                    global::System.Nullable<int> Original_EICFtRoofFB, 
                    global::System.Nullable<int> Original_EICFtParkFB, 
                    global::System.Nullable<int> Original_Sewerable, 
                    global::System.Nullable<double> Original_Shape_Length, 
                    global::System.Nullable<double> Original_Shape_Area, 
                    string Original_SourceQuality, 
                    bool Original_Septic, 
                    bool Original_Pzone, 
                    global::System.Nullable<int> Original_HasBasement, 
                    string Original_PROPERTYID) {
            return this.Update(ParcelID, DivideID, Original_DSCID, discoSiteID, DiscoClass, ToMLinkSan, ToMLinkStorm, PipeFlowTypeSan, PipeFlowTypeStorm, SanSwrCrown, Frac2SwrBeg, FloodRefElev, FalseBFRisk, RNO, OWNER1, OWNER2, OWNER3, OWNERADDR, OWNERCITY, OWNERSTATE, OWNERZIP, SITEADDR, SITECITY, SITE_STATE, SITEZIP, FloodRefElev_2, isVacant, ZoneEX, ZoneCP, GenEX, GenCP, PZsqft, ImpFractEX, ImpFractCP, ImpFractFB, AreaFt, RfAreaFtEX, surveyedRfAreaSqFt, roofAreaNeedsUpdate, RfAreaFtFB, PkAreaFtEX, surveyedPkAreaSqFt, parkAreaNeedsUpdate, PkAreaFtFB, BaseflowEXcfs, BaseflowFBcfs, BaseflowDMcfs, GrowthState, IncIA4FB, gisBasin, ICFtRoofEX, ICFtRoofFB, ICFtParkEX, ICFtParkFB, EICFtRoofEX, EICFtParkEX, EICFtRoofFB, EICFtParkFB, Sewerable, Shape_Length, Shape_Area, SourceQuality, Septic, Pzone, HasBasement, PROPERTYID, Original_MAPINFO_ID, Original_ParcelID, Original_DivideID, Original_DSCID, Original_discoSiteID, Original_DiscoClass, Original_ToMLinkSan, Original_ToMLinkStorm, Original_PipeFlowTypeSan, Original_PipeFlowTypeStorm, Original_SanSwrCrown, Original_Frac2SwrBeg, Original_FloodRefElev, Original_FalseBFRisk, Original_RNO, Original_OWNER1, Original_OWNER2, Original_OWNER3, Original_OWNERADDR, Original_OWNERCITY, Original_OWNERSTATE, Original_OWNERZIP, Original_SITEADDR, Original_SITECITY, Original_SITE_STATE, Original_SITEZIP, Original_FloodRefElev_2, Original_isVacant, Original_ZoneEX, Original_ZoneCP, Original_GenEX, Original_GenCP, Original_PZsqft, Original_ImpFractEX, Original_ImpFractCP, Original_ImpFractFB, Original_AreaFt, Original_RfAreaFtEX, Original_surveyedRfAreaSqFt, Original_roofAreaNeedsUpdate, Original_RfAreaFtFB, Original_PkAreaFtEX, Original_surveyedPkAreaSqFt, Original_parkAreaNeedsUpdate, Original_PkAreaFtFB, Original_BaseflowEXcfs, Original_BaseflowFBcfs, Original_BaseflowDMcfs, Original_GrowthState, Original_IncIA4FB, Original_gisBasin, Original_ICFtRoofEX, Original_ICFtRoofFB, Original_ICFtParkEX, Original_ICFtParkFB, Original_EICFtRoofEX, Original_EICFtParkEX, Original_EICFtRoofFB, Original_EICFtParkFB, Original_Sewerable, Original_Shape_Length, Original_Shape_Area, Original_SourceQuality, Original_Septic, Original_Pzone, Original_HasBasement, Original_PROPERTYID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MstIcDiscoVegTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MstIcDiscoVegTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MstIcDiscoVeg";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
            tableMapping.ColumnMappings.Add("dscID", "dscID");
            tableMapping.ColumnMappings.Add("ParcelID", "ParcelID");
            tableMapping.ColumnMappings.Add("DivideID", "DivideID");
            tableMapping.ColumnMappings.Add("RoofRPark", "RoofRPark");
            tableMapping.ColumnMappings.Add("assumekey", "assumekey");
            tableMapping.ColumnMappings.Add("TimeFrame", "TimeFrame");
            tableMapping.ColumnMappings.Add("ApplyAreaTF", "ApplyAreaTF");
            tableMapping.ColumnMappings.Add("ValidFromDate", "ValidFromDate");
            tableMapping.ColumnMappings.Add("ValidToDate", "ValidToDate");
            tableMapping.ColumnMappings.Add("SqFt", "SqFt");
            tableMapping.ColumnMappings.Add("Effectiveness", "Effectiveness");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            tableMapping.ColumnMappings.Add("AppendDate", "AppendDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `mst_ic_DiscoVeg_ac` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `dscID` IS NULL) OR (`dscID` = ?)) AND ((? = 1 AND `ParcelID` IS NULL) OR (`ParcelID` = ?)) AND ((? = 1 AND `DivideID` IS NULL) OR (`DivideID` = ?)) AND ((? = 1 AND `RoofRPark` IS NULL) OR (`RoofRPark` = ?)) AND ((? = 1 AND `assumekey` IS NULL) OR (`assumekey` = ?)) AND ((? = 1 AND `TimeFrame` IS NULL) OR (`TimeFrame` = ?)) AND ((? = 1 AND `ApplyAreaTF` IS NULL) OR (`ApplyAreaTF` = ?)) AND ((? = 1 AND `ValidFromDate` IS NULL) OR (`ValidFromDate` = ?)) AND ((? = 1 AND `ValidToDate` IS NULL) OR (`ValidToDate` = ?)) AND ((? = 1 AND `SqFt` IS NULL) OR (`SqFt` = ?)) AND ((? = 1 AND `Effectiveness` IS NULL) OR (`Effectiveness` = ?)) AND ((? = 1 AND `Comment` IS NULL) OR (`Comment` = ?)) AND ((? = 1 AND `AppendDate` IS NULL) OR (`AppendDate` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RoofRPark", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofRPark", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RoofRPark", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofRPark", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_assumekey", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "assumekey", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_assumekey", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "assumekey", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TimeFrame", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeFrame", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TimeFrame", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeFrame", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ApplyAreaTF", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ApplyAreaTF", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ApplyAreaTF", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ApplyAreaTF", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ValidFromDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidFromDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ValidFromDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidFromDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ValidToDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidToDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ValidToDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidToDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SqFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SqFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Effectiveness", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Effectiveness", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Effectiveness", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Effectiveness", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Comment", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comment", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Comment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comment", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AppendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `mst_ic_DiscoVeg_ac` (`dscID`, `ParcelID`, `DivideID`, `RoofRPark`, `" +
                "assumekey`, `TimeFrame`, `ApplyAreaTF`, `ValidFromDate`, `ValidToDate`, `SqFt`, " +
                "`Effectiveness`, `Comment`, `AppendDate`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, " +
                "?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RoofRPark", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofRPark", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("assumekey", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "assumekey", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TimeFrame", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeFrame", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ApplyAreaTF", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ApplyAreaTF", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ValidFromDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidFromDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ValidToDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidToDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SqFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Effectiveness", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Effectiveness", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Comment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comment", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `mst_ic_DiscoVeg_ac` SET `dscID` = ?, `ParcelID` = ?, `DivideID` = ?, `RoofRPark` = ?, `assumekey` = ?, `TimeFrame` = ?, `ApplyAreaTF` = ?, `ValidFromDate` = ?, `ValidToDate` = ?, `SqFt` = ?, `Effectiveness` = ?, `Comment` = ?, `AppendDate` = ? WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `dscID` IS NULL) OR (`dscID` = ?)) AND ((? = 1 AND `ParcelID` IS NULL) OR (`ParcelID` = ?)) AND ((? = 1 AND `DivideID` IS NULL) OR (`DivideID` = ?)) AND ((? = 1 AND `RoofRPark` IS NULL) OR (`RoofRPark` = ?)) AND ((? = 1 AND `assumekey` IS NULL) OR (`assumekey` = ?)) AND ((? = 1 AND `TimeFrame` IS NULL) OR (`TimeFrame` = ?)) AND ((? = 1 AND `ApplyAreaTF` IS NULL) OR (`ApplyAreaTF` = ?)) AND ((? = 1 AND `ValidFromDate` IS NULL) OR (`ValidFromDate` = ?)) AND ((? = 1 AND `ValidToDate` IS NULL) OR (`ValidToDate` = ?)) AND ((? = 1 AND `SqFt` IS NULL) OR (`SqFt` = ?)) AND ((? = 1 AND `Effectiveness` IS NULL) OR (`Effectiveness` = ?)) AND ((? = 1 AND `Comment` IS NULL) OR (`Comment` = ?)) AND ((? = 1 AND `AppendDate` IS NULL) OR (`AppendDate` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RoofRPark", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofRPark", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("assumekey", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "assumekey", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TimeFrame", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeFrame", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ApplyAreaTF", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ApplyAreaTF", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ValidFromDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidFromDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ValidToDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidToDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SqFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Effectiveness", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Effectiveness", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Comment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comment", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RoofRPark", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofRPark", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RoofRPark", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofRPark", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_assumekey", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "assumekey", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_assumekey", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "assumekey", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TimeFrame", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeFrame", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TimeFrame", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeFrame", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ApplyAreaTF", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ApplyAreaTF", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ApplyAreaTF", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ApplyAreaTF", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ValidFromDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidFromDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ValidFromDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidFromDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ValidToDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidToDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ValidToDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidToDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SqFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SqFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Effectiveness", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Effectiveness", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Effectiveness", global::System.Data.OleDb.OleDbType.Double, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Effectiveness", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Comment", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comment", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Comment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comment", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AppendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::DSCUpdater.Properties.Settings.Default.MasterDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     MAPINFO_ID, dscID, ParcelID, DivideID, RoofRPark, assumekey, TimeFrame" +
                ", ApplyAreaTF, ValidFromDate, ValidToDate, SqFt, Effectiveness, Comment,\r\n      " +
                "                 AppendDate\r\nFROM         mst_ic_DiscoVeg_ac";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectDataSet.MstIcDiscoVegDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectDataSet.MstIcDiscoVegDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectDataSet.MstIcDiscoVegDataTable dataTable = new ProjectDataSet.MstIcDiscoVegDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet.MstIcDiscoVegDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MstIcDiscoVeg");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MstIcDrywellTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.OleDb.OleDbDataAdapter _adapter;
        
        private global::System.Data.OleDb.OleDbConnection _connection;
        
        private global::System.Data.OleDb.OleDbTransaction _transaction;
        
        private global::System.Data.OleDb.OleDbCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MstIcDrywellTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.OleDb.OleDbDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.OleDb.OleDbCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.OleDb.OleDbTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.OleDb.OleDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.OleDb.OleDbDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MstIcDrywell";
            tableMapping.ColumnMappings.Add("MAPINFO_ID", "MAPINFO_ID");
            tableMapping.ColumnMappings.Add("dscID", "dscID");
            tableMapping.ColumnMappings.Add("ParcelID", "ParcelID");
            tableMapping.ColumnMappings.Add("DivideID", "DivideID");
            tableMapping.ColumnMappings.Add("RoofRPark", "RoofRPark");
            tableMapping.ColumnMappings.Add("assumeKey", "assumeKey");
            tableMapping.ColumnMappings.Add("TimeFrame", "TimeFrame");
            tableMapping.ColumnMappings.Add("ApplyAreaTF", "ApplyAreaTF");
            tableMapping.ColumnMappings.Add("ValidFromDate", "ValidFromDate");
            tableMapping.ColumnMappings.Add("ValidToDate", "ValidToDate");
            tableMapping.ColumnMappings.Add("SqFt", "SqFt");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            tableMapping.ColumnMappings.Add("AppendDate", "AppendDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM `mst_ic_Drywell_ac` WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `dscID` IS NULL) OR (`dscID` = ?)) AND ((? = 1 AND `ParcelID` IS NULL) OR (`ParcelID` = ?)) AND ((? = 1 AND `DivideID` IS NULL) OR (`DivideID` = ?)) AND ((? = 1 AND `RoofRPark` IS NULL) OR (`RoofRPark` = ?)) AND ((? = 1 AND `assumeKey` IS NULL) OR (`assumeKey` = ?)) AND ((? = 1 AND `TimeFrame` IS NULL) OR (`TimeFrame` = ?)) AND ((? = 1 AND `ApplyAreaTF` IS NULL) OR (`ApplyAreaTF` = ?)) AND ((? = 1 AND `ValidFromDate` IS NULL) OR (`ValidFromDate` = ?)) AND ((? = 1 AND `ValidToDate` IS NULL) OR (`ValidToDate` = ?)) AND ((? = 1 AND `SqFt` IS NULL) OR (`SqFt` = ?)) AND ((? = 1 AND `Comment` IS NULL) OR (`Comment` = ?)) AND ((? = 1 AND `AppendDate` IS NULL) OR (`AppendDate` = ?)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RoofRPark", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofRPark", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RoofRPark", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofRPark", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_assumeKey", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "assumeKey", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_assumeKey", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "assumeKey", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TimeFrame", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeFrame", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TimeFrame", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeFrame", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ApplyAreaTF", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ApplyAreaTF", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ApplyAreaTF", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ApplyAreaTF", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ValidFromDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidFromDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ValidFromDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidFromDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ValidToDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidToDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ValidToDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidToDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SqFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SqFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Comment", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comment", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Comment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comment", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AppendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO `mst_ic_Drywell_ac` (`dscID`, `ParcelID`, `DivideID`, `RoofRPark`, `a" +
                "ssumeKey`, `TimeFrame`, `ApplyAreaTF`, `ValidFromDate`, `ValidToDate`, `SqFt`, `" +
                "Comment`, `AppendDate`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RoofRPark", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofRPark", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("assumeKey", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "assumeKey", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TimeFrame", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeFrame", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ApplyAreaTF", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ApplyAreaTF", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ValidFromDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidFromDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ValidToDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidToDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SqFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Comment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comment", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new global::System.Data.OleDb.OleDbCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE `mst_ic_Drywell_ac` SET `dscID` = ?, `ParcelID` = ?, `DivideID` = ?, `RoofRPark` = ?, `assumeKey` = ?, `TimeFrame` = ?, `ApplyAreaTF` = ?, `ValidFromDate` = ?, `ValidToDate` = ?, `SqFt` = ?, `Comment` = ?, `AppendDate` = ? WHERE ((`MAPINFO_ID` = ?) AND ((? = 1 AND `dscID` IS NULL) OR (`dscID` = ?)) AND ((? = 1 AND `ParcelID` IS NULL) OR (`ParcelID` = ?)) AND ((? = 1 AND `DivideID` IS NULL) OR (`DivideID` = ?)) AND ((? = 1 AND `RoofRPark` IS NULL) OR (`RoofRPark` = ?)) AND ((? = 1 AND `assumeKey` IS NULL) OR (`assumeKey` = ?)) AND ((? = 1 AND `TimeFrame` IS NULL) OR (`TimeFrame` = ?)) AND ((? = 1 AND `ApplyAreaTF` IS NULL) OR (`ApplyAreaTF` = ?)) AND ((? = 1 AND `ValidFromDate` IS NULL) OR (`ValidFromDate` = ?)) AND ((? = 1 AND `ValidToDate` IS NULL) OR (`ValidToDate` = ?)) AND ((? = 1 AND `SqFt` IS NULL) OR (`SqFt` = ?)) AND ((? = 1 AND `Comment` IS NULL) OR (`Comment` = ?)) AND ((? = 1 AND `AppendDate` IS NULL) OR (`AppendDate` = ?)))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("RoofRPark", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofRPark", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("assumeKey", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "assumeKey", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("TimeFrame", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeFrame", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ApplyAreaTF", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ApplyAreaTF", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ValidFromDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidFromDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("ValidToDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidToDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("SqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SqFt", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Comment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comment", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_MAPINFO_ID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "MAPINFO_ID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_dscID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "dscID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ParcelID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ParcelID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_DivideID", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "DivideID", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_RoofRPark", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofRPark", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_RoofRPark", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "RoofRPark", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_assumeKey", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "assumeKey", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_assumeKey", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "assumeKey", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_TimeFrame", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeFrame", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_TimeFrame", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TimeFrame", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ApplyAreaTF", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ApplyAreaTF", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ApplyAreaTF", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ApplyAreaTF", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ValidFromDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidFromDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ValidFromDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidFromDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_ValidToDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidToDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_ValidToDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ValidToDate", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_SqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SqFt", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_SqFt", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SqFt", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_Comment", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comment", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_Comment", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comment", global::System.Data.DataRowVersion.Original, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("IsNull_AppendDate", global::System.Data.OleDb.OleDbType.Integer, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, true, null));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.OleDb.OleDbParameter("Original_AppendDate", global::System.Data.OleDb.OleDbType.VarWChar, 0, global::System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "AppendDate", global::System.Data.DataRowVersion.Original, false, null));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.OleDb.OleDbConnection();
            this._connection.ConnectionString = global::DSCUpdater.Properties.Settings.Default.MasterDataConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.OleDb.OleDbCommand[1];
            this._commandCollection[0] = new global::System.Data.OleDb.OleDbCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     mst_ic_Drywell_ac.*\r\nFROM         mst_ic_Drywell_ac";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ProjectDataSet.MstIcDrywellDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ProjectDataSet.MstIcDrywellDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ProjectDataSet.MstIcDrywellDataTable dataTable = new ProjectDataSet.MstIcDrywellDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet.MstIcDrywellDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ProjectDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MstIcDrywell");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MAPINFO_ID, global::System.Nullable<int> Original_dscID, global::System.Nullable<int> Original_ParcelID, global::System.Nullable<int> Original_DivideID, string Original_RoofRPark, string Original_assumeKey, string Original_TimeFrame, string Original_ApplyAreaTF, string Original_ValidFromDate, string Original_ValidToDate, global::System.Nullable<int> Original_SqFt, string Original_Comment, string Original_AppendDate) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_dscID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_dscID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((Original_ParcelID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_ParcelID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_DivideID.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_DivideID.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_RoofRPark == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_RoofRPark));
            }
            if ((Original_assumeKey == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_assumeKey));
            }
            if ((Original_TimeFrame == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_TimeFrame));
            }
            if ((Original_ApplyAreaTF == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_ApplyAreaTF));
            }
            if ((Original_ValidFromDate == null)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_ValidFromDate));
            }
            if ((Original_ValidToDate == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_ValidToDate));
            }
            if ((Original_SqFt.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_SqFt.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((Original_Comment == null)) {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[22].Value = ((string)(Original_Comment));
            }
            if ((Original_AppendDate == null)) {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[24].Value = ((string)(Original_AppendDate));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> dscID, global::System.Nullable<int> ParcelID, global::System.Nullable<int> DivideID, string RoofRPark, string assumeKey, string TimeFrame, string ApplyAreaTF, string ValidFromDate, string ValidToDate, global::System.Nullable<int> SqFt, string Comment, string AppendDate) {
            if ((dscID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(dscID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ParcelID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ParcelID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((DivideID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(DivideID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((RoofRPark == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(RoofRPark));
            }
            if ((assumeKey == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(assumeKey));
            }
            if ((TimeFrame == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(TimeFrame));
            }
            if ((ApplyAreaTF == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ApplyAreaTF));
            }
            if ((ValidFromDate == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ValidFromDate));
            }
            if ((ValidToDate == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(ValidToDate));
            }
            if ((SqFt.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(SqFt.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Comment == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Comment));
            }
            if ((AppendDate == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(AppendDate));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> dscID, 
                    global::System.Nullable<int> ParcelID, 
                    global::System.Nullable<int> DivideID, 
                    string RoofRPark, 
                    string assumeKey, 
                    string TimeFrame, 
                    string ApplyAreaTF, 
                    string ValidFromDate, 
                    string ValidToDate, 
                    global::System.Nullable<int> SqFt, 
                    string Comment, 
                    string AppendDate, 
                    int Original_MAPINFO_ID, 
                    global::System.Nullable<int> Original_dscID, 
                    global::System.Nullable<int> Original_ParcelID, 
                    global::System.Nullable<int> Original_DivideID, 
                    string Original_RoofRPark, 
                    string Original_assumeKey, 
                    string Original_TimeFrame, 
                    string Original_ApplyAreaTF, 
                    string Original_ValidFromDate, 
                    string Original_ValidToDate, 
                    global::System.Nullable<int> Original_SqFt, 
                    string Original_Comment, 
                    string Original_AppendDate) {
            if ((dscID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(dscID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((ParcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ParcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((DivideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(DivideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((RoofRPark == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(RoofRPark));
            }
            if ((assumeKey == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(assumeKey));
            }
            if ((TimeFrame == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(TimeFrame));
            }
            if ((ApplyAreaTF == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ApplyAreaTF));
            }
            if ((ValidFromDate == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(ValidFromDate));
            }
            if ((ValidToDate == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(ValidToDate));
            }
            if ((SqFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(SqFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Comment == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Comment));
            }
            if ((AppendDate == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(AppendDate));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_MAPINFO_ID));
            if ((Original_dscID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_dscID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_ParcelID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_ParcelID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_DivideID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_DivideID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_RoofRPark == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_RoofRPark));
            }
            if ((Original_assumeKey == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_assumeKey));
            }
            if ((Original_TimeFrame == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_TimeFrame));
            }
            if ((Original_ApplyAreaTF == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_ApplyAreaTF));
            }
            if ((Original_ValidFromDate == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_ValidFromDate));
            }
            if ((Original_ValidToDate == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_ValidToDate));
            }
            if ((Original_SqFt.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_SqFt.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((Original_Comment == null)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[34].Value = ((string)(Original_Comment));
            }
            if ((Original_AppendDate == null)) {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[36].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[35].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_AppendDate));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QueriesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.IDbCommand[] _commandCollection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.IDbCommand[23];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandText = @"UPDATE    mst_ic_DiscoVeg_ac
SET              SqFt = DSCEDITAppendTable.new_park_disco_ic_area_sqft
FROM         mst_ic_DiscoVeg_ac INNER JOIN
                      DSCEDITAppendTable ON mst_ic_DiscoVeg_ac.dscID = DSCEDITAppendTable.dsc_id
WHERE     (mst_ic_DiscoVeg_ac.RoofRPark = N'P') AND (mst_ic_DiscoVeg_ac.assumekey = N'DDEX') AND (mst_ic_DiscoVeg_ac.TimeFrame = N'EX') AND 
                      (mst_ic_DiscoVeg_ac.ApplyAreaTF = N'EX')";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[0])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandText = @"UPDATE    mst_ic_Drywell_ac
SET              SqFt = new_park_drywell_ic_area, TimeFrame =, ApplyAreaTF =
FROM         mst_ic_Drywell_ac INNER JOIN
                      DSCEDITAppendTable ON mst_ic_Drywell_ac.dscID = DSCEDITAppendTable.dsc_id
WHERE     (mst_ic_Drywell_ac.RoofRPark = N'P') AND (mst_ic_Drywell_ac.assumeKey = N'DDEX') AND (mst_ic_Drywell_ac.TimeFrame = N'EX') AND 
                      (mst_ic_Drywell_ac.ApplyAreaTF = N'EX')";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[1])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandText = @"UPDATE    mst_ic_DiscoVeg_ac
SET              SqFt = DSCEDITAppendTable.new_roof_disco_ic_area_sqft
FROM         mst_ic_DiscoVeg_ac INNER JOIN
                      DSCEDITAppendTable ON mst_ic_DiscoVeg_ac.dscID = DSCEDITAppendTable.dsc_id
WHERE     (mst_ic_DiscoVeg_ac.RoofRPark = N'R') AND (mst_ic_DiscoVeg_ac.assumekey = N'DDEX') AND (mst_ic_DiscoVeg_ac.TimeFrame = N'EX') AND 
                      (mst_ic_DiscoVeg_ac.ApplyAreaTF = N'EX')";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[2])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).CommandText = @"UPDATE    mst_ic_Drywell_ac
SET              SqFt = DSCEDITAppendTable.new_roof_drywell_ic_area_sqft, RoofRPark =, assumeKey =, TimeFrame =, ApplyAreaTF =
FROM         mst_ic_Drywell_ac INNER JOIN
                      DSCEDITAppendTable ON mst_ic_Drywell_ac.dscID = DSCEDITAppendTable.dsc_id
WHERE     (mst_ic_Drywell_ac.RoofRPark = N'R') AND (mst_ic_Drywell_ac.assumeKey = N'DDEX') AND (mst_ic_Drywell_ac.TimeFrame = N'EX') AND 
                      (mst_ic_Drywell_ac.ApplyAreaTF = N'EX')";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[3])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).CommandText = @"UPDATE    mst_DSC_ac
SET              surveyedPkAreaSqft = DSCEDITAppendTable.new_park_area_sqft, parkAreaUpdateFlag = 1
FROM         mst_DSC_ac INNER JOIN
                      DSCEDITAppendTable ON mst_DSC_ac.DSCID = DSCEDITAppendTable.dsc_id AND 
                      mst_DSC_ac.PkAreaFtEX <> DSCEDITAppendTable.new_park_area_sqft";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[4])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).CommandText = @"UPDATE    mst_DSC_ac
SET              surveyedRfAreaSqFt = DSCEDITAppendTable.new_roof_area_sqft, roofAreaUpdateFlag = 1
FROM         mst_DSC_ac INNER JOIN
                      DSCEDITAppendTable ON mst_DSC_ac.DSCID = DSCEDITAppendTable.dsc_id AND 
                      mst_DSC_ac.RfAreaFtEX <> DSCEDITAppendTable.new_roof_area_sqft";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[5])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).CommandText = @"UPDATE    DSCEDITAppendTable
SET              old_park_disco_ic_area_sqft = mst_ic_DiscoVeg_ac.SqFt
FROM         DSCEDITAppendTable INNER JOIN
                      mst_ic_DiscoVeg_ac ON DSCEDITAppendTable.dsc_id = mst_ic_DiscoVeg_ac.dscID
WHERE     (mst_ic_DiscoVeg_ac.TimeFrame = N'EX') AND (mst_ic_DiscoVeg_ac.ApplyAreaTF = N'EX') AND (mst_ic_DiscoVeg_ac.RoofRPark = N'P') AND 
                      (mst_ic_DiscoVeg_ac.assumekey = N'DDEX')";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[6])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).CommandText = @"UPDATE    DSCEDITAppendTable
SET              old_park_drywell_ic_area_sqft = mst_ic_Drywell_ac.SqFt
FROM         DSCEDITAppendTable INNER JOIN
                      mst_ic_Drywell_ac ON DSCEDITAppendTable.dsc_id = mst_ic_Drywell_ac.dscID
WHERE     (mst_ic_Drywell_ac.ApplyAreaTF = N'EX') AND (mst_ic_Drywell_ac.TimeFrame = N'EX') AND (mst_ic_Drywell_ac.assumeKey = N'DDEX') AND 
                      (mst_ic_Drywell_ac.RoofRPark = N'P')";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[7])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[8] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[8])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[8])).CommandText = @"UPDATE    DSCEDITAppendTable
SET              old_roof_disco_ic_area_sqft = mst_ic_DiscoVeg_ac.SqFt
FROM         DSCEDITAppendTable INNER JOIN
                      mst_ic_DiscoVeg_ac ON DSCEDITAppendTable.dsc_id = mst_ic_DiscoVeg_ac.dscID
WHERE     (mst_ic_DiscoVeg_ac.RoofRPark = N'R') AND (mst_ic_DiscoVeg_ac.assumekey = N'DDEX') AND (mst_ic_DiscoVeg_ac.TimeFrame = N'EX') AND 
                      (mst_ic_DiscoVeg_ac.ApplyAreaTF = N'EX')";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[8])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[9] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).CommandText = @"UPDATE    DSCEDITAppendTable
SET              old_roof_drywell_ic_area_sqft = mst_ic_Drywell_ac.SqFt
FROM         DSCEDITAppendTable INNER JOIN
                      mst_ic_Drywell_ac ON DSCEDITAppendTable.dsc_id = mst_ic_Drywell_ac.dscID
WHERE     (mst_ic_Drywell_ac.ApplyAreaTF = N'EX') AND (mst_ic_Drywell_ac.TimeFrame = N'EX') AND (mst_ic_Drywell_ac.assumeKey = N'DDEX') AND 
                      (mst_ic_Drywell_ac.RoofRPark = N'R')";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[9])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[10] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).CommandText = @"INSERT INTO DSCEDIT
SELECT     dsc_edit_id, edit_id, edit_date, edited_by, rno, dsc_id, old_roof_area_sqft, new_roof_area_sqft, new_roof_disco_ic_area_sqft, 
                      old_roof_disco_ic_area_sqft, old_roof_drywell_ic_area_sqft, new_roof_drywell_ic_area_sqft, old_park_area_sqft, new_park_area_sqft, 
                      old_park_disco_ic_area_sqft, new_park_disco_ic_area_sqft, old_park_drywell_ic_area_sqft, new_park_drywell_ic_area_sqft
FROM         DSCEDITAppendTable";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[10])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[11] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).CommandText = @"INSERT INTO mst_ic_DiscoVeg_ac
                      (dscID)
SELECT     DSCEDITAppendTable.dsc_id
FROM         DSCEDITAppendTable LEFT OUTER JOIN
                      mst_ic_DiscoVeg_ac AS mst_ic_DiscoVeg_ac ON DSCEDITAppendTable.dsc_id = mst_ic_DiscoVeg_ac.dscID
WHERE     (mst_ic_DiscoVeg_ac.dscID IS NULL) AND (DSCEDITAppendTable.new_park_disco_ic_area_sqft <> 0)";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[11])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[12] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).CommandText = @"INSERT INTO mst_ic_Drywell_ac
                      (dscID)
SELECT     DSCEDITAppendTable.dsc_id
FROM         DSCEDITAppendTable LEFT OUTER JOIN
                      mst_ic_Drywell_ac AS mst_ic_Drywell_ac ON DSCEDITAppendTable.dsc_id = mst_ic_Drywell_ac.dscID
WHERE     (mst_ic_Drywell_ac.dscID IS NULL) AND (DSCEDITAppendTable.new_park_drywell_ic_area_sqft <> 0)";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[12])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[13] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).CommandText = @"INSERT INTO mst_ic_Drywell_ac
                      (dscID)
SELECT     DSCEDITAppendTable.dsc_id
FROM         DSCEDITAppendTable LEFT OUTER JOIN
                      mst_ic_Drywell_ac AS mst_ic_Drywell_ac ON DSCEDITAppendTable.dsc_id = mst_ic_Drywell_ac.dscID
WHERE     (mst_ic_Drywell_ac.dscID IS NULL) AND (DSCEDITAppendTable.new_roof_drywell_ic_area_sqft <> 0)";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[13])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[14] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).CommandText = @"INSERT INTO mst_ic_DiscoVeg_ac
                      (dscID)
SELECT     DSCEDITAppendTable.dsc_id
FROM         DSCEDITAppendTable LEFT OUTER JOIN
                      mst_ic_DiscoVeg_ac AS mst_ic_DiscoVeg_ac ON DSCEDITAppendTable.dsc_id = mst_ic_DiscoVeg_ac.dscID
WHERE     (mst_ic_DiscoVeg_ac.dscID IS NULL) AND (DSCEDITAppendTable.new_roof_drywell_ic_area_sqft <> 0)";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[14])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[15] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).CommandText = @"UPDATE    mst_ic_DiscoVeg_ac
SET              ParcelID = LEFT(mst_ic_DiscoVeg_ac.dscID, 6), DivideID = RIGHT(mst_ic_DiscoVeg_ac.dscID, 1), RoofRPark = N'P', assumekey = N'DDEX', 
                      TimeFrame = N'EX', ApplyAreaTF = N'EX', ValidFromDate = N'1/1/1900', ValidToDate = N'1/1/1990', 
                      SqFt = DSCEDITAppendTable.new_park_disco_ic_area_sqft, Effectiveness = 0.7, Comment = N'DSCEditor', AppendDate = N'1/1/1900'
FROM         mst_ic_DiscoVeg_ac INNER JOIN
                      DSCEDITAppendTable ON mst_ic_DiscoVeg_ac.dscID = DSCEDITAppendTable.dsc_id";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[15])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[16] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[16])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[16])).CommandText = @"UPDATE    mst_ic_Drywell_ac
SET              ParcelID = Left(dscID,6), DivideID = Right(dscID,1), RoofRPark = N'P', assumeKey = N'DDEX', TimeFrame = N'EX', ApplyAreaTF = N'EX', ValidFromDate = N'1/1/1900', 
                      ValidToDate = N'1/1/1900', SqFt = DSCEDITAppendTable.new_park_drywell_ic_area_sqft, Comment = N'DSCEditor', AppendDate = N'1/1/1900'
FROM         mst_ic_Drywell_ac INNER JOIN
                      DSCEDITAppendTable ON mst_ic_Drywell_ac.dscID = DSCEDITAppendTable.dsc_id
WHERE     (DSCEDITAppendTable.new_park_drywell_ic_area_sqft <> 0)";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[16])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[17] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[17])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[17])).CommandText = @"UPDATE    mst_ic_DiscoVeg_ac
SET              ParcelID = Left(dscID,6), DivideID = Right(dscID,1), RoofRPark = N'R', assumekey = N'DDEX', TimeFrame = N'EX', ApplyAreaTF = N'EX', ValidFromDate = N'1/1/1900', 
                      ValidToDate = N'1/1/1900', SqFt = DSCEDITAppendTable.new_roof_disco_ic_area_sqft, Effectiveness = 0.7, Comment = N'DSCEditor', 
                      AppendDate = N'1/1/1900'
FROM         mst_ic_DiscoVeg_ac INNER JOIN
                      DSCEDITAppendTable ON mst_ic_DiscoVeg_ac.dscID = DSCEDITAppendTable.dsc_id
WHERE     (DSCEDITAppendTable.new_roof_disco_ic_area_sqft <> 0)";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[17])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[18] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[18])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[18])).CommandText = @"UPDATE    mst_ic_Drywell_ac
SET              ParcelID = Left(dscID,6), DivideID = Right(dscID,1), RoofRPark = N'R', assumeKey = N'DDEX', TimeFrame = N'EX', ApplyAreaTF = N'EX', ValidFromDate = N'1/1/1900', 
                      ValidToDate = N'1/1/1900', SqFt = DSCEDITAppendTable.new_roof_drywell_ic_area_sqft, Comment = N'DSCEditor', AppendDate = N'1/1/1900'
FROM         mst_ic_Drywell_ac INNER JOIN
                      DSCEDITAppendTable ON mst_ic_Drywell_ac.dscID = DSCEDITAppendTable.dsc_id
WHERE     (DSCEDITAppendTable.new_roof_drywell_ic_area_sqft <> 0)";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[18])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[19] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[19])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[19])).CommandText = "SELECT     USERUPDATE.dsc_id\r\nFROM         mst_DSC_ac RIGHT OUTER JOIN\r\n         " +
                "             USERUPDATE ON mst_DSC_ac.DSCID = USERUPDATE.dsc_id\r\nWHERE     (mst_" +
                "DSC_ac.DSCID IS NULL)";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[19])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[20] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[20])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[20])).CommandText = "DELETE FROM DSCEDITAppendTable";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[20])).CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[21] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[21])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[21])).CommandText = "dbo.SelectUpdatesNotInMasterDSC";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[21])).CommandType = global::System.Data.CommandType.StoredProcedure;
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[21])).Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RETURN_VALUE", global::System.Data.SqlDbType.Variant, 0, global::System.Data.ParameterDirection.ReturnValue, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[22] = new global::System.Data.SqlClient.SqlCommand();
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[22])).Connection = new global::System.Data.SqlClient.SqlConnection(global::DSCUpdater.Properties.Settings.Default.DscEditorConnectionString);
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[22])).CommandText = @"INSERT INTO DSCEDITAppendTable
                      (dsc_edit_id, edit_id, edit_date, edited_by, rno, dsc_id, new_roof_area_sqft, old_roof_disco_ic_area_sqft, new_roof_disco_ic_area_sqft, 
                      old_park_area_sqft, new_park_area_sqft, old_park_disco_ic_area_sqft, new_park_disco_ic_area_sqft, old_park_drywell_ic_area_sqft, 
                      new_park_drywell_ic_area_sqft)
SELECT     0 AS dsc_edit_id, 0 AS edit_id, 0 AS edit_date, curDate AS edited_by, mst_DSC_ac.RNO AS rno, USERUPDATE.dsc_id, 0 AS new_roof_area_sqft, 
                      mst_DSC_ac.RfAreaFtEX AS old_roof_disco_ic_area_sqft, 0 AS new_roof_disco_ic_area_sqft, mst_DSC_ac.PkAreaFtEX AS old_park_area_sqft, 0 AS new_park_area_sqft, 
                      0 AS old_park_disco_ic_area_sqft, 0 AS new_park_disco_ic_area_sqft, 0 AS old_park_drywell_ic_area_sqft, 0 AS new_park_drywell_ic_area_sqft
FROM         USERUPDATE INNER JOIN
                      mst_DSC_ac ON USERUPDATE.dsc_id = mst_DSC_ac.DSCID; 
";
            ((global::System.Data.SqlClient.SqlCommand)(this._commandCollection[22])).CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateCurrentParkDISCORecords() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[0]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateCurrentParkDrywellRecords() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[1]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateCurrentRoofDISCORecords() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[2]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateCurrentRoofDrywellRecords() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[3]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateMasterParkArea() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[4]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateMasterRoofArea() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[5]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateOldParkDISCOICArea() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[6]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateOldParkDrywellICArea() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[7]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateOldRoofDISCOICArea() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[8]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateOldRoofDrywellICArea() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[9]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int Append2DSCEDIT() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[10]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AppendNewParkDISCORecords() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[11]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AppendNewParkDrywellRecords() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[12]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AppendNewRoofDrywellRecords() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[13]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AppendNewRoofDISCORecords() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[14]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateNewParkDISCORecords() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[15]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateNewParkDrywellRecords() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[16]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateNewRoofDISCORecords() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[17]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateNewRoofDrywellRecords() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[18]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SelectUpdatesNotInMasterDSC() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[19]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteUpdateAppendTable() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[20]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SelectUpdNotInMasterDSC() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[21]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int Append2DSCEDITAppendTable() {
            global::System.Data.SqlClient.SqlCommand command = ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[22]));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private SESSIONTableAdapter _sESSIONTableAdapter;
        
        private USERUPDATETableAdapter _uSERUPDATETableAdapter;
        
        private DSCEDITAppendTableTableAdapter _dSCEDITAppendTableTableAdapter;
        
        private DSCEDITTableAdapter _dSCEDITTableAdapter;
        
        private MstDscTableAdapter _mstDscTableAdapter;
        
        private MstIcDiscoVegTableAdapter _mstIcDiscoVegTableAdapter;
        
        private MstIcDrywellTableAdapter _mstIcDrywellTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public SESSIONTableAdapter SESSIONTableAdapter {
            get {
                return this._sESSIONTableAdapter;
            }
            set {
                this._sESSIONTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public USERUPDATETableAdapter USERUPDATETableAdapter {
            get {
                return this._uSERUPDATETableAdapter;
            }
            set {
                this._uSERUPDATETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public DSCEDITAppendTableTableAdapter DSCEDITAppendTableTableAdapter {
            get {
                return this._dSCEDITAppendTableTableAdapter;
            }
            set {
                this._dSCEDITAppendTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public DSCEDITTableAdapter DSCEDITTableAdapter {
            get {
                return this._dSCEDITTableAdapter;
            }
            set {
                this._dSCEDITTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MstDscTableAdapter MstDscTableAdapter {
            get {
                return this._mstDscTableAdapter;
            }
            set {
                this._mstDscTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MstIcDiscoVegTableAdapter MstIcDiscoVegTableAdapter {
            get {
                return this._mstIcDiscoVegTableAdapter;
            }
            set {
                this._mstIcDiscoVegTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public MstIcDrywellTableAdapter MstIcDrywellTableAdapter {
            get {
                return this._mstIcDrywellTableAdapter;
            }
            set {
                this._mstIcDrywellTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._sESSIONTableAdapter != null) 
                            && (this._sESSIONTableAdapter.Connection != null))) {
                    return this._sESSIONTableAdapter.Connection;
                }
                if (((this._uSERUPDATETableAdapter != null) 
                            && (this._uSERUPDATETableAdapter.Connection != null))) {
                    return this._uSERUPDATETableAdapter.Connection;
                }
                if (((this._dSCEDITAppendTableTableAdapter != null) 
                            && (this._dSCEDITAppendTableTableAdapter.Connection != null))) {
                    return this._dSCEDITAppendTableTableAdapter.Connection;
                }
                if (((this._dSCEDITTableAdapter != null) 
                            && (this._dSCEDITTableAdapter.Connection != null))) {
                    return this._dSCEDITTableAdapter.Connection;
                }
                if (((this._mstDscTableAdapter != null) 
                            && (this._mstDscTableAdapter.Connection != null))) {
                    return this._mstDscTableAdapter.Connection;
                }
                if (((this._mstIcDiscoVegTableAdapter != null) 
                            && (this._mstIcDiscoVegTableAdapter.Connection != null))) {
                    return this._mstIcDiscoVegTableAdapter.Connection;
                }
                if (((this._mstIcDrywellTableAdapter != null) 
                            && (this._mstIcDrywellTableAdapter.Connection != null))) {
                    return this._mstIcDrywellTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._sESSIONTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._uSERUPDATETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dSCEDITAppendTableTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._dSCEDITTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._mstDscTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._mstIcDiscoVegTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._mstIcDrywellTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(ProjectDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._mstIcDiscoVegTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MstIcDiscoVeg.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mstIcDiscoVegTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._mstDscTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MstDsc.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mstDscTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._mstIcDrywellTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MstIcDrywell.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mstIcDrywellTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._uSERUPDATETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.USERUPDATE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._uSERUPDATETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._sESSIONTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.SESSION.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._sESSIONTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dSCEDITTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DSCEDIT.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dSCEDITTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._dSCEDITAppendTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.DSCEDITAppendTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._dSCEDITAppendTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(ProjectDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._mstIcDiscoVegTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MstIcDiscoVeg.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mstIcDiscoVegTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._mstDscTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MstDsc.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mstDscTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._mstIcDrywellTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MstIcDrywell.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mstIcDrywellTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._uSERUPDATETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.USERUPDATE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._uSERUPDATETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._sESSIONTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.SESSION.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._sESSIONTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dSCEDITTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DSCEDIT.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dSCEDITTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._dSCEDITAppendTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.DSCEDITAppendTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._dSCEDITAppendTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(ProjectDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._dSCEDITAppendTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DSCEDITAppendTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dSCEDITAppendTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._dSCEDITTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.DSCEDIT.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._dSCEDITTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._sESSIONTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.SESSION.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._sESSIONTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._uSERUPDATETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.USERUPDATE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._uSERUPDATETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._mstIcDrywellTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MstIcDrywell.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mstIcDrywellTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._mstDscTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MstDsc.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mstDscTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._mstIcDiscoVegTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MstIcDiscoVeg.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mstIcDiscoVegTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(ProjectDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._sESSIONTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._sESSIONTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._uSERUPDATETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._uSERUPDATETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._dSCEDITAppendTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._dSCEDITAppendTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._dSCEDITTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._dSCEDITTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._mstDscTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._mstDscTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._mstIcDiscoVegTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._mstIcDiscoVegTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._mstIcDrywellTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._mstIcDrywellTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._sESSIONTableAdapter != null)) {
                    revertConnections.Add(this._sESSIONTableAdapter, this._sESSIONTableAdapter.Connection);
                    this._sESSIONTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._sESSIONTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._sESSIONTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._sESSIONTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._sESSIONTableAdapter.Adapter);
                    }
                }
                if ((this._uSERUPDATETableAdapter != null)) {
                    revertConnections.Add(this._uSERUPDATETableAdapter, this._uSERUPDATETableAdapter.Connection);
                    this._uSERUPDATETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._uSERUPDATETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._uSERUPDATETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._uSERUPDATETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._uSERUPDATETableAdapter.Adapter);
                    }
                }
                if ((this._dSCEDITAppendTableTableAdapter != null)) {
                    revertConnections.Add(this._dSCEDITAppendTableTableAdapter, this._dSCEDITAppendTableTableAdapter.Connection);
                    this._dSCEDITAppendTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._dSCEDITAppendTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._dSCEDITAppendTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dSCEDITAppendTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dSCEDITAppendTableTableAdapter.Adapter);
                    }
                }
                if ((this._dSCEDITTableAdapter != null)) {
                    revertConnections.Add(this._dSCEDITTableAdapter, this._dSCEDITTableAdapter.Connection);
                    this._dSCEDITTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._dSCEDITTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._dSCEDITTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._dSCEDITTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._dSCEDITTableAdapter.Adapter);
                    }
                }
                if ((this._mstDscTableAdapter != null)) {
                    revertConnections.Add(this._mstDscTableAdapter, this._mstDscTableAdapter.Connection);
                    this._mstDscTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._mstDscTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._mstDscTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mstDscTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mstDscTableAdapter.Adapter);
                    }
                }
                if ((this._mstIcDiscoVegTableAdapter != null)) {
                    revertConnections.Add(this._mstIcDiscoVegTableAdapter, this._mstIcDiscoVegTableAdapter.Connection);
                    this._mstIcDiscoVegTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._mstIcDiscoVegTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._mstIcDiscoVegTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mstIcDiscoVegTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mstIcDiscoVegTableAdapter.Adapter);
                    }
                }
                if ((this._mstIcDrywellTableAdapter != null)) {
                    revertConnections.Add(this._mstIcDrywellTableAdapter, this._mstIcDrywellTableAdapter.Connection);
                    this._mstIcDrywellTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(workConnection));
                    this._mstIcDrywellTableAdapter.Transaction = ((global::System.Data.OleDb.OleDbTransaction)(workTransaction));
                    if (this._mstIcDrywellTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mstIcDrywellTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mstIcDrywellTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._sESSIONTableAdapter != null)) {
                    this._sESSIONTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._sESSIONTableAdapter]));
                    this._sESSIONTableAdapter.Transaction = null;
                }
                if ((this._uSERUPDATETableAdapter != null)) {
                    this._uSERUPDATETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._uSERUPDATETableAdapter]));
                    this._uSERUPDATETableAdapter.Transaction = null;
                }
                if ((this._dSCEDITAppendTableTableAdapter != null)) {
                    this._dSCEDITAppendTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._dSCEDITAppendTableTableAdapter]));
                    this._dSCEDITAppendTableTableAdapter.Transaction = null;
                }
                if ((this._dSCEDITTableAdapter != null)) {
                    this._dSCEDITTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._dSCEDITTableAdapter]));
                    this._dSCEDITTableAdapter.Transaction = null;
                }
                if ((this._mstDscTableAdapter != null)) {
                    this._mstDscTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._mstDscTableAdapter]));
                    this._mstDscTableAdapter.Transaction = null;
                }
                if ((this._mstIcDiscoVegTableAdapter != null)) {
                    this._mstIcDiscoVegTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._mstIcDiscoVegTableAdapter]));
                    this._mstIcDiscoVegTableAdapter.Transaction = null;
                }
                if ((this._mstIcDrywellTableAdapter != null)) {
                    this._mstIcDrywellTableAdapter.Connection = ((global::System.Data.OleDb.OleDbConnection)(revertConnections[this._mstIcDrywellTableAdapter]));
                    this._mstIcDrywellTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591
'mapbasic filename = SpecialToolPad.mb 


INCLUDE "MapBasic.def"
INCLUDE "Menu.def"
INCLUDE "Icons.def"
INCLUDE "AlternativeWorkbench.def"
INCLUDE "..\Common\trunk\inc\EMGCoordSys.def"
INCLUDE "AddSpecials.def"
INCLUDE "DeleteSpecials.def"
INCLUDE "ModifySpecials.def"

'---------------------------------------------------------
'Starting point for the Special Toolpad
SUB SpecialToolPad 

ONERROR GOTO SkipPad
	CALL ResetAltWorkbench	
	
	Pack Table alt_dsc Graphic Data
	
	Call CreateAppliedLinks
	
	CREATE TABLE VisibleSpecials USING "alt_specLinks"
		FILE gTempDir & "\VisibleSpecials"
	CREATE MAP for VisibleSpecials
	
	CREATE TABLE VisibleModelSpecials USING "mdl_SpecLinks"
		FILE gTempDir & "\VisibleModelSpecials"
	CREATE MAP for VisibleModelSpecials
	
	CALL DeleteInvalidSpecLinks
	CALL DeleteInvalidSpecLinkData
	
	CALL MakeSpecLinksVisible
	CALL MakeAltSpecLinksVisible
	
	RUN APPLICATION gSpecLinkEditingTemplate
	Open Table gAlternativePath & "alt_pumpcurves.TAB" AS alt_pumpcurves
	
	SET distance UNITS "ft"
	SET area UNITS "sq ft"
	
	
	CALL ZoomToLayer("Main Map", "mdl_links_applied")
	
	ALTER BUTTONPAD "Special Link Editing Tools" SHOW	

	SET WINDOW FindWindowIDByName("Main Map") FRONT

EXIT SUB
skipPad:
'	Call Debugnote("SPecialLinkToolpad: "& Err() & " " & Error$())
	PRINT "Toolpad Err: "& Err() & " " & Error$()
	RESUME NEXT

END SUB
'---------------------------------------------------------
SUB InitSpecialToolPad
CREATE BUTTONPAD "Special Link Editing Tools" ID 6 AS
	TOOLBUTTON HELPMSG  "\n Select"		ID 90014	ICON	0	CALLING 1701 
	TOOLBUTTON HELPMSG  "\n Pan/Grabber"	ID 90013	ICON	7	CALLING 1702
	TOOLBUTTON HELPMSG  "\n Zoom In"		ID 90011	ICON	4	CALLING 1705
	TOOLBUTTON HELPMSG  "\n Zoom Out"		ID 90012	ICON	5	CALLING 1706
	PUSHBUTTON HELPMSG  "\n Save Edits"		    		ID 90004	ICON	40	CALLING EditSave		 
	PUSHBUTTON HELPMSG  "\n Revert to Last Save"			ID 90005	ICON	62 FILE gIconFile CALLING EditRevert		 
	 						SEPARATOR		
	PushButton HelpMsg  "\n Add Chicklets" 	ID 90006	Icon	108	File gIconFile Calling AddChicklets			 	 
	 						SEPARATOR	

	PUSHBUTTON HELPMSG  "\n Add New Weir"					ID 91001	ICON	94 FILE gIconFile 	CALLING AddWeir 		
	PUSHBUTTON HELPMSG  "\n Delete Weir"					ID 91004	ICON	96 FILE gIconFile 	CALLING DeleteWeir 
	PUSHBUTTON HELPMSG  "\n Update Weir"					ID 91007	ICON	98 FILE gIconFile 	CALLING ModifyWeir 
								SEPARATOR
	PUSHBUTTON HELPMSG  "\n Add New Orifice"					ID 91002	ICON	82 FILE gIconFile 	CALLING AddOrifice 
	PUSHBUTTON HELPMSG  "\n Delete Orifice"					ID 91005	ICON	84 FILE gIconFile 	CALLING DeleteOrifice 
	PUSHBUTTON HELPMSG  "\n Update Orifice"					ID 91008	ICON	86 FILE gIconFile 	CALLING ModifyOrifice 
								SEPARATOR
	PUSHBUTTON HELPMSG  "\n Add New Pump"					ID 90003	ICON	88 FILE gIconFile 	CALLING AddPump
	PUSHBUTTON HELPMSG  "\n Delete Pump"					ID 91006	ICON	90 FILE gIconFile 	CALLING DeletePump 
	PUSHBUTTON HELPMSG  "\n Update Pump"					ID 91009	ICON	92 FILE gIconFile 	CALLING ModifyPump 

	TITLE "Special Link Editing Tools" 	WIDTH 10	HIDE	Float POSITION(7,1.5) 'units "in"
END SUB		

'--------------------------------------------------------
SUB SplUpdt

	ONERROR GOTO skipSplUpdt

EXIT SUB
skipSplUpdt:	
	CALL DebugNote("Update Crashed - Error: " & Err() & " " & Error$() )
	RESUME NEXT
END SUB
'--------------------------------------------------------
FUNCTION maxAltSpecLinkID() AS Integer
	DIM theMax AS Integer
	DIM nRecsAlt AS Integer
	
	nRecsAlt = tableinfo(alt_speclinks,TAB_INFO_NROWS)

	IF  nRecsAlt = 0  THEN
		theMax = 0
	ELSE
		SELECT max(AltSpecLinkID) FROM alt_speclinks INTO qyMaxAltSpecLinkID NOSELECT
		theMax=qyMaxAltSpecLinkID.col1
		CLOSE TABLE qyMaxAltSpecLinkID		
	END IF
	
	maxAltSpecLinkID = theMax+1

	
END FUNCTION
'--------------------------------------------------------
FUNCTION maxAltSpecLinkDataID() AS Integer
	DIM theMax AS Integer
	DIM nRecsAlt AS Integer
	
	nRecsAlt = tableinfo(alt_speclinkdata,TAB_INFO_NROWS)

	IF  nRecsAlt = 0  THEN
		theMax = 0
	ELSE
		SELECT max(AltSpecLinkDataID) FROM alt_speclinkdata INTO qyMaxAltSpecLinkDataID NOSELECT
		theMax=qyMaxAltSpecLinkDataID.col1
		CLOSE TABLE qyMaxAltSpecLinkDataID		
	END IF
	
	maxAltSpecLinkDataID = theMax+1
	
END FUNCTION
'--------------------------------------------------------
FUNCTION maxAltSLNode() AS String
	DIM theHighest AS String
	DIM nRecsAlt AS Integer
	DIM bMatchFound AS Logical
	DIM theHighestAlpha AS String
	DIM theHighestDigit AS Integer
	
	theHighest = "999ZZZ"
	theHighestAlpha = "ZZZ"
	theHighestDigit = 999
	bMatchFound = false
	
	nRecsAlt = tableinfo(alt_speclinks,TAB_INFO_NROWS)

	IF  nRecsAlt = 0  THEN
		theHighest = "999ZZZ"
		bMatchFound = true
	ELSE
		DO
			IF theHighestDigit < 10 THEN
				theHighest = "00" + Str$(theHighestDigit) + theHighestAlpha
			ELSEIF theHighestDigit < 100 THEN
				theHighest = "0" + Str$(theHighestDigit) + theHighestAlpha
			ELSE
				theHighest = Str$(theHighestDigit) + theHighestAlpha
			END IF
			
			SELECT * FROM alt_speclinks WHERE alt_speclinks.SLNode = theHighest INTO qyAltSpecLinks NOSELECT
			IF tableinfo(qyAltSpecLinks,TAB_INFO_NROWS) = 0 THEN
				bMatchFound = true
			END IF
			CLOSE TABLE qyAltSpecLinks
			IF theHighestDigit = 0 THEN
				theHighestDigit = 999
				theHighestAlpha = GetNextThreeLetterSeries(theHighestAlpha)
			ELSE
				theHighestDigit = theHighestDigit - 1
			END IF
		LOOP UNTIL bMatchFound = true	
	END IF
	
	maxAltSLNode = theHighest
	
END FUNCTION
'--------------------------------------------------------
FUNCTION GetNextThreeLetterSeries(BYVAL theHighestAlpha AS String) AS String
	DIM sCharString1 AS String
	DIM sCharString2 AS String
	DIM sCharString3 AS String
	DIM iStringChar AS SmallInt
	
	sCharString1 = Mid$(theHighestAlpha, 1, 1) '"XAA", the first letter of the sequence
	sCharString2 = Mid$(theHighestAlpha, 2, 1) '"AXA", the second letter of the sequence
	sCharString3 = Mid$(theHighestAlpha, 3, 1) '"AAX", the third letter of the sequence
	
	IF sCharString3 <> "A" THEN
		iStringChar = Asc(sCharString3)
		theHighestAlpha = sCharString1 + sCharString2 + Chr$(iStringChar - 1)
	ELSE
		sCharString3 = "Z"
		IF sCharString2 <> "A" THEN
			iStringChar = Asc(sCharString2)
			theHighestAlpha = sCharString1 + Chr$(iStringChar - 1) + sCharString3
		ELSE
			sCharString2 = "Z"
			IF sCharString3 <> "A" THEN
				iStringChar = Asc(sCharString3)
				theHighestAlpha = Chr$(iStringChar - 1) + sCharString2 + sCharString3 
			ELSE
				PRINT "You have way too many special nodes, my friend"
			END IF
		END IF
	END IF
	
	GetNextThreeLetterSeries = theHighestAlpha
	
END FUNCTION
'--------------------------------------------------------
SUB AddAnotherSchedule
	iAddAnotherSchedule = 1
END SUB
'--------------------------------------------------------
SUB StopAddingSchedules
	iAddAnotherSchedule = 0
END SUB
'--------------------------------------------------------
FUNCTION IsItModified() As Integer
	DIM lIsItModified AS Integer
	DIM iLinkID AS Integer
	DIM numResults AS Integer
	DIM iChoice AS Integer
	DIM iSLID AS Integer
	
	lIsItModified = 0
	'First check to see if there are any special links associated
	'with the model link.  If not then return false.  If there are
	'more than one special links associated with this model link
	'then ask the user which SLID they are trying to modify.
	'Then 
	'this function should check to see if there are any modifications
	'associated with the chosen link.
	
	SELECT * FROM qyTarget INTO theSelection
	
	IF selectioninfo(1)NOT LIKE "%mdl_links%" THEN
		PRINT "IsItModified says we aren't looking at a model link"
		'add and updates only happen to model links
		CLOSE TABLE theSelection
		EXIT FUNCTION
	END IF
	
	IF	Tableinfo(theSelection,TAB_INFO_NROWS)<>1 THEN
		'we can only add or update to one link at a time
		PRINT "IsItModified says we arent looking at only one model link"
		CLOSE TABLE theSelection
		EXIT FUNCTION
	END IF
	
	iLinkID = theSelection.LinkID
	
	SELECT * FROM mdl_SpecLinks WHERE ToLinkID = iLinkID INTO linkMatches
	
	numResults = Tableinfo(linkMatches, TAB_INFO_NROWS)
	IF numResults < 1 THEN
		iSLID = linkMatches.SLID
		IsItModified = iSLID
		CLOSE TABLE theSelection
		CLOSE TABLE linkMatches
		EXIT FUNCTION
	END IF
	
		'show a selection box asking the user which SLID the user
		'intends to modify
	IF	numResults>1 THEN
		DIM I AS Integer
		DIM sChoices AS String
		
		'Create the string for the user to select from in the Listbox
		FOR I = 1 TO numResults - 1
			FETCH REC I FROM linkMatches
			sChoices = sChoices + linkMatches.SLID + ";"
		NEXT
		
		FETCH REC numResults FROM linkMatches
		sChoices = sChoices + linkMatches.SLID
		
		DIALOG   
		TITLE "Select which special link you want to operate on:" POSITION 250,100 
		CONTROL STATICTEXT		ID 8500	POSITION 10,7			WIDTH 200		TITLE "SPECIAL LINK SELECTION FORM"    
		CONTROL STATICTEXT		ID 8480	POSITION 10,30		WIDTH 140		TITLE "SPECIAL LINK ID:" 
		CONTROL LISTBOX TITLE sChoices ID 8470 POSITION 155,30		WIDTH 60 HEIGHT 30 VALUE 1 INTO iChoice
		CONTROL OKBUTTON		ID 8340	POSITION 10,135		WIDTH 45		TITLE "OK"			CALLING SplUpdt 
		
		FETCH REC iChoice FROM linkMatches
	END IF
	
	iSLID = linkMatches.SLID
	
	SELECT * FROM alt_SpecLinks WHERE MdlSpecLinkID = iSLID INTO altMatches
	
	numResults = Tableinfo(altMatches, TAB_INFO_NROWS)
	
	IF numResults < 1 THEN
		lIsItModified = iSLID
		IsItModified = lIsItModified
	ELSE
		lIsItModified = -iSLID
		IsItModified = lIsItModified
	END IF
	
	CLOSE TABLE theSelection
	CLOSE TABLE altMatches
	CLOSE TABLE linkMatches
END FUNCTION
'--------------------------------------------------------
FUNCTION CanWeGiveItANewName() AS String
	DIM sTableName AS String
	DIM iAltLinkID AS Integer
	DIM iMdlLinkID AS Integer
	'This function needs to know:
	'The link we are modifying
	'For any add or update, we will be selecting either alt_links_applied or mdl_links_applied.
	'
	'This link may either be traced using MdlSpecLinkID or AltLinkID.  The best way to find out which of
	'These numbers is useful is to check which one is not zero.  A non-zero value indicates usefulness.
	'If MdlSpecLinkID is useful, then look in mdl_SpecLinks for MdlSpecLinkID = SLID
	'
	'This function will only be called in adds.  Modifications don't need a new SPNode name
	'Find out whether the user is selecting an alt link or a model link:
	SELECT * FROM selection INTO theSelection
	sTableName = SelectionInfo(SEL_INFO_TABLENAME)
	IF sTableName LIKE "%alt_links%" THEN
		'we are using alt_links.  This means that we need to look at the altLinkID in the alt_specLinks
		'table.  Then we search the alt_specLinks table for any other special links which use the same
		'altLinkID.
		iAltLinkID = selection.AltLinkID
		SELECT * FROM alt_speclinks WHERE altLinkID = iAltLinkID INTO SpecMatches
		IF	Tableinfo(SpecMatches,TAB_INFO_NROWS)>0 THEN
			'We have already named this node, so we should keep the name
			CanWeGiveItANewName = SpecMatches.SLNode
		ELSE
			CanWeGiveItANewName = "XXXXXX"
		END IF
	ELSE
		'we are using model links.  Get the LinkID, then search mdlSpecLinks for any matches.  If there
		'are any matches, then we cannot give the node a new name.  If there are no matches, we do not
		'need to look through alt_specLinks for matches because those will only be modifications or
		'deletes.  For now, there is no reason to rename any nodes from the initial model, because
		'the only changes that can happen to model links now is updates or deletes, neither of
		'which require or allow changing the node name
		iMdlLinkID = selection.MdlLinkID
		SELECT * FROM mdl_speclinks WHERE ToLinkID = iMdlLinkID INTO SpecMatches
		IF	Tableinfo(SpecMatches,TAB_INFO_NROWS)>0 THEN
			'We have already named this node, so we should keep the name
			CanWeGiveItANewName = SpecMatches.SLNode
		ELSE
			CanWeGiveItANewName = "XXXXXX"
		END IF
	END IF
	
	CLOSE TABLE SpecMatches
	CLOSE TABLE theSelection
		
END FUNCTION
'--------------------------------------------------------
SUB VisiblePointLocation
	sUSID = qyTarget.USnode
	sDSID = qyTarget.DSnode
	
	SpecialObj= qyTarget.Obj
		
	'get the coordinates of the first point of the pipe we are
	'placing the weir on
	sx1=objectnodex(SpecialObj, 1,1)
	sy1=objectnodey(SpecialObj, 1,1)
	'get the coordinates of the second point of the pipe we are
	'placing the weir on
	sx2=objectnodex(SpecialObj, 1,2)
	sy2=objectnodey(SpecialObj, 1,2)
	
	'get the distance from the first node of the pipe to the second
	'node of the pipe
	dist = Sqr((sx2 - sx1)^2 + (sy2 - sy1)^2)
	
	'recycle sx2 and sy2 as the new coordinates of the special link node
	IF dist*.2 > 50 THEN
		sx2 = sx1 + 50*(sx2-sx1)/dist
		sy2 = sy1 + 50*(sy2-sy1)/dist
	ELSE
		sx2 = sx1 + dist*.2*(sx2-sx1)/dist
		sy2 = sy1 + dist*.2*(sy2-sy1)/dist
	END IF
END SUB
'--------------------------------------------------------
SUB GetIndex
	DIM sTableName AS String
	DIM iAltLinkID AS Integer
	DIM iMdlLinkID AS Integer

	SELECT * FROM qyTarget INTO theSelection
	sTableName = SelectionInfo(SEL_INFO_TABLENAME)
	IF sTableName LIKE "%alt_links%" THEN
		'we are using alt_links.  This means that we need to look at the altLinkID in the alt_specLinks
		'table.  Then we search the alt_specLinks table for any other special links which use the same
		'altLinkID.
		iAltLinkID = selection.AltLinkID
		SELECT MAX(SpecLinkIndex) FROM alt_speclinks WHERE altLinkID = iAltLinkID INTO SpecMatches
		iSLIndex = SpecMatches.COL(1) + 1
	ELSE
		'we are using model links.  Get the LinkID, then search mdlSpecLinks for any matches.  If there
		'are any matches, then we cannot give the node a new name.  If there are no matches, we should
		'look through alt_specLinks to see if there are any special links in there
		iMdlLinkID = selection.MdlLinkID
		SELECT MAX(ToLinkNDX) FROM mdl_speclinks WHERE ToLinkID = iMdlLinkID INTO SpecMatches
		iSLIndex = SpecMatches.COL(1) + 1
	END IF
	
	CLOSE TABLE SpecMatches
	CLOSE TABLE theSelection
		
END SUB
'--------------------------------------------------------
SUB CheckAltModel
	'Are there wetwells in the alternate model
	SELECT AltSpecLinkID FROM alt_speclinkdata WHERE Tag = "ASTORE" INTO qyWetwells5
	IF  tableinfo(qyWetwells5,TAB_INFO_NROWS) > 0 THEN
		'IF YES:	Is the node we are operating on in the list of wetwells in the alternate model?
		SELECT AltLinkID FROM alt_speclinks WHERE AltSpecLinkID = ANY(SELECT * FROM qyWetwells5) INTO qyWetwells6
		SELECT USNode FROM alt_links WHERE USNode = sUSID AND AltLinkID = ANY(SELECT * FROM qyWetwells6) INTO qyWetwells7
		CLOSE TABLE qyWetwells6
		IF  tableinfo(qyWetwells7,TAB_INFO_NROWS) > 0 THEN
			'IF YES:	we do not need a new wetwell
			lWeAlreadyHaveAWetwell = true
			CLOSE TABLE qyWetwells7
		ELSE
			'IF NO :	we need a new wetwell
			lWeAlreadyHaveAWetwell = false
			CLOSE TABLE qyWetwells7
		END IF
	ELSE
		'IF NO : We need a new wetwell
		lWeAlreadyHaveAWetwell = false
	END IF
	CLOSE TABLE qyWetwells5	
END SUB
'--------------------------------------------------------
FUNCTION DeleteCheck(BYVAL sSpecialObject AS String) AS Logical
	DIM iReturnValue AS Integer
	DeleteCheck = true
	IF NOT selectioninfo(1) THEN
		NOTE "Please select a segment to delete from!"
		DeleteCheck = false
		EXIT SUB
	END IF
	
	IF selectioninfo(1) LIKE "%alt_links%" THEN
		IF sSpecialObject = "Orifice" THEN
			iReturnValue = DeleteAltLinkOrifice()
		ELSEIF sSpecialObject = "Weir" THEN
			iReturnValue = DeleteAltLinkWeir()
		ELSEIF sSpecialObject = "Pump" THEN
			iReturnValue = DeleteAltLinkPump()
		END IF
		DeleteCheck = false
		EXIT SUB
	END IF
	
	'The user must select a model link, but since we are operating on special links
	'we must have some way for a user to select which special link we are going to
	'be deleting.  There can be several special links on any given model link.
	'If there is more than one special link attached to a model link,
	'there should be a dialogue box that pops up when the user selects the link
	'asking which link the user wishes to delete.
	IF selectioninfo(1)NOT LIKE "%mdl_links%" AND selectioninfo(1) NOT LIKE "%alt_links%" THEN
		NOTE "Must delete from a model link or alt link!"
		DeleteCheck = false
		EXIT SUB
	END IF
	
	SELECT * FROM selection INTO qyTarget
	
	IF	Tableinfo(qyTarget,TAB_INFO_NROWS)<>1 THEN
		NOTE "Delete operation available to one object at a time!"
		DeleteCheck = false
		CLOSE TABLE qyTarget
		EXIT SUB
	END IF
END FUNCTION
'--------------------------------------------------------
FUNCTION DeleteFromAltSpecialTables(BYVAL SLID AS Integer) AS Integer
	SELECT * FROM alt_speclinks WHERE AltSpecLinkID = SLID INTO Lame
	DELETE FROM Lame
	CLOSE TABLE Lame
	
	SELECT* FROM alt_speclinkdata WHERE AltSpecLinkID = SLID INTO Lame
	DELETE FROM Lame
	CLOSE TABLE Lame
	
	SELECT* FROM VisibleSpecials WHERE AltSpecLinkID = SLID INTO Lame
	DELETE FROM Lame
	CLOSE TABLE Lame
	
	DeleteFromAltSpecialTables = 1
END FUNCTION
'--------------------------------------------------------
FUNCTION ModifiedSelectionDialog() AS Integer
	DIALOG   
		TITLE "Special structure already modified:" POSITION 250,100 
		CONTROL STATICTEXT		ID 8500	POSITION 10,7			WIDTH 200		TITLE "THIS SPECIAL STRUCTURE HAS ALREADY "
		CONTROL STATICTEXT		ID 8500	POSITION 10,17			WIDTH 200		TITLE "BEEN MODIFIED. DO YOU WISH TO DELETE"
		CONTROL STATICTEXT		ID 8500	POSITION 10,27			WIDTH 200		TITLE "A MODIFICATION?"    
		CONTROL OKBUTTON		ID 8340	POSITION 10,135		WIDTH 30		TITLE "YES"			CALLING SplUpdt
		CONTROL CANCELBUTTON		ID 8341	POSITION 155,135		WIDTH 30		TITLE "NO"			CALLING SplUpdt
		
		ModifiedSelectionDialog = 1
END FUNCTION
'--------------------------------------------------------
SUB MakeSpecLinksVisible
	DIM iLinkID AS Integer
	DIM sSpecLinkType AS String
	
	COMMIT TABLE VisibleModelSpecials
	
	Select * From mdl_links_applied Where LinkID = 0 into qyTarget
	
	Fetch First From mdl_SpecLinks
	Do While Not EOT(mdl_SpecLinks)
		iLinkID = mdl_SpecLinks.ToLinkID
		sSpecLinkType = mdl_SpecLinks.SpecLinkType
		
		Select * From mdl_links_applied Where LinkID = iLinkID into qyTarget
	
		'qyTarget must hold the line that begins with the special link
		
		CALL VisiblePointLocation
		INSERT INTO VisibleModelSpecials(OBJ, SpecLinkType)
			VALUES(CreatePoint( sx2, sy2), sSpecLinkType)
	
	Fetch Next From mdl_SpecLinks  
	Loop
	
	COMMIT TABLE VisibleModelSpecials
	CLOSE TABLE qyTarget

END SUB
'--------------------------------------------------------
SUB MakeAltSpecLinksVisible
	DIM iLinkID AS Integer
	DIM iToLink AS Integer
	DIM sSpecLinkType AS String
	DIM sOperation AS String
	DIM iAltSpecLinkID AS Integer
	DIM sSLNode AS String
	DIM iAltLinkID AS Integer
	DIM iSpecLinkIndex AS Integer
	
	COMMIT TABLE VisibleSpecials
	
	Select * From alt_SpecLinks into qyTarget
	Fetch First From alt_SpecLinks
	
	Do While Not EOT(alt_SpecLinks) 
		iToLink = alt_SpecLinks.MdlSpecLinkID
		sSpecLinkType = alt_SpecLinks.SpecLinkType
		sOperation = alt_SpecLinks.Operation
		iAltSpecLinkID = alt_SpecLinks.AltSpecLinkID
		sSLNode = alt_SpecLinks.SLNode
		iAltLinkID = alt_SpecLinks.AltLinkID
		iSpecLinkIndex = alt_SpecLinks.SpecLinkIndex		

		IF iToLink = 0 THEN
			iLinkID = alt_SpecLinks.AltLinkID
		
			Select * From alt_links_applied Where AltLinkID = iLinkID into qyTarget
	
			'qyTarget must hold the line that begins with the special link
		ELSE
			Select * From mdl_SpecLinks Where SLID = iToLink into qyTarget1
			iLinkID = qyTarget1.ToLinkID
			CLOSE TABLE qyTarget1
			Select * From mdl_Links Where LinkID = iLinkID into qyTarget

		END IF
		
		CALL VisiblePointLocation
		INSERT INTO VisibleSpecials(OBJ, SpecLinkType, Operation, AltSpecLinkID, SLNode, AltLinkID, SpecLinkIndex)
			VALUES(CreatePoint( sx2, sy2), sSpecLinkType, sOperation, iAltSpecLinkID, sSLNode, iAltLinkID, iSpecLinkIndex)
	
	Fetch Next From alt_SpecLinks  
	Loop
	
	COMMIT TABLE VisibleSpecials
	CLOSE TABLE qyTarget

END SUB
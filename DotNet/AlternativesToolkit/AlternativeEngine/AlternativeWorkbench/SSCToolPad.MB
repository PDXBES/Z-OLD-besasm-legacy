'mapbasic fillename = DSCtoolpad.mb 
'
'
include "MapBasic.def"
include "Menu.def"
include "Icons.def"
include "AlternativeWorkbench.def"
include "..\Common\trunk\inc\EMGCoordSys.def"

declare sub FindBrokenSSCConnections
declare sub EditSaveSSC
declare sub EditRevertSSC
declare sub MkSSCStubPt
declare sub MkSSCZinger
declare Sub MkSSCZingerFromAltSurfSCID(ByVal UpdateAltSurfSCID as integer)
declare sub MkSSCZingTbl
declare sub MaxAltSurfSCID
declare sub MaxSSCZingID
declare sub SetSSCFLOW
'declare sub SetStormFLOW
declare sub SetSanActive
declare sub SetStormActive
declare sub SetSSCActive
declare sub RefreshSSCZingers
declare sub ToggleSSCLabel
declare sub PointFromDSZinger(ByVal LineObj as object,ByVal fDist as float)
declare Function VerifySSCSelection() as logical
declare Function NodeExists(FindNode as String) as Logical
declare function GetPointFromLink(FindNode as String) as Object
'declare sub RunStr(ByVal FromTbl, FromCol, ColVal, ToTbl as string)

Dim 	MaxSurfSCID, 
	 	MaxZid, 	 	
	 	exAID, 
		exMID,  
		exPID,  
		sscID,
		iLabel
			as integer
Dim 	exDIA, 
		exHGT, 
		exUIE, 
		exDIE, 
		exLEN, 
		LPTx,
		LPTy
			as float
Dim exNGTO as string

dim LOTx,LOTy,dscX,dscY, SANd2s, SDd2s as float
dim stubX, StubY, stubDist as float

Dim 	exDSN,
		exUSN,
		exSOP, 
		exMAT, 
		exSHP, 
		exLTP, 
		exFTP, 
		exSPL, 
		DoStr, 
		sFlowTO		
			as string
Dim 	pObj,
		NodeObj, 
		exObj 
			as object
Dim 	SscReady,
		PipReady 
			as Logical
'---------------------------------------------------------
'Starting point for the SSC Toolpad
sub SSCToolPad
	
	Call SetStdCoordSys()
	Call ResetAltWorkbench	
	Pack Table alt_ssc Graphic Data
	
	Call CreateAppliedLinks
	
	Run Application gSSCEditingTemplate
	
	Set distance units "ft"
	Set area units "sq ft"

	SscReady=0
	PipReady=0 
	
	If Ask("Check for broken surface subcatchment connections? (This may take a while)", "Yes", "No") = True Then
		Call FindBrokenSSCConnections
	End If
	If Ask("Build zingers for alternative surface subcatchments? (This may take a while))", "Yes", "No") = True Then
		Call RefreshSSCZingers
	Else
		Call MkSSCZingTbl
	End If	
				
OnError GOTO skipPad
	Alter ButtonPad "SSC Editing Tools" Show	
				
	Call ZoomToLayer("SSC Main Map", "mdl_SurfSC")

Exit Sub
skipPad:
'	Call Debugnote("DSCpad: "& Err() & " " & Error$())
	Print "Toolpad Err: "& Err() & " " & Error$()
	Resume Next

End Sub
'-------------------------------------------------------------------------------------------------
Sub InitSSCToolPad
	Create ButtonPad "SSC Editing Tools" As 
	ToolButton HelpMsg  "\n Select"		ID 90014	Icon	0	Calling 1701 
	ToolButton HelpMsg  "\n Pan/Grabber"	ID 90013	Icon	7	Calling 1702
	ToolButton HelpMsg  "\n Zoom In"		ID 90011	Icon	4	Calling 1705
	ToolButton HelpMsg  "\n Zoom Out"		ID 90012	Icon	5	Calling 1706
	PushButton HelpMsg  "\n Save Edits"		    		ID 90004	Icon	40	Calling EditSaveSSC		 
	PushButton HelpMsg  "\n Revert to Last Save"			ID 90005	Icon	62 File gIconFile Calling EditRevertSSC		 
'	  						Separator		
	PushButton HelpMsg  "\n Add Chicklets" 	ID 90006	Icon	108	File gIconFile Calling AddChicklets			 			 
  						Separator	
	ToolButton HelpMsg  "\n Redirect SSC Flow"	ID 90008	Icon 78 File gIconFile	Calling SetSSCFLOW 
						Drawmode	DM_CUSTOM_POINT	Cursor	MI_CURSOR_CROSSHAIR										
  						Separator	  								
	PushButton HelpMsg  "\n Activate/Deactivate SSC" ID 90010	Icon 80 File gIconFile Calling SetSSCActive 		  									
						Separator	
	PushButton HelpMsg  "\n Refresh Zingers"	ID 80502	Icon 74 File gIconFile Calling RefreshSSCZingers							
' 		PushButton HelpMsg  "\n Toggle Labels" 	ID 90006	Icon 244	Calling ToggleSSCLabel			 								
'		ToolButton  HelpMsg "\n Split Pipe at Point"    		ID 90009	Icon 64 File sIconFile	Calling SplitPip	
'	  						Drawmode	DM_CUSTOM_POINT	Cursor	MI_CURSOR_CROSSHAIR	
		Title "SSC Editing Tools" 	Width 10	Hide	Float position(7,1.5) 'units "in"			
End Sub
'-------------------------------------------------------------------------------------------------
sub FindBrokenSSCConnections
	dim iQy, sActive, i as integer
		
	Print "Finding broken SSC connections"

	Select * From Mdl_SurfSC, Alt_SSC Where Mdl_SurfSC.SurfSCID = alt_ssc.MdlSurfSCID into QySSC_InAlt
	
	If SelectionInfo(SEL_INFO_NROWS) > 0 Then
		Run Menu Command 311 'M_QUERY_INVERTSELECT
		Select SurfSCID, NGTO, IsSumped From SELECTION into QySSC_NotInAlt
		Commit Table QySSC_NotInAlt as gTempDir & "QySSC_NotInAlt.tab"
		Close Table QySSC_NotInAlt
		Open Table gTempDir & "QySSC_NotInAlt.tab"
	Else
		Select SurfSCID, NGTO, IsSumped From Mdl_SurfSC into qyMdl_SSC
		Commit Table qyMdl_SSC As gTempDir & "QySSC_NotInAlt.tab"
		Close Table qyMdl_SSC
		Open Table gTempDir & "QySSC_NotInAlt.tab"		
	End If	
	Create Index On QySSC_NotInAlt(NGTO)
	Select * From QySSC_NotInAlt Where IsSumped = False Into QySscToCheck
	
	Print "Creating alternatives for broken surface connections."
	For i = 1 To TableInfo(QySscToCheck, TAB_INFO_NROWS)
		Select * From QySscToCheck Where RowId = i into QyCheck
		Dim NodeToFind as String
		NodeToFind = QyCheck.NGTO
		If (NodeExists(NodeToFind )) = False And QyCheck.IsSumped = False Then
			Insert Into alt_ssc ( AltSurfSCID, MdlSurfSCID,NGTO, IsActive) Select 0, COL1, COL2, 0 From QyCheck
		End If
	Next
	
	Close Table QySscToCheck
	Close Table QySSC_InAlt
	Close Table QySSC_NotInAlt
	
	'Select SurfSCID, NGTO From QySSCNotInAlt Where NGTO not in (Select Node from alt_nodes_applied) into QyOrphanAltUS
	'Select SurfSCID, NGTO From QyOrphanAltUS Where NGTO in (Select Node from alt_nodes_applied) into QyTmp
	'Run Menu Command 311 'M_QUERY_INVERTSELECT
	
	'Select SurfSCID, NGTO From SELECTION Where NGTO not in (Select Node from mdl_nodes_applied) into QyOrphanUS
	'Select SurfSCID, NGTO From QyOrphanUS Where NGTO in (Select Node from mdl_nodes_applied) into QyTmp
	'Run Menu Command 311 'M_QUERY_INVERTSELECT
	'Select * From SELECTION Into QyOrphan

	CALL MaxAltSurfSCID

	Select * from alt_ssc where AltSurfSCID = 0 into QyUpdt
	Update QyUpdt set AltSurfSCID = MaxSurfSCID + rowid
	Close Table QyUpdt

End Sub
'---------------------------------------------------------
sub MkSSCZingTbl
dim iTbl as integer

	OnError goto skipTbl
	
	Print "Creating zinger table..."
	
	If tableinfo(alt_ssc,8) = 0 Then
		Print "No alt_ssc zingers to create."
		'Exit Sub
	End If
	
	Select AltSurfSCID "altZingID" ,AltSurfSCID, NGTO "NGTO" from alt_ssc where rowid = -1 into qySaver 
	Commit Table qySaver As gTempDir & "alt_zing.tab" TYPE NATIVE Charset "WindowsLatin1"
	Open Table gTempDir & "alt_zing.tab" interactive
	Close Table qySaver
	
	Select * from alt_ssc where Str$(obj)="region" into qyRunSet	
	Select * from qyRunSet into qyOneSsc 
	
	FOR iTbl = 1 to tableinfo(qyRunSet,8)	
		Select * from qyRunSet where rowid = iTbl into qyOneSsc
		Call MkSSCZingerFromAltSurfSCID(qyOneSsc.AltSurfSCId)
	NEXT
	
	Close Table qyRunSet
	Close Table qyOneSsc
	
	Commit Table alt_zing
	Add Map Layer alt_zing
	Set Map Layer alt_zing Global Line (1,59,32960) 
	Set Map Layer alt_zing Display Global

Exit Sub
skipTbl:
	Print "ZingTbl: " + Err() + ": " + Error$()
	Resume Next
End Sub
'---------------------------------------------------------
sub EditSaveSSC

	Commit table alt_speclinks interactive
	Commit table alt_ssc interactive
	Commit table alt_dsc interactive

End Sub
'---------------------------------------------------------
sub EditRevertSSC

	IF Ask(("Are you sure you wish to revert changes?"), "Yes", "No")=0 THEN
			Exit Sub
	END IF
	Rollback table alt_speclinks
	Rollback table alt_ssc
	Rollback table alt_dsc
	Rollback Table alt_zing

End Sub
'---------------------------------------------------------
'---------------------------------------------------------
sub MaxAltSurfSCID

	Select max(AltSurfSCID) from alt_ssc into qyMaxAltSurfSCID noselect
		MaxSurfSCID=qyMaxAltSurfSCID.col1
		Close Table qyMaxAltSurfSCID
End Sub
'---------------------------------------------------------
sub MkSSCStubPt

OnError GoTo RedirError

dim dsX,dsY as float
dim stubPt as object
dim sSource as string
dim mdlNodeCount, altNodeCount, iOp as integer

mdlNodeCount=0
altNodeCount=0

	Call SetStdCoordSys()
	'Verify selected items is a SSC	
	IF Selectioninfo(1) not like "%SSC%" THEN
		Print "SSC Not selected."		
	End If
	Print "Flagging SSCFrom. " & Str$(SelectionInfo(3)) & " SSC(s) selected."
	Select * from selection into QyTarget
	'If the selected SSC is in mdl_Ssc then read data...
	IF Selectioninfo(1) like "%mdl%" THEN
		Call RunStr("alt_ssc", "MdlSurfSCID", QyTarget.SurfSCID, "QyAlreadyExists")
		'...unless it has a corresponding entry in alt_dsc, in which case select that entry
		If TableInfo(QyAlreadyExists, TAB_INFO_NROWS) <> 0 Then					
			Print "You selected mdl_SurfSC, but entry already exists in alt_ssc. Switching to alt_ssc."
			Select * From QyAlreadyExists into QyTarget
		End If
		iOp=1
		sSource = "mdl"		
	END IF
	'If the selected SSC is in alt_dsc then read data...
	IF Selectioninfo(1) like "%alt%" THEN
		iOp=0
		sSource = "alt"				
	END IF
						
	SscReady=1  
				
	'At this point, QySscFrom contains the selected SSC(s), which are in alt_SSC
	
	'Finds the nearest selected link of the appropriate type,
	'and sets the following variables:	
	'exLID =qySetPipeTo.linkID
	'sSource="mdl"
	'exLTYP=qySetPipeTo.LinkType
	'LinkObj= qySetPipeTo.obj	
	stubX = commandinfo(CMD_INFO_X)
	stubY = commandinfo(CMD_INFO_Y)
	
	print "Click location = (" & stubX & "," & stubY & ")"
	
	Dim bufferRadius as Integer
	bufferRadius = 5
	Dim bufferMultiplier as Integer
	
	stubPt = createcircle(stubX,stubY,bufferRadius)
	print "Buffering Click Location..."
	For bufferMultiplier = 1 to 11
		bufferRadius = 5 * bufferMultiplier
		stubPt = CreateCircle(stubX, stubY, bufferRadius) 'buffer(stubPt,12,bufferRadius, "ft")
		
		IF bufferRadius > 50 THEN
			SscReady=0
			Note "No node found within 50 ft!"
			Run Menu command 1701
			Exit Sub			
		END IF
		print "Buffer	Radius = " & str$(bufferRadius) & " ft."

		'CHECKING FOR NEAREST MDL Node TO STUB
		Select * from mdl_nodes_applied where obj intersects stubPt into qyMdlNodeTo
			mdlNodeCount=tableinfo(qyMdlNodeTo,TAB_INFO_NROWS)
		Print "Found " + mdlNodeCount + " model nodes within buffer."

		'CHECKING FOR NEAREST ALT Node TO STUB
		Select * from alt_nodes_applied where obj intersects stubPt into qyAltNodeTo
			altNodeCount = tableinfo(qyAltNodeTo,TAB_INFO_NROWS)
		Print "Found " + altNodeCount + " alternative nodes within buffer."


		IF mdlNodeCount>0 and altNodeCount=0 THEN
			Select * from qyMdlNodeTo where rowid=1 into qySetNodeTo
			exNGTO =qySetNodeTo.Node
			sSource="mdl"			
			NodeObj= qySetNodeTo.obj

			Close table qyMdlNodeTo
			IF mdlNodeCount>1 THEN
				Note 	"Multiple possible connection point found." + Chr$(10) +
						"Please verify alt_ssc table and adjust connectivity as needed."			 
			END IF		
			Exit For
		END IF		
		
		IF altNodeCount>0 and mdlNodeCount=0 THEN
			Select * from qyAltNodeTo where rowid=1 into qySetNodeTo
			exNGTO = qySetNodeTo.Node
			sSource="alt"			
			NodeObj= qySetNodeTo.obj

			Close table qyAltNodeTo
			IF altNodeCount>1 THEN
				Note 	"Multiple possible connection point found." + Chr$(10) +
						"Please verify alt_ssc table and adjust connectivity as needed."			 
			END IF		
			Exit For
		END IF
		
		IF mdlNodeCount>0 and altNodeCount>0 THEN
			Select * from qyAltNodeTo where rowid=1 into qySetNodeTo
			exNGTO =qySetNodeTo.Node
			sSource="alt"			
			NodeObj= qySetNodeTo.obj

			Close table qyMdlNodeTo
			Note 	"Multiple possible connection point found." + Chr$(10) +
						"Please verify alt_ssc table and adjust connectivity as needed."			 
			Exit For
		END IF		

	Next
	
	'At this point, QyTarget contains the selected SSC(s), which may be in mdl_SurfSC or alt_SSC
	IF iOp=1 THEN		
		'SSC SELECTED FROM MDL_dsc
		Print "Creating new entries in alt_SSC."
		Dim j as integer
		For j = 1 to TableInfo(QyTarget, TAB_INFO_NROWS)
			CALL MaxAltSurfSCID	
			Select * From QyTarget Where RowId = j Into QyOneSSC			
			Insert Into alt_ssc (AltSurfSCID, MdlSurfSCID, NGTO, IsActive)
				Select MaxSurfSCID+1, QyOneSSC.SurfSCID, QyOneSSC.NGTO, 1 From QyOneSSC
		Next
		Print "Selecting new entries from alt_SSC."
		Select * From alt_ssc Where MdlSurfSCID in (select SurfSCID From QyTarget) into qySSCFrom
		'Update qySscFrom set obj = pObj
		'Add Column "qySscFrom" (obj)From mdl_SurfSC Set To obj Where MdlSurfSCID = SurfSCID
	END IF
	
	IF iOp=0 THEN
		'SSC SELECTED FROM ALT_ssc
		'Select * from alt_ssc where MdlSurfSCID= LOTid into qySscFrom
		Print "Selecting existing entries from alt_SSC."
		Select * from QyTarget into QySSCFrom
	END IF

	dsX = ObjectGeography(NodeObj, OBJ_GEO_POINTX)
	dsy = ObjectGeography(NodeObj, OBJ_GEO_POINTY)

	stubDist=Distance(dsX,dsY,stubX,stubY, "FT")
	print "Node selected, setting connectivity."
	
	For j = 1 to TableInfo(QySscFrom, TAB_INFO_NROWS)		
		Dim tempAltSscId as integer	
		Select * From QySscFrom Into QyOneSSC Where RowId = j			
		Print "Setting alt_ssc info for AltSscId=" & QyOneSSC.AltSurfSCId		
		tempAltSscId = QyOneSSC.AltSurfSCId
					
		Update QyOneSSC set NGTO = exNGTO, IsActive=1
								
		Call MkSSCZingerFromAltSurfSCID(tempAltSscId)
	Next		

	SscReady=0
	Run Menu command 304
	Run Menu command 1701

exit sub
RedirError:
	Note "Error redirecting subcatchment: " & Error$()
End Sub
'---------------------------------------------------------
sub SetSSCFLOW
	if VerifySSCSelection() = false then
		exit sub
	end if
	sFlowTO = "toSAN"
	CALL MkSSCStubPt
	sFlowTO = ""
End Sub
'---------------------------------------------------------
sub SetSSCActive
	dim sscIsActive as logical

	IF NOT Selectioninfo(1) THEN
		Note "Select a SSC to activate/deactivate."
		Exit sub
	END IF
	IF Selectioninfo(1) NOT like "%ssc%" and Selectioninfo(1) NOT like "%surfsc%" THEN
		Note "Please select a SSC to activate/deactivate."
		Exit sub
	END IF

	IF Selectioninfo(1) like "%mdl_surfsc%" THEN
			pObj=selection.obj
			sscID=selection.SurfSCID
			ExNGTO= Selection.NGTO						

			Select * from alt_ssc where MdlSurfSCID = sscID into QyChkAlt

			IF tableinfo(QyChkAlt,8)= 0 THEN
				CALL MaxAltSurfSCID
				Insert into alt_ssc(AltSurfSCID, MdlSurfSCID, NGTO, IsActive) 
								values(MaxSurfSCID+1, sscID, ExNGTO, 1)
	
				Select * from Alt_ssc where AltSurfSCID= MaxSurfSCID+1
				update selection set obj = pObj 
			ELSE
				Select * from QyChkAlt
		END IF

	END IF
	
	IF Selectioninfo(1) like "%alt_ssc%" THEN
		Select * From Selection into QyTargetSSC
		sscIsActive= QyTargetSSC.IsActive

		IF sscIsActive=1 THEN
			Update QyTargetSSC set IsActive=0 
			Close Table QyTargetSSC 
			exit sub
		END IF

		IF sscIsActive=0 THEN
			ExNGTO= QyTargetSSC.NGTO						
			sscID=QyTargetSSC.MdlSurfSCID
			
			IF NodeExists(ExNGTO) <> True Then
				Note "Cannot activate SSC. Connection point does not exist or not specified." + CHR$(10)+
						"You must first redirect this subcatchment to a mdl_node or alt_node."
				Exit Sub 
			END IF
			
			Select * from alt_ssc where MdlSurfSCid = sscID into QyChkAlt

			Update selection set IsActive=1 

		END IF

	END IF

'RUN MENU COMMAND 304
RUN MENU COMMAND 1701

End Sub
'---------------------------------------------------------
'Assert: Table alt_zing exists
Sub MkSSCZingerFromAltSurfSCID(ByVal UpdateAltSscId as integer)
	
	OnError Goto ZingerFromSSCError
	
	Select * From alt_zing Where alt_zing.AltSurfSCId = Val(Str$(UpdateAltSscId)) Into QyDelete
	If TableInfo(QyDelete, TAB_INFO_NROWS) > 0 Then
		Delete From QyDelete
		Drop Table QyDelete
		Commit Table alt_zing
	End If	
	
	Select * From Alt_Ssc Where Alt_Ssc.AltSurfSCId = Val(Str$(UpdateAltSscId)) Into QyUpdateSsc
	If QyUpdateSsc.IsActive = False Then
		Exit Sub
	End If
	
	Print "Creating Zinger: " & UpdateAltSscId & ", " & QyUpdateSsc.AltSurfSCId & ", " & QyUpdateSsc.NGTO
	'Do surface zinger
	Dim NodeObj as Object
	Dim FindNode as String
	Dim tmpSSCID as Integer
	FindNode = QyUpdateSsc.NGTO
	NodeObj = GetPointFromLink(FindNode)
	tmpSSCID = QyUpdateSsc.AltSurfSCId
	If ObjectInfo(NodeObj, OBJ_INFO_TYPE) = OBJ_TYPE_POINT Then
		Dim SscObj as Object
		SscObj = QyUpdateSsc.Obj		
		Call MaxSSCZingID					
		maxZid = maxZid+1	
					
		'Print "MaxZid=" & str$(maxZid) & ", " & "AltSurfSCId=" & str$(AltSurfSCId) & ", " & "LinkId=" & str$(LinkId) & "."			
		Insert Into alt_zing Values (maxZid, tmpSSCID, FindNode)
		Select * from alt_zing where AltZingID = maxZid into QyZing
		Print "Zinger from (" + CentroidX(SscObj) + "," + CentroidY(SscObj) + " (" + ObjectGeography(NodeObj, OBJ_GEO_POINTX) + "," + ObjectGeography(NodeObj, OBJ_GEO_POINTY) + ")"
		
		Update QyZing set object = CreateLine(CentroidX(SscObj), CentroidY(SscObj), ObjectGeography(NodeObj, OBJ_GEO_POINTX), ObjectGeography(NodeObj, OBJ_GEO_POINTY))
		'Update QyZing set object = ConvertToPline(QyZing.obj)
		Print "Created zinger for SSC " & QyUpdateSsc.MdlSurfSCID & " to NGTO " & QyUpdateSsc.NGTO & "."
		Commit Table alt_zing
	Else
		Print "Unable to create zinger for SSC " & QyUpdateSsc.MdlSurfSCID & ". NGTO " & QyUpdateSsc.NGTO & " not found."
	End If
			
	Exit Sub
ZingerFromSSCError:
	Print "SSC Error: " & Err$
	Close Table QyLinkInMdl
	Close Table QyUpdateSsc
	
End Sub
'---------------------------------------------------------

'---------------------------------------------------------
sub MaxSSCZingID

	Select Max(altZingID) from alt_zing into qyMaxZid
	MaxZid=qyMaxZid.col1
	Close Table QyMaxZid

End Sub
'---------------------------------------------------------
Sub ToggleSSCLabel
	IF iLbl = 1 THEN
		Set Map Layer 3 Label Auto On
		Set Map Layer 3 Label Auto On
	END IF
	IF iLbl = 0 THEN
		Set Map Layer 3 Label Auto On
		Set Map Layer 3 Label Auto On
	END IF
		

End Sub
'---------------------------------------------------------
Sub RunStr(ByVal FromTbl as string,ByVal FromCol as string,ByVal ColVal as string,ByVal ToTbl as string)
		DoStr = Str$("Select * from " & FromTbl & " where " & FromCOL & " = " & ColVal & " into " & ToTbl)
		Run Command DoStr
End Sub
'---------------------------------------------------------
sub RefreshSSCZingers

Onerror goto skiprefresh

	Drop table alt_zing
	
	CALL MkSSCZingTbl

RUN MENU COMMAND 304
RUN MENU COMMAND 1701

exit sub

skiprefresh:
Resume NExt
End Sub
'---------------------------------------------------------
sub PointFromDSZinger(ByVal LineObj as object,ByVal fDist as float)
dim BegX, BegY, EndX, EndY, objLen,ratio as float
dim OutObj, TrimObj as object

OnError goto skipDsPt

'BegX= objectnodeX(LineObj,1,1)
'BegY= objectnodeY(LineObj,1,1)
EndX= objectnodeX(LineObj,1,objectinfo(LineObj,20))
EndY= objectnodeY(LineObj,1,objectinfo(LineObj,20))

TrimObj= createcircle(endX,EndY,fDist)

OutObj=overlap(LineObj,TrimObj)

LPTx = objectnodex(outObj,1,1)
LPTy = objectnodey(outObj,1,1)

Print "Zinger Geom: " & LPTx & " " & LPTY & " " & fDist

Exit sub

skipDsPt:
	Print "DownstreamPt: " + Err() + ": " + Error$()
		Resume Next
End Sub
'---------------------------------------------------------
Function VerifySSCSelection() as logical
If Not SelectionInfo(1) Then
	VerifySSCSelection = false
	Note "Please select a SSC to Redirect Flow"
	exit function
End If
IF Selectioninfo(1) NOT like "%ssc%" and Selectioninfo(1) NOT like "%surfsc%"  THEN
		Alter button ID 90008 uncheck
		Run Menu Command 1701
		Note "Please select a SSC to Redirect Flow"
		VerifySSCSelection = false
		exit function
	END IF
	VerifySSCSelection = true
End Function
'=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Function NodeExists(FindNode as String) as Logical

	Select * from mdl_links_applied Where USnode = FindNode	Into ExistingNodeList
	If SelectionInfo(SEL_INFO_NROWS) > 0 Then
		Close Table ExistingNodeList
		NodeExists = True
		Exit Function
	End If
	
	Select * from mdl_links_applied Where DSnode = FindNode	Into ExistingNodeList
	If SelectionInfo(SEL_INFO_NROWS) > 0 Then
		Close Table ExistingNodeList
		NodeExists = True
		Exit Function
	End If
	
	Select * from alt_links_applied Where USnode = FindNode	Into ExistingNodeList	
	If SelectionInfo(SEL_INFO_NROWS) > 0 Then
		Close Table ExistingNodeList
		NodeExists = True
		Exit Function
	End If
	
	Select * from alt_links_applied Where DSnode = FindNode	Into ExistingNodeList	
	If SelectionInfo(SEL_INFO_NROWS) > 0 Then
		Close Table ExistingNodeList
		NodeExists = True
		Exit Function
	End If
		
	NodeExists = False
		
End Function
'=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Function GetPointFromLink(FindNode as String) as Object
	Select * from mdl_links_applied into ExistingNodeList Where USNode = FindNode
	If SelectionInfo(SEL_INFO_NROWS) > 0 Then
		Select * From ExistingNodeList Where RowId = 1 Into tmp
		GetPointFromLink = CreatePoint(ObjectNodeX(tmp.obj, 1, 1), ObjectNodeY(tmp.obj, 1, 1))
		'Print "Node Coord: (" + ObjectNodeX(tmp.obj, 1, 1) + "," + ObjectNodeY(tmp.obj, 1, 1) + ")"
		Close Table tmp
		Close Table ExistingNodeList		
		Exit Function
	End If
	
	Select * from alt_links_applied into ExistingNodeList Where USNode = FindNode
	If SelectionInfo(SEL_INFO_NROWS) > 0 Then
		Select * From ExistingNodeList Where RowId = 1 Into tmp
		GetPointFromLink = CreatePoint(ObjectNodeX(tmp.obj, 1, 1), ObjectNodeY(tmp.obj, 1, 1))
		Close Table tmp
		Close Table ExistingNodeList
		Exit Function
	End If
	
	'Select * from mdl_links_applied into ExistingNodeList Where DSNode = FindNode
	'If SelectionInfo(SEL_INFO_NROWS) > 0 Then
	'	Select * From ExistingNodeList Where RowId = 1 Into tmp
	'	GetPointFromLink = CreatePoint(ObjectGeography(tmp.obj, OBJ_GEO_LINEENDX), ObjectGeography(tmp.obj, OBJ_GEO_LINEENDY))
	'	Close Table tmp
	'	Close Table ExistingNodeList
	'	Exit Function
	'End If
	
	'Select * from alt_links_applied into ExistingNodeList Where DSNode = FindNode
	'If SelectionInfo(SEL_INFO_NROWS) > 0 Then
	'	Select * From ExistingNodeList Where RowId = 1 Into tmp
	'	GetPointFromLink = CreatePoint(ObjectGeography(tmp.obj, OBJ_GEO_LINEENDX), ObjectGeography(tmp.obj, OBJ_GEO_LINEENDY))
	'	Close Table tmp
	'	Close Table ExistingNodeList
	'	Exit Function
	'End If
	GetPointFromLink = CreateCircle(0,0,1)
End Function

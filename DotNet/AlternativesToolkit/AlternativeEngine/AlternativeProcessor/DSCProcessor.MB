'
'	============ EMGAATS Workbench =================
'
'	Copyright (c) 2001,	2003  City of Portland,	OR Bureau of Environmental Services	
'
' 20Jul2006	Adapted
'	22Mar2004 Collins added	call to	InitOpenUtilGlobals	so that	EMGOpenUtils can be	used here
'
'
include "MapBasic.def"
'include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\EMGGlobal.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\EMGToolGlobal.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\EMGLogger.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\EMGOpenUtils.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\EMGMTabUtil.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Common\Inc\INIUtils.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\Workbench\Inc\EMGInit.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\LinkTool\Inc\EMGLinkColData.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.2\common\inc\EMGCoordSys.def"

Declare Sub Main()
'Declare Sub EndHandler()

'Required for all Framework MBX Apps
Declare Sub ExitApplication()
Declare Sub Function_Menu()

'Globals required for all Framework Apps
Global gReturnStatus as String
Global gDebugMode as Logical

'Functions specific to this Framework App
Declare Sub UpdateDSC
Declare Sub SetupDSCProcessor
Declare Sub ExtractAltLinkId
Declare Sub UpdateNGToSan
Declare Sub UpdateNGToStorm

'Globals specific to this Framework App
global gOutputModelPath as String
global gLinkAlternative as String
global gDSCAlternative as String
global gTempDir as String
global gAltID as integer
Global gErrorCheckPath as String

'---------------------------------------------------------
' the following	is a delphi	code snippit that shows	how	the	MB globals are accessed
'---------------------------------------------------------
  'strMBmsg	= 'gstrCurrentMessage';
  'strMBrc = 'gstrReturnStatus';

  'STEP	ONE: Start mapinfo
  'goleMI :=Zcreateoleobject('Mapinfo.Application');
  
  'STEP	TWO: find the full path	of the application
  'mbxFullPath := systemini.ReadString('code','TestBench','notfound');	
	
	'STEP THREE: Run the mbx
	'DoStr := 'Run Application '+ #34 +	mbxFullPath	+ #34;
	'oleMI.do doStr
	
  'STEP	FOUR: Initialize global	to something that is not SUCCESS
  'oleMI.mbapplications.item('TestBench').mbglobals.item(strMBrc).value	:= 'NULL';
  
  'STEP	FIVE: run subroutines within the mapinfo application and test for success
  'olemi.do	('Run Menu Command ID '	+ cmdID);
  'sleep(1000);
  'if myrc <> 'SUCCESS'	Then
	' error	stuff here
  'end if


'---------------------------------------------------------
Sub UpdateDSC
	gReturnStatus="Entered UpdateDSC()"	
	Open Table gDSCAlternative as alt_dsc	
	
	If TableInfo(alt_dsc, TAB_INFO_NROWS) = 0 Then
		Print "No DSC found for update"
		Exit Sub
	End If
	Print "Found " & TableInfo(alt_dsc, TAB_INFO_NROWS) & " DSC for tabular update."
	
	'New to service area - Implement without Subselects
	'Select * From alt_dsc Where MdlDscId Not In (Select DscID From mdl_dsc) Into alt_not_in_mdl
	'Select * From mst_dsc where DscId In (select MdlDscId From alt_not_in_mdl) Into NewToServiceAreaDSC
	'Select (Correct colums) From NewToServiceAreaDSC
	'Append into mdl_dsc From NewToServiceAreaDSC
			
	Select mdl_dsc.DSCID, mdl_dsc.ToLinkSan, 
		mdl_dsc.DiscoClass "oldDiscoClass", 
		mdl_dsc.Frac2SwrBeg, alt_dsc.LinkIDSan, 
		alt_dsc.DiscoClass "newDiscoClass", 
		alt_dsc.ConnectFractionSan From mdl_dsc, alt_dsc 
		Where mdl_dsc.DscID = alt_dsc.MdlDscID 
		And LinkSourceSan = "mdl" 
		Into update_san_mdl		
	Select * From mdl_dsc, alt_dsc 
		Where mdl_dsc.DscID = alt_dsc.MdlDscID 
		And LinkSourceStorm = "mdl" 
		And DiscoClass="D" 
		Into update_storm_mdl
	
	If TableInfo(update_san_mdl, TAB_INFO_NROWS) <> 0 Then
		Update update_san_mdl Set ToLinkSan = LinkIDSan
		Update update_san_mdl Set oldDiscoClass = newDiscoClass
		Update update_san_mdl Set Frac2SwrBeg = ConnectFractionSan
	End If
	If TableInfo(update_storm_mdl, TAB_INFO_NROWS) <> 0 Then
		Update update_storm_mdl Set ToLinkStorm = LinkIDStorm 
	End If
		
	Select mdl_dsc.DSCID, mdl_dsc.ToLinkSan, 
		mdl_dsc.DiscoClass "oldDiscoClass", 
		mdl_dsc.Frac2SwrBeg, alt_dsc.LinkIDSan, 
		alt_dsc.DiscoClass "newDiscoClass", 
		alt_dsc.ConnectFractionSan From mdl_dsc, alt_dsc 
		Where mdl_dsc.DscID = alt_dsc.MdlDscID 
		And LinkSourceSan = "alt" 
		Into update_san_alt		
	Select * From mdl_dsc, alt_dsc 
		Where mdl_dsc.DscID = alt_dsc.MdlDscID 
		And LinkSourceStorm = "alt" 
		And DiscoClass="D" 
		Into update_storm_alt
	Call ExtractAltLinkId	

	If TableInfo(update_san_alt, TAB_INFO_NROWS) <> 0 Then		
		Update update_san_alt Set ToLinkSan = NewMdlLinkID
		Update update_san_alt Set oldDiscoClass = newDiscoClass
		Update update_san_alt Set Frac2SwrBeg = ConnectFractionSan
	End If
	If TableInfo(update_storm_alt, TAB_INFO_NROWS) <> 0 Then		
		Update update_storm_alt Set ToLinkStorm = NewMdlLinkID
	End If
	
	'Select * From alt_dsc Where IsActive = 0 Into deactivate_alt_dsc
	'Replace this... remove subselect, replace with temporary table
	'Select * From mdl_dsc Where DSCID In (Select MdlDscID From deactivate_alt_dsc) Into deactivate_mdl_dsc
	Select mdl_dsc.DSCID, mdl_dsc.IsActive From mdl_dsc, alt_dsc Where mdl_dsc.DSCID = alt_dsc.MdlDSCID And alt_dsc.IsActive = 0 Into deactivate_mdl_dsc
	Update deactivate_mdl_dsc Set IsActive = 0
	
	Call UpdateNGToSan
	Call UpdateNGToStorm
	
	dim updateCount as integer
	updateCount = TableInfo(Alt_DSC, TAB_INFO_NROWS)
	
	Select * From mdl_dsc, mdl_links Where DiscoClass = Any("C", "S") and ToLinkSan = LinkID Into dsc_found_link_san
	Commit Table dsc_found_link_san as gTempDir & "dsc_found_link_san.tab"
	Close Table dsc_found_link_san
	Open Table gTempDir & "dsc_found_link_san.tab"
	Select * From mdl_dsc, mdl_links Where DiscoClass = "D" and ToLinkStorm = LinkID Into dsc_found_link_storm
	Commit Table dsc_found_link_storm as gTempDir & "dsc_found_link_storm.tab"
	Close Table dsc_found_link_storm
	Open Table gTempDir & "dsc_found_link_storm.tab"
	Select * From dsc_found_link_san, dsc_found_link_storm Where dsc_found_link_san.DscId = dsc_found_link_storm.DscId Into dsc_found_link_both
	
	dim missingCount as integer
	missingCount = TableInfo(mdl_dsc, TAB_INFO_NROWS) - (TableInfo(dsc_found_link_san, TAB_INFO_NROWS) + TableInfo(dsc_found_link_storm, TAB_INFO_NROWS) - TableInfo(dsc_found_link_both, TAB_INFO_NROWS))
	'Replace this... remove subselect, replace with temporary table
	'!!!Implement this and write errors to error_check
	'Select * From mdl_dsc Where DiscoClass = Any("C", "S") And DscId Not In (Select DscId From dsc_found_link_san) into QyDeactivate
	'Update QyDeactivate Set IsActive = 0
	
	'Replace this... remove subselect, replace with temporary table
	'Select * From mdl_dsc Where DiscoClass = "D" And DscId Not In (Select DscId From dsc_found_link_storm) into QyDeactivate
	'Update QyDeactivate Set IsActive = 0
			
	Commit Table mdl_dsc
	gReturnStatus = "Found " & Str$(updateCount) & " DSC(s) specified for update. Found " & Str$(missingCount) & " with broken connection(s)."
	
End Sub

'---------------------------------------------------------
'Adds temporary column "ExtractedAltLinkId" to update_san_alt & update_storm_alt.
'This column contains the LinkID in Mdl_Links that corresponds to the AltLinkID specified
'in alt_links
Sub ExtractAltLinkID
	gReturnStatus="Entered ExtractAltLinkID()"	
	Add Column mdl_links (ExtractedAltLinkId Integer) From mdl_links Set To Val(Right$(Source, Len(Source)-InStr(1, Source, "."))) Where LinkID = LinkID
	Add Column mdl_links (ExtractedAltId Integer) From mdl_links Set To Val(Left$(Source, InStr(1, Source, ".") - 1)) Where LinkID = LinkID
	Select * From mdl_links Where ExtractedAltID = gAltId Into mdl_links_extracted
	Commit Table mdl_links_extracted As gTempDir & "mdl_links_extracted.tab"
	If TableInfo(mdl_links_extracted, TAB_INFO_NROWS) = 0 Then
		Exit Sub
	End If
	Close Table mdl_links_extracted
	Open Table gTempDir & "mdl_links_extracted.tab"
	Add Column update_san_alt (NewMdlLinkID Integer) From mdl_links_extracted Set To LinkID Where LinkIDSan = ExtractedAltLinkId
	Add Column update_storm_alt (NewMdlLinkID Integer) From mdl_links_extracted Set To LinkID Where LinkIDStorm = ExtractedAltLinkId
End Sub
'---------------------------------------------------------
Sub UpdateNGToSan
	Select * From mdl_dsc, mdl_links Where ToLinkSan = LinkID Into QyUpdateNGToSan
	Update QyUpdateNGToSan Set NGToSan = USNode
End Sub
'---------------------------------------------------------
Sub UpdateNGToStorm
	Select * From mdl_dsc, mdl_links Where ToLinkStorm = LinkID Into QyUpdateNGToStorm
	Update QyUpdateNGToStorm Set NGToStorm = USNode
End Sub
'---------------------------------------------------------
Sub SetupDSCProcessor

	gReturnStatus="Entered SetupDSCProcessor()"	
	gmdlINIfullpath = gOutputModelPath
	call InitOpenUtilGlobals()

	Call SetStdCoordSys()
	Open Table gLinkAlternative as alt_links
	Open Table gDSCAlternative as alt_dsc
	
	dim mdlIndex(4) as integer
	mdlIndex(1) = NDX_MDL_LINKS
	mdlIndex(2) = NDX_MDL_NODES 				
	mdlIndex(3) = NDX_MDL_DIRSC 				
	mdlIndex(4) = NDX_MDL_SURFSC
	
	dim result as integer
	result = setOKToOpen(gmdlFiles, mdlIndex)	
	result = setAllowWrite(gmdlFiles, mdlIndex)
	result = ReallyOpenModel()
	gReturnStatus="Succesfully called SetupDSCProcessor()"	
End Sub 
'---------------------------------------------------------
Sub ExitApplication()		
	Close All		
	End Program
End Sub

'---------------------------------------------------------
' Modify to	add	menuitems for testing
'---------------------------------------------------------

Sub	Function_Menu() 'Required for all Framework MBX apps

Create Menu	"Function Menu"	as 
	"Setup DSC Processor" ID 10000 calling SetupDSCProcessor,	
	"Update DSC" ID 10001 calling UpdateDSC,	

	"Exit MBX Application" ID 9999 calling ExitApplication 'Required for all Framework MBX apps
  
  Alter	Menu Bar Remove	ID 6, ID 7 
  Alter	Menu Bar Add "Function Menu", ID 6,	ID 7

End	Sub

'--------------------------------------------------------
'No	changes	below here
'--------------------------------------------------------

Sub	Main()
		 
	gReturnStatus="Initialized"	
	OnError GoTo ErrorHandler
	Call InitHousekeeping		' have to init some globals before we can say hello
  Call InitOpenUtilGlobals  ' this sets up table names for the EMGOpenUtils functions
	
	Call Function_Menu
	
	Exit Sub
	
	ErrorHandler:
		gReturnStatus = "Error: " + Err()		
		OnError GoTo 0
		Error Err()
	
End	Sub
'---------------------------------------------------------
'All functions should be sure to save tables as needed. When MapInfo exits,
'all tables will be closed without saving (to prevent user prompt in event of a crash
'Sub EndHandler
'	Close All
'End Sub


'
'	============ EMGAATS Workbench =================
'
'	Copyright (c) 2001,	2003  City of Portland,	OR Bureau of Environmental Services	
'
' 20Jul2006	Adapted
'	22Mar2004 Collins added	call to	InitOpenUtilGlobals	so that	EMGOpenUtils can be	used here
'
'
include "MapBasic.def"
include "\\cassio\modeling\Model_Programs\Emgaats\CodeV2.1\Common\Inc\EMGToolGlobal.def"

Declare Sub Main()

'Required for all Framework MBX Apps
Declare Sub ExitApplication()
Declare Sub Function_Menu()
Declare Function AddFocusAreaColumn(ByVal TableName as String) as Integer


'Globals required for all Framework Apps
Global gReturnStatus as String
Global gDebugMode as Logical

'Functions specific to this Framework App
Declare Sub UpdateVersion
Declare Sub DebugNote(ByVal debugStatus as string)

'Globals specific to this Framework App
global gBaseModelPath as String
global gAlternativePath as String
global gTemplateDirectory as string
global gVersion as String
Global gTempDir as String
Global gAltID as Integer

'---------------------------------------------------------
' the following	is a delphi	code snippit that shows	how	the	MB globals are accessed
'---------------------------------------------------------
  'strMBmsg	= 'gstrCurrentMessage';
  'strMBrc = 'gstrReturnStatus';

  'STEP	ONE: Start mapinfo
  'goleMI :=Zcreateoleobject('Mapinfo.Application');
  
  'STEP	TWO: find the full path	of the application
  'mbxFullPath := systemini.ReadString('code','TestBench','notfound');	
	
	'STEP THREE: Run the mbx
	'DoStr := 'Run Application '+ #34 +	mbxFullPath	+ #34;
	'oleMI.do doStr
	
  'STEP	FOUR: Initialize global	to something that is not SUCCESS
  'oleMI.mbapplications.item('TestBench').mbglobals.item(strMBrc).value	:= 'NULL';
  
  'STEP	FIVE: run subroutines within the mapinfo application and test for success
  'olemi.do	('Run Menu Command ID '	+ cmdID);
  'sleep(1000);
  'if myrc <> 'SUCCESS'	Then
	' error	stuff here
  'end if

'---------------------------------------------------------
Sub UpdateVersion	

	If gVersion = "1.2" Then
		Open Table gTemplateDirectory & "alt_rooftargets_ac.tab" as alt_rooftargets
		Open Table gTemplateDirectory & "alt_parkingtargets_ac.tab" as alt_parkingtargets
		Open Table gTemplateDirectory & "alt_streettargets_ac.tab" as alt_streettargets
		Open Table gTemplateDirectory & "alt_speclinks_ac.tab" as alt_speclinks
		Open Table gTemplateDirectory & "alt_speclinkdata_ac.tab" as alt_speclinkdata
		Open Table gTemplateDirectory & "alt_pumpcurves.tab" as alt_pumpcurves
		Commit Table alt_rooftargets As gAlternativePath & "\alt_rooftargets_ac" Type Access Database gAlternativePath & "\alternative_package.mdb" Table "alt_rooftargets_ac"
		Commit Table alt_parkingtargets As gAlternativePath & "\alt_parkingtargets_ac" Type Access Database gAlternativePath & "\alternative_package.mdb" Table "alt_parkingtargets_ac"
		Commit Table alt_streettargets As gAlternativePath & "\alt_streettargets_ac" Type Access Database gAlternativePath & "\alternative_package.mdb" Table "alt_streettargets_ac"
		Commit Table alt_speclinks As gAlternativePath & "\alt_speclinks_ac" Type Access Database gAlternativePath & "\alternative_package.mdb" Table "alt_speclinks_ac"
		Commit Table alt_speclinkdata As gAlternativePath & "\alt_speclinkdata_ac" Type Access Database gAlternativePath & "\alternative_package.mdb" Table "alt_speclinkdata_ac"
		Commit Table alt_pumpcurves As gAlternativePath & "\alt_pumpcurves" Type Access Database gAlternativePath & "\alternative_package.mdb" Table "alt_pumpcurves"
		Close All
	
	End If
	If gVersion = "1.2" or gVersion = "1.3" Then		
		Open Table gAlternativePath & "\alt_rooftargets_ac" As alt_rooftargets				
		Open Table gAlternativePath & "\alt_parkingtargets_ac" As alt_parkingtargets
		Open Table gAlternativePath & "\alt_streettargets_ac" As alt_streettargets
		Open Table gAlternativePath & "\alt_links_ac" As alt_links
		Dim i As Integer
		i =	 AddFocusAreaColumn("alt_rooftargets")
		i = AddFocusAreaColumn("alt_parkingtargets")
		i = AddFocusAreaColumn("alt_streettargets")
		i = AddFocusAreaColumn("alt_links")			
	End If
End Sub
'---------------------------------------------------------
Sub ExitApplication()		
	Close All		
	End Program
End Sub

'---------------------------------------------------------
' Modify to	add	menuitems for testing
'---------------------------------------------------------

Sub	Function_Menu() 'Required for all Framework MBX apps

Create Menu	"Function Menu"	as 
	"Update Version" ID 10000 calling UpdateVersion,	
	"Exit MBX Application" ID 9999 calling ExitApplication 'Required for all Framework MBX apps
  
  Alter	Menu Bar Remove	ID 6, ID 7 
  Alter	Menu Bar Add "Function Menu", ID 6,	ID 7    

End	Sub

Function AddFocusAreaColumn(ByVal TableName as String) as Integer
	Dim i as Integer
	Dim columnCount as Integer
	columnCount = TableInfo(TableName, TAB_INFO_NCOLS)
	For i = 1 To columnCount
		If ColumnInfo(TableName, "COL" & i, COL_INFO_NAME) = "FocusArea" Then		
			Exit Function 
		End If
	Next
	Alter Table TableName (Add FocusArea Char(10))
End Function 
'--------------------------------------------------------
'No	changes	below here
'--------------------------------------------------------

Sub	Main()
		 
	gReturnStatus="Initialized"	
	OnError GoTo ErrorHandler
	
	Call Function_Menu
	
	Exit Sub
	
	ErrorHandler:
		gReturnStatus = "Error: " + Err()		
		OnError GoTo 0
		Error Err()
	
End	Sub
'---------------------------------------------------------
'All functions should be sure to save tables as needed. When MapInfo exits,
'all tables will be closed without saving (to prevent user prompt in event of a crash
'Sub EndHandler
'	Close All
'End Sub
'---------------------------------------------------------
Sub DebugNote(ByVal debugStatus as string)
	If gDebugMode = True Then

		Print debugStatus		
	End If
End Sub
'---------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SystemsAnalysis.Grid.GridAnalysis {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("GridInterfaceDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class GridInterfaceDataSet : global::System.Data.DataSet {
        
        private FEGridProjectsDataTable tableFEGridProjects;
        
        private FESelectionSetsDataTable tableFESelectionSets;
        
        private FEHyetographDataDataTable tableFEHyetographData;
        
        private FEHyetographsDataTable tableFEHyetographs;
        
        private FEModelRunDataTable tableFEModelRun;
        
        private FEScenariosDataTable tableFEScenarios;
        
        private FESelectionSetAreasDataTable tableFESelectionSetAreas;
        
        private QryModelRunDataTable tableQryModelRun;
        
        private FEScenarioXProcessDataTable tableFEScenarioXProcess;
        
        private FEProcessDataTable tableFEProcess;
        
        private FEProcessGroupDataTable tableFEProcessGroup;
        
        private QryProcessesDataTable tableQryProcesses;
        
        private global::System.Data.DataRelation relationFE_SCENARIOSFE_SCENARIO_X_PROCESS;
        
        private global::System.Data.DataRelation relationFE_SELECTION_SET_AREASFE_SELECTION_SETS;
        
        private global::System.Data.DataRelation relationFE_HYETOGRAPHSFE_HYETOGRAPH_DATA;
        
        private global::System.Data.DataRelation relationFE_HYDROGRAPHSFE_GRID_MODEL_RUN;
        
        private global::System.Data.DataRelation relationFE_SCENARIOSFE_MODEL_RUN;
        
        private global::System.Data.DataRelation relationFE_SELECTION_SET_AREASFE_GRID_MODEL_RUN;
        
        private global::System.Data.DataRelation relationFE_GRID_PROJECTSFE_SCENARIOS;
        
        private global::System.Data.DataRelation relationFE_GRID_PROJECTSFE_SELECTION_SET_AREAS;
        
        private global::System.Data.DataRelation relationFE_GRID_PROJECTSFE_SCENARIOS1;
        
        private global::System.Data.DataRelation relationFE_GRID_PROJECTSFE_SELECTION_SET_AREAS1;
        
        private global::System.Data.DataRelation relationFEGridProjects_QryModelRun;
        
        private global::System.Data.DataRelation relationFEScenarioXProcess_FEProcessGroup;
        
        private global::System.Data.DataRelation relationFEProcessGroup_FEProcess;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GridInterfaceDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected GridInterfaceDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["FEGridProjects"] != null)) {
                    base.Tables.Add(new FEGridProjectsDataTable(ds.Tables["FEGridProjects"]));
                }
                if ((ds.Tables["FESelectionSets"] != null)) {
                    base.Tables.Add(new FESelectionSetsDataTable(ds.Tables["FESelectionSets"]));
                }
                if ((ds.Tables["FEHyetographData"] != null)) {
                    base.Tables.Add(new FEHyetographDataDataTable(ds.Tables["FEHyetographData"]));
                }
                if ((ds.Tables["FEHyetographs"] != null)) {
                    base.Tables.Add(new FEHyetographsDataTable(ds.Tables["FEHyetographs"]));
                }
                if ((ds.Tables["FEModelRun"] != null)) {
                    base.Tables.Add(new FEModelRunDataTable(ds.Tables["FEModelRun"]));
                }
                if ((ds.Tables["FEScenarios"] != null)) {
                    base.Tables.Add(new FEScenariosDataTable(ds.Tables["FEScenarios"]));
                }
                if ((ds.Tables["FESelectionSetAreas"] != null)) {
                    base.Tables.Add(new FESelectionSetAreasDataTable(ds.Tables["FESelectionSetAreas"]));
                }
                if ((ds.Tables["QryModelRun"] != null)) {
                    base.Tables.Add(new QryModelRunDataTable(ds.Tables["QryModelRun"]));
                }
                if ((ds.Tables["FEScenarioXProcess"] != null)) {
                    base.Tables.Add(new FEScenarioXProcessDataTable(ds.Tables["FEScenarioXProcess"]));
                }
                if ((ds.Tables["FEProcess"] != null)) {
                    base.Tables.Add(new FEProcessDataTable(ds.Tables["FEProcess"]));
                }
                if ((ds.Tables["FEProcessGroup"] != null)) {
                    base.Tables.Add(new FEProcessGroupDataTable(ds.Tables["FEProcessGroup"]));
                }
                if ((ds.Tables["QryProcesses"] != null)) {
                    base.Tables.Add(new QryProcessesDataTable(ds.Tables["QryProcesses"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FEGridProjectsDataTable FEGridProjects {
            get {
                return this.tableFEGridProjects;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FESelectionSetsDataTable FESelectionSets {
            get {
                return this.tableFESelectionSets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FEHyetographDataDataTable FEHyetographData {
            get {
                return this.tableFEHyetographData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FEHyetographsDataTable FEHyetographs {
            get {
                return this.tableFEHyetographs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FEModelRunDataTable FEModelRun {
            get {
                return this.tableFEModelRun;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FEScenariosDataTable FEScenarios {
            get {
                return this.tableFEScenarios;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FESelectionSetAreasDataTable FESelectionSetAreas {
            get {
                return this.tableFESelectionSetAreas;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QryModelRunDataTable QryModelRun {
            get {
                return this.tableQryModelRun;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FEScenarioXProcessDataTable FEScenarioXProcess {
            get {
                return this.tableFEScenarioXProcess;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FEProcessDataTable FEProcess {
            get {
                return this.tableFEProcess;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FEProcessGroupDataTable FEProcessGroup {
            get {
                return this.tableFEProcessGroup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QryProcessesDataTable QryProcesses {
            get {
                return this.tableQryProcesses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            GridInterfaceDataSet cln = ((GridInterfaceDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["FEGridProjects"] != null)) {
                    base.Tables.Add(new FEGridProjectsDataTable(ds.Tables["FEGridProjects"]));
                }
                if ((ds.Tables["FESelectionSets"] != null)) {
                    base.Tables.Add(new FESelectionSetsDataTable(ds.Tables["FESelectionSets"]));
                }
                if ((ds.Tables["FEHyetographData"] != null)) {
                    base.Tables.Add(new FEHyetographDataDataTable(ds.Tables["FEHyetographData"]));
                }
                if ((ds.Tables["FEHyetographs"] != null)) {
                    base.Tables.Add(new FEHyetographsDataTable(ds.Tables["FEHyetographs"]));
                }
                if ((ds.Tables["FEModelRun"] != null)) {
                    base.Tables.Add(new FEModelRunDataTable(ds.Tables["FEModelRun"]));
                }
                if ((ds.Tables["FEScenarios"] != null)) {
                    base.Tables.Add(new FEScenariosDataTable(ds.Tables["FEScenarios"]));
                }
                if ((ds.Tables["FESelectionSetAreas"] != null)) {
                    base.Tables.Add(new FESelectionSetAreasDataTable(ds.Tables["FESelectionSetAreas"]));
                }
                if ((ds.Tables["QryModelRun"] != null)) {
                    base.Tables.Add(new QryModelRunDataTable(ds.Tables["QryModelRun"]));
                }
                if ((ds.Tables["FEScenarioXProcess"] != null)) {
                    base.Tables.Add(new FEScenarioXProcessDataTable(ds.Tables["FEScenarioXProcess"]));
                }
                if ((ds.Tables["FEProcess"] != null)) {
                    base.Tables.Add(new FEProcessDataTable(ds.Tables["FEProcess"]));
                }
                if ((ds.Tables["FEProcessGroup"] != null)) {
                    base.Tables.Add(new FEProcessGroupDataTable(ds.Tables["FEProcessGroup"]));
                }
                if ((ds.Tables["QryProcesses"] != null)) {
                    base.Tables.Add(new QryProcessesDataTable(ds.Tables["QryProcesses"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableFEGridProjects = ((FEGridProjectsDataTable)(base.Tables["FEGridProjects"]));
            if ((initTable == true)) {
                if ((this.tableFEGridProjects != null)) {
                    this.tableFEGridProjects.InitVars();
                }
            }
            this.tableFESelectionSets = ((FESelectionSetsDataTable)(base.Tables["FESelectionSets"]));
            if ((initTable == true)) {
                if ((this.tableFESelectionSets != null)) {
                    this.tableFESelectionSets.InitVars();
                }
            }
            this.tableFEHyetographData = ((FEHyetographDataDataTable)(base.Tables["FEHyetographData"]));
            if ((initTable == true)) {
                if ((this.tableFEHyetographData != null)) {
                    this.tableFEHyetographData.InitVars();
                }
            }
            this.tableFEHyetographs = ((FEHyetographsDataTable)(base.Tables["FEHyetographs"]));
            if ((initTable == true)) {
                if ((this.tableFEHyetographs != null)) {
                    this.tableFEHyetographs.InitVars();
                }
            }
            this.tableFEModelRun = ((FEModelRunDataTable)(base.Tables["FEModelRun"]));
            if ((initTable == true)) {
                if ((this.tableFEModelRun != null)) {
                    this.tableFEModelRun.InitVars();
                }
            }
            this.tableFEScenarios = ((FEScenariosDataTable)(base.Tables["FEScenarios"]));
            if ((initTable == true)) {
                if ((this.tableFEScenarios != null)) {
                    this.tableFEScenarios.InitVars();
                }
            }
            this.tableFESelectionSetAreas = ((FESelectionSetAreasDataTable)(base.Tables["FESelectionSetAreas"]));
            if ((initTable == true)) {
                if ((this.tableFESelectionSetAreas != null)) {
                    this.tableFESelectionSetAreas.InitVars();
                }
            }
            this.tableQryModelRun = ((QryModelRunDataTable)(base.Tables["QryModelRun"]));
            if ((initTable == true)) {
                if ((this.tableQryModelRun != null)) {
                    this.tableQryModelRun.InitVars();
                }
            }
            this.tableFEScenarioXProcess = ((FEScenarioXProcessDataTable)(base.Tables["FEScenarioXProcess"]));
            if ((initTable == true)) {
                if ((this.tableFEScenarioXProcess != null)) {
                    this.tableFEScenarioXProcess.InitVars();
                }
            }
            this.tableFEProcess = ((FEProcessDataTable)(base.Tables["FEProcess"]));
            if ((initTable == true)) {
                if ((this.tableFEProcess != null)) {
                    this.tableFEProcess.InitVars();
                }
            }
            this.tableFEProcessGroup = ((FEProcessGroupDataTable)(base.Tables["FEProcessGroup"]));
            if ((initTable == true)) {
                if ((this.tableFEProcessGroup != null)) {
                    this.tableFEProcessGroup.InitVars();
                }
            }
            this.tableQryProcesses = ((QryProcessesDataTable)(base.Tables["QryProcesses"]));
            if ((initTable == true)) {
                if ((this.tableQryProcesses != null)) {
                    this.tableQryProcesses.InitVars();
                }
            }
            this.relationFE_SCENARIOSFE_SCENARIO_X_PROCESS = this.Relations["FE_SCENARIOSFE_SCENARIO_X_PROCESS"];
            this.relationFE_SELECTION_SET_AREASFE_SELECTION_SETS = this.Relations["FE_SELECTION_SET_AREASFE_SELECTION_SETS"];
            this.relationFE_HYETOGRAPHSFE_HYETOGRAPH_DATA = this.Relations["FE_HYETOGRAPHSFE_HYETOGRAPH_DATA"];
            this.relationFE_HYDROGRAPHSFE_GRID_MODEL_RUN = this.Relations["FE_HYDROGRAPHSFE_GRID_MODEL_RUN"];
            this.relationFE_SCENARIOSFE_MODEL_RUN = this.Relations["FE_SCENARIOSFE_MODEL_RUN"];
            this.relationFE_SELECTION_SET_AREASFE_GRID_MODEL_RUN = this.Relations["FE_SELECTION_SET_AREASFE_GRID_MODEL_RUN"];
            this.relationFE_GRID_PROJECTSFE_SCENARIOS = this.Relations["FE_GRID_PROJECTSFE_SCENARIOS"];
            this.relationFE_GRID_PROJECTSFE_SELECTION_SET_AREAS = this.Relations["FE_GRID_PROJECTSFE_SELECTION_SET_AREAS"];
            this.relationFE_GRID_PROJECTSFE_SCENARIOS1 = this.Relations["FE_GRID_PROJECTSFE_SCENARIOS1"];
            this.relationFE_GRID_PROJECTSFE_SELECTION_SET_AREAS1 = this.Relations["FE_GRID_PROJECTSFE_SELECTION_SET_AREAS1"];
            this.relationFEGridProjects_QryModelRun = this.Relations["FEGridProjects_QryModelRun"];
            this.relationFEScenarioXProcess_FEProcessGroup = this.Relations["FEScenarioXProcess_FEProcessGroup"];
            this.relationFEProcessGroup_FEProcess = this.Relations["FEProcessGroup_FEProcess"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "GridInterfaceDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GridInterfaceDataSet2.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableFEGridProjects = new FEGridProjectsDataTable();
            base.Tables.Add(this.tableFEGridProjects);
            this.tableFESelectionSets = new FESelectionSetsDataTable();
            base.Tables.Add(this.tableFESelectionSets);
            this.tableFEHyetographData = new FEHyetographDataDataTable();
            base.Tables.Add(this.tableFEHyetographData);
            this.tableFEHyetographs = new FEHyetographsDataTable();
            base.Tables.Add(this.tableFEHyetographs);
            this.tableFEModelRun = new FEModelRunDataTable();
            base.Tables.Add(this.tableFEModelRun);
            this.tableFEScenarios = new FEScenariosDataTable();
            base.Tables.Add(this.tableFEScenarios);
            this.tableFESelectionSetAreas = new FESelectionSetAreasDataTable();
            base.Tables.Add(this.tableFESelectionSetAreas);
            this.tableQryModelRun = new QryModelRunDataTable();
            base.Tables.Add(this.tableQryModelRun);
            this.tableFEScenarioXProcess = new FEScenarioXProcessDataTable();
            base.Tables.Add(this.tableFEScenarioXProcess);
            this.tableFEProcess = new FEProcessDataTable();
            base.Tables.Add(this.tableFEProcess);
            this.tableFEProcessGroup = new FEProcessGroupDataTable();
            base.Tables.Add(this.tableFEProcessGroup);
            this.tableQryProcesses = new QryProcessesDataTable();
            base.Tables.Add(this.tableQryProcesses);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FE_SCENARIOSFE_SCENARIO_X_PROCESS", new global::System.Data.DataColumn[] {
                        this.tableFEScenarios.scenario_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableFEScenarioXProcess.scenario_idColumn});
            this.tableFEScenarioXProcess.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFE_SCENARIOSFE_SCENARIO_X_PROCESS = new global::System.Data.DataRelation("FE_SCENARIOSFE_SCENARIO_X_PROCESS", new global::System.Data.DataColumn[] {
                        this.tableFEScenarios.scenario_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableFEScenarioXProcess.scenario_idColumn}, false);
            this.Relations.Add(this.relationFE_SCENARIOSFE_SCENARIO_X_PROCESS);
            this.relationFE_SELECTION_SET_AREASFE_SELECTION_SETS = new global::System.Data.DataRelation("FE_SELECTION_SET_AREASFE_SELECTION_SETS", new global::System.Data.DataColumn[] {
                        this.tableFESelectionSetAreas.selection_set_area_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableFESelectionSets.selection_set_area_idColumn}, false);
            this.Relations.Add(this.relationFE_SELECTION_SET_AREASFE_SELECTION_SETS);
            this.relationFE_HYETOGRAPHSFE_HYETOGRAPH_DATA = new global::System.Data.DataRelation("FE_HYETOGRAPHSFE_HYETOGRAPH_DATA", new global::System.Data.DataColumn[] {
                        this.tableFEHyetographs.hyetograph_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableFEHyetographData.hyetograph_idColumn}, false);
            this.Relations.Add(this.relationFE_HYETOGRAPHSFE_HYETOGRAPH_DATA);
            this.relationFE_HYDROGRAPHSFE_GRID_MODEL_RUN = new global::System.Data.DataRelation("FE_HYDROGRAPHSFE_GRID_MODEL_RUN", new global::System.Data.DataColumn[] {
                        this.tableFEHyetographs.hyetograph_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableFEModelRun.hyetograph_idColumn}, false);
            this.Relations.Add(this.relationFE_HYDROGRAPHSFE_GRID_MODEL_RUN);
            this.relationFE_SCENARIOSFE_MODEL_RUN = new global::System.Data.DataRelation("FE_SCENARIOSFE_MODEL_RUN", new global::System.Data.DataColumn[] {
                        this.tableFEScenarios.scenario_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableFEModelRun.scenario_idColumn}, false);
            this.Relations.Add(this.relationFE_SCENARIOSFE_MODEL_RUN);
            this.relationFE_SELECTION_SET_AREASFE_GRID_MODEL_RUN = new global::System.Data.DataRelation("FE_SELECTION_SET_AREASFE_GRID_MODEL_RUN", new global::System.Data.DataColumn[] {
                        this.tableFESelectionSetAreas.selection_set_area_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableFEModelRun.selection_set_area_idColumn}, false);
            this.Relations.Add(this.relationFE_SELECTION_SET_AREASFE_GRID_MODEL_RUN);
            this.relationFE_GRID_PROJECTSFE_SCENARIOS = new global::System.Data.DataRelation("FE_GRID_PROJECTSFE_SCENARIOS", new global::System.Data.DataColumn[] {
                        this.tableFEGridProjects.project_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableFEScenarios.project_idColumn}, false);
            this.Relations.Add(this.relationFE_GRID_PROJECTSFE_SCENARIOS);
            this.relationFE_GRID_PROJECTSFE_SELECTION_SET_AREAS = new global::System.Data.DataRelation("FE_GRID_PROJECTSFE_SELECTION_SET_AREAS", new global::System.Data.DataColumn[] {
                        this.tableFEGridProjects.project_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableFESelectionSetAreas.project_idColumn}, false);
            this.Relations.Add(this.relationFE_GRID_PROJECTSFE_SELECTION_SET_AREAS);
            this.relationFE_GRID_PROJECTSFE_SCENARIOS1 = new global::System.Data.DataRelation("FE_GRID_PROJECTSFE_SCENARIOS1", new global::System.Data.DataColumn[] {
                        this.tableQryModelRun.project_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableFEScenarios.project_idColumn}, false);
            this.Relations.Add(this.relationFE_GRID_PROJECTSFE_SCENARIOS1);
            this.relationFE_GRID_PROJECTSFE_SELECTION_SET_AREAS1 = new global::System.Data.DataRelation("FE_GRID_PROJECTSFE_SELECTION_SET_AREAS1", new global::System.Data.DataColumn[] {
                        this.tableQryModelRun.project_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableFESelectionSetAreas.project_idColumn}, false);
            this.Relations.Add(this.relationFE_GRID_PROJECTSFE_SELECTION_SET_AREAS1);
            this.relationFEGridProjects_QryModelRun = new global::System.Data.DataRelation("FEGridProjects_QryModelRun", new global::System.Data.DataColumn[] {
                        this.tableFEGridProjects.project_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableQryModelRun.project_idColumn}, false);
            this.Relations.Add(this.relationFEGridProjects_QryModelRun);
            this.relationFEScenarioXProcess_FEProcessGroup = new global::System.Data.DataRelation("FEScenarioXProcess_FEProcessGroup", new global::System.Data.DataColumn[] {
                        this.tableFEScenarioXProcess.process_groupColumn}, new global::System.Data.DataColumn[] {
                        this.tableFEProcessGroup.process_groupColumn}, false);
            this.Relations.Add(this.relationFEScenarioXProcess_FEProcessGroup);
            this.relationFEProcessGroup_FEProcess = new global::System.Data.DataRelation("FEProcessGroup_FEProcess", new global::System.Data.DataColumn[] {
                        this.tableFEProcessGroup.process_groupColumn}, new global::System.Data.DataColumn[] {
                        this.tableFEProcess.process_groupColumn}, false);
            this.Relations.Add(this.relationFEProcessGroup_FEProcess);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFEGridProjects() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFESelectionSets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFEHyetographData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFEHyetographs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFEModelRun() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFEScenarios() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFESelectionSetAreas() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQryModelRun() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFEScenarioXProcess() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFEProcess() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFEProcessGroup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQryProcesses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            GridInterfaceDataSet ds = new GridInterfaceDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void FEGridProjectsRowChangeEventHandler(object sender, FEGridProjectsRowChangeEvent e);
        
        public delegate void FESelectionSetsRowChangeEventHandler(object sender, FESelectionSetsRowChangeEvent e);
        
        public delegate void FEHyetographDataRowChangeEventHandler(object sender, FEHyetographDataRowChangeEvent e);
        
        public delegate void FEHyetographsRowChangeEventHandler(object sender, FEHyetographsRowChangeEvent e);
        
        public delegate void FEModelRunRowChangeEventHandler(object sender, FEModelRunRowChangeEvent e);
        
        public delegate void FEScenariosRowChangeEventHandler(object sender, FEScenariosRowChangeEvent e);
        
        public delegate void FESelectionSetAreasRowChangeEventHandler(object sender, FESelectionSetAreasRowChangeEvent e);
        
        public delegate void QryModelRunRowChangeEventHandler(object sender, QryModelRunRowChangeEvent e);
        
        public delegate void FEScenarioXProcessRowChangeEventHandler(object sender, FEScenarioXProcessRowChangeEvent e);
        
        public delegate void FEProcessRowChangeEventHandler(object sender, FEProcessRowChangeEvent e);
        
        public delegate void FEProcessGroupRowChangeEventHandler(object sender, FEProcessGroupRowChangeEvent e);
        
        public delegate void QryProcessesRowChangeEventHandler(object sender, QryProcessesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FEGridProjectsDataTable : global::System.Data.TypedTableBase<FEGridProjectsRow> {
            
            private global::System.Data.DataColumn columnproject_id;
            
            private global::System.Data.DataColumn columnproject_description;
            
            private global::System.Data.DataColumn columngrid_path;
            
            private global::System.Data.DataColumn columnbmp_path;
            
            private global::System.Data.DataColumn columnmip_path;
            
            private global::System.Data.DataColumn columnosf_path;
            
            private global::System.Data.DataColumn columndefault_output_path;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEGridProjectsDataTable() {
                this.TableName = "FEGridProjects";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEGridProjectsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FEGridProjectsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn project_idColumn {
                get {
                    return this.columnproject_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn project_descriptionColumn {
                get {
                    return this.columnproject_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn grid_pathColumn {
                get {
                    return this.columngrid_path;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bmp_pathColumn {
                get {
                    return this.columnbmp_path;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mip_pathColumn {
                get {
                    return this.columnmip_path;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn osf_pathColumn {
                get {
                    return this.columnosf_path;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn default_output_pathColumn {
                get {
                    return this.columndefault_output_path;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEGridProjectsRow this[int index] {
                get {
                    return ((FEGridProjectsRow)(this.Rows[index]));
                }
            }
            
            public event FEGridProjectsRowChangeEventHandler FEGridProjectsRowChanging;
            
            public event FEGridProjectsRowChangeEventHandler FEGridProjectsRowChanged;
            
            public event FEGridProjectsRowChangeEventHandler FEGridProjectsRowDeleting;
            
            public event FEGridProjectsRowChangeEventHandler FEGridProjectsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFEGridProjectsRow(FEGridProjectsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEGridProjectsRow AddFEGridProjectsRow(string project_description, string grid_path, string bmp_path, string mip_path, string osf_path, string default_output_path) {
                FEGridProjectsRow rowFEGridProjectsRow = ((FEGridProjectsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        project_description,
                        grid_path,
                        bmp_path,
                        mip_path,
                        osf_path,
                        default_output_path};
                rowFEGridProjectsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFEGridProjectsRow);
                return rowFEGridProjectsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEGridProjectsRow FindByproject_id(int project_id) {
                return ((FEGridProjectsRow)(this.Rows.Find(new object[] {
                            project_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FEGridProjectsDataTable cln = ((FEGridProjectsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FEGridProjectsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnproject_id = base.Columns["project_id"];
                this.columnproject_description = base.Columns["project_description"];
                this.columngrid_path = base.Columns["grid_path"];
                this.columnbmp_path = base.Columns["bmp_path"];
                this.columnmip_path = base.Columns["mip_path"];
                this.columnosf_path = base.Columns["osf_path"];
                this.columndefault_output_path = base.Columns["default_output_path"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnproject_id = new global::System.Data.DataColumn("project_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproject_id);
                this.columnproject_description = new global::System.Data.DataColumn("project_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproject_description);
                this.columngrid_path = new global::System.Data.DataColumn("grid_path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngrid_path);
                this.columnbmp_path = new global::System.Data.DataColumn("bmp_path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbmp_path);
                this.columnmip_path = new global::System.Data.DataColumn("mip_path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmip_path);
                this.columnosf_path = new global::System.Data.DataColumn("osf_path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnosf_path);
                this.columndefault_output_path = new global::System.Data.DataColumn("default_output_path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndefault_output_path);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnproject_id}, true));
                this.columnproject_id.AutoIncrement = true;
                this.columnproject_id.AutoIncrementSeed = 1;
                this.columnproject_id.AllowDBNull = false;
                this.columnproject_id.Unique = true;
                this.columnproject_description.MaxLength = 50;
                this.columngrid_path.MaxLength = 255;
                this.columnbmp_path.MaxLength = 255;
                this.columnmip_path.MaxLength = 255;
                this.columnosf_path.MaxLength = 255;
                this.columndefault_output_path.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEGridProjectsRow NewFEGridProjectsRow() {
                return ((FEGridProjectsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FEGridProjectsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FEGridProjectsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FEGridProjectsRowChanged != null)) {
                    this.FEGridProjectsRowChanged(this, new FEGridProjectsRowChangeEvent(((FEGridProjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FEGridProjectsRowChanging != null)) {
                    this.FEGridProjectsRowChanging(this, new FEGridProjectsRowChangeEvent(((FEGridProjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FEGridProjectsRowDeleted != null)) {
                    this.FEGridProjectsRowDeleted(this, new FEGridProjectsRowChangeEvent(((FEGridProjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FEGridProjectsRowDeleting != null)) {
                    this.FEGridProjectsRowDeleting(this, new FEGridProjectsRowChangeEvent(((FEGridProjectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFEGridProjectsRow(FEGridProjectsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GridInterfaceDataSet ds = new GridInterfaceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FEGridProjectsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FESelectionSetsDataTable : global::System.Data.TypedTableBase<FESelectionSetsRow> {
            
            private global::System.Data.DataColumn columnselection_set_id;
            
            private global::System.Data.DataColumn columnselection_set_area_id;
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columncol_name;
            
            private global::System.Data.DataColumn columnrow_name;
            
            private global::System.Data.DataColumn columnpercent_overlap;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetsDataTable() {
                this.TableName = "FESelectionSets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FESelectionSetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FESelectionSetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn selection_set_idColumn {
                get {
                    return this.columnselection_set_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn selection_set_area_idColumn {
                get {
                    return this.columnselection_set_area_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn col_nameColumn {
                get {
                    return this.columncol_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn row_nameColumn {
                get {
                    return this.columnrow_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn percent_overlapColumn {
                get {
                    return this.columnpercent_overlap;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetsRow this[int index] {
                get {
                    return ((FESelectionSetsRow)(this.Rows[index]));
                }
            }
            
            public event FESelectionSetsRowChangeEventHandler FESelectionSetsRowChanging;
            
            public event FESelectionSetsRowChangeEventHandler FESelectionSetsRowChanged;
            
            public event FESelectionSetsRowChangeEventHandler FESelectionSetsRowDeleting;
            
            public event FESelectionSetsRowChangeEventHandler FESelectionSetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFESelectionSetsRow(FESelectionSetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetsRow AddFESelectionSetsRow(FESelectionSetAreasRow parentFESelectionSetAreasRowByFE_SELECTION_SET_AREASFE_SELECTION_SETS, string description, string col_name, string row_name, float percent_overlap) {
                FESelectionSetsRow rowFESelectionSetsRow = ((FESelectionSetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        description,
                        col_name,
                        row_name,
                        percent_overlap};
                if ((parentFESelectionSetAreasRowByFE_SELECTION_SET_AREASFE_SELECTION_SETS != null)) {
                    columnValuesArray[1] = parentFESelectionSetAreasRowByFE_SELECTION_SET_AREASFE_SELECTION_SETS[0];
                }
                rowFESelectionSetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFESelectionSetsRow);
                return rowFESelectionSetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetsRow FindByselection_set_id(int selection_set_id) {
                return ((FESelectionSetsRow)(this.Rows.Find(new object[] {
                            selection_set_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FESelectionSetsDataTable cln = ((FESelectionSetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FESelectionSetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnselection_set_id = base.Columns["selection_set_id"];
                this.columnselection_set_area_id = base.Columns["selection_set_area_id"];
                this.columndescription = base.Columns["description"];
                this.columncol_name = base.Columns["col_name"];
                this.columnrow_name = base.Columns["row_name"];
                this.columnpercent_overlap = base.Columns["percent_overlap"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnselection_set_id = new global::System.Data.DataColumn("selection_set_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnselection_set_id);
                this.columnselection_set_area_id = new global::System.Data.DataColumn("selection_set_area_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnselection_set_area_id);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columncol_name = new global::System.Data.DataColumn("col_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncol_name);
                this.columnrow_name = new global::System.Data.DataColumn("row_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrow_name);
                this.columnpercent_overlap = new global::System.Data.DataColumn("percent_overlap", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpercent_overlap);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnselection_set_id}, true));
                this.columnselection_set_id.AutoIncrement = true;
                this.columnselection_set_id.AutoIncrementSeed = 1;
                this.columnselection_set_id.AllowDBNull = false;
                this.columnselection_set_id.Unique = true;
                this.columndescription.MaxLength = 10;
                this.columncol_name.MaxLength = 3;
                this.columnrow_name.MaxLength = 3;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetsRow NewFESelectionSetsRow() {
                return ((FESelectionSetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FESelectionSetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FESelectionSetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FESelectionSetsRowChanged != null)) {
                    this.FESelectionSetsRowChanged(this, new FESelectionSetsRowChangeEvent(((FESelectionSetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FESelectionSetsRowChanging != null)) {
                    this.FESelectionSetsRowChanging(this, new FESelectionSetsRowChangeEvent(((FESelectionSetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FESelectionSetsRowDeleted != null)) {
                    this.FESelectionSetsRowDeleted(this, new FESelectionSetsRowChangeEvent(((FESelectionSetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FESelectionSetsRowDeleting != null)) {
                    this.FESelectionSetsRowDeleting(this, new FESelectionSetsRowChangeEvent(((FESelectionSetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFESelectionSetsRow(FESelectionSetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GridInterfaceDataSet ds = new GridInterfaceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FESelectionSetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FEHyetographDataDataTable : global::System.Data.TypedTableBase<FEHyetographDataRow> {
            
            private global::System.Data.DataColumn columnhyetograph_data_id;
            
            private global::System.Data.DataColumn columnhyetograph_id;
            
            private global::System.Data.DataColumn columnrun_order;
            
            private global::System.Data.DataColumn columncomment;
            
            private global::System.Data.DataColumn columnrainfall;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographDataDataTable() {
                this.TableName = "FEHyetographData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEHyetographDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FEHyetographDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hyetograph_data_idColumn {
                get {
                    return this.columnhyetograph_data_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hyetograph_idColumn {
                get {
                    return this.columnhyetograph_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn run_orderColumn {
                get {
                    return this.columnrun_order;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentColumn {
                get {
                    return this.columncomment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rainfallColumn {
                get {
                    return this.columnrainfall;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographDataRow this[int index] {
                get {
                    return ((FEHyetographDataRow)(this.Rows[index]));
                }
            }
            
            public event FEHyetographDataRowChangeEventHandler FEHyetographDataRowChanging;
            
            public event FEHyetographDataRowChangeEventHandler FEHyetographDataRowChanged;
            
            public event FEHyetographDataRowChangeEventHandler FEHyetographDataRowDeleting;
            
            public event FEHyetographDataRowChangeEventHandler FEHyetographDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFEHyetographDataRow(FEHyetographDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographDataRow AddFEHyetographDataRow(FEHyetographsRow parentFEHyetographsRowByFE_HYETOGRAPHSFE_HYETOGRAPH_DATA, int run_order, string comment, float rainfall) {
                FEHyetographDataRow rowFEHyetographDataRow = ((FEHyetographDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        run_order,
                        comment,
                        rainfall};
                if ((parentFEHyetographsRowByFE_HYETOGRAPHSFE_HYETOGRAPH_DATA != null)) {
                    columnValuesArray[1] = parentFEHyetographsRowByFE_HYETOGRAPHSFE_HYETOGRAPH_DATA[0];
                }
                rowFEHyetographDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFEHyetographDataRow);
                return rowFEHyetographDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographDataRow FindByhyetograph_data_id(int hyetograph_data_id) {
                return ((FEHyetographDataRow)(this.Rows.Find(new object[] {
                            hyetograph_data_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FEHyetographDataDataTable cln = ((FEHyetographDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FEHyetographDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnhyetograph_data_id = base.Columns["hyetograph_data_id"];
                this.columnhyetograph_id = base.Columns["hyetograph_id"];
                this.columnrun_order = base.Columns["run_order"];
                this.columncomment = base.Columns["comment"];
                this.columnrainfall = base.Columns["rainfall"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnhyetograph_data_id = new global::System.Data.DataColumn("hyetograph_data_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhyetograph_data_id);
                this.columnhyetograph_id = new global::System.Data.DataColumn("hyetograph_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhyetograph_id);
                this.columnrun_order = new global::System.Data.DataColumn("run_order", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrun_order);
                this.columncomment = new global::System.Data.DataColumn("comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomment);
                this.columnrainfall = new global::System.Data.DataColumn("rainfall", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrainfall);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnhyetograph_data_id}, true));
                this.columnhyetograph_data_id.AutoIncrement = true;
                this.columnhyetograph_data_id.AutoIncrementSeed = 1;
                this.columnhyetograph_data_id.AllowDBNull = false;
                this.columnhyetograph_data_id.Unique = true;
                this.columncomment.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographDataRow NewFEHyetographDataRow() {
                return ((FEHyetographDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FEHyetographDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FEHyetographDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FEHyetographDataRowChanged != null)) {
                    this.FEHyetographDataRowChanged(this, new FEHyetographDataRowChangeEvent(((FEHyetographDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FEHyetographDataRowChanging != null)) {
                    this.FEHyetographDataRowChanging(this, new FEHyetographDataRowChangeEvent(((FEHyetographDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FEHyetographDataRowDeleted != null)) {
                    this.FEHyetographDataRowDeleted(this, new FEHyetographDataRowChangeEvent(((FEHyetographDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FEHyetographDataRowDeleting != null)) {
                    this.FEHyetographDataRowDeleting(this, new FEHyetographDataRowChangeEvent(((FEHyetographDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFEHyetographDataRow(FEHyetographDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GridInterfaceDataSet ds = new GridInterfaceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FEHyetographDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FEHyetographsDataTable : global::System.Data.TypedTableBase<FEHyetographsRow> {
            
            private global::System.Data.DataColumn columnhyetograph_id;
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columntime_step_units;
            
            private global::System.Data.DataColumn columnsource;
            
            private global::System.Data.DataColumn columntime_step;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographsDataTable() {
                this.TableName = "FEHyetographs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEHyetographsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FEHyetographsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hyetograph_idColumn {
                get {
                    return this.columnhyetograph_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_step_unitsColumn {
                get {
                    return this.columntime_step_units;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sourceColumn {
                get {
                    return this.columnsource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_stepColumn {
                get {
                    return this.columntime_step;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographsRow this[int index] {
                get {
                    return ((FEHyetographsRow)(this.Rows[index]));
                }
            }
            
            public event FEHyetographsRowChangeEventHandler FEHyetographsRowChanging;
            
            public event FEHyetographsRowChangeEventHandler FEHyetographsRowChanged;
            
            public event FEHyetographsRowChangeEventHandler FEHyetographsRowDeleting;
            
            public event FEHyetographsRowChangeEventHandler FEHyetographsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFEHyetographsRow(FEHyetographsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographsRow AddFEHyetographsRow(string description, string time_step_units, string source, float time_step) {
                FEHyetographsRow rowFEHyetographsRow = ((FEHyetographsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        description,
                        time_step_units,
                        source,
                        time_step};
                rowFEHyetographsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFEHyetographsRow);
                return rowFEHyetographsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographsRow FindByhyetograph_id(int hyetograph_id) {
                return ((FEHyetographsRow)(this.Rows.Find(new object[] {
                            hyetograph_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FEHyetographsDataTable cln = ((FEHyetographsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FEHyetographsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnhyetograph_id = base.Columns["hyetograph_id"];
                this.columndescription = base.Columns["description"];
                this.columntime_step_units = base.Columns["time_step_units"];
                this.columnsource = base.Columns["source"];
                this.columntime_step = base.Columns["time_step"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnhyetograph_id = new global::System.Data.DataColumn("hyetograph_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhyetograph_id);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columntime_step_units = new global::System.Data.DataColumn("time_step_units", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_step_units);
                this.columnsource = new global::System.Data.DataColumn("source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsource);
                this.columntime_step = new global::System.Data.DataColumn("time_step", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_step);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnhyetograph_id}, true));
                this.columnhyetograph_id.AutoIncrement = true;
                this.columnhyetograph_id.AutoIncrementSeed = 1;
                this.columnhyetograph_id.AllowDBNull = false;
                this.columnhyetograph_id.Unique = true;
                this.columndescription.MaxLength = 50;
                this.columntime_step_units.MaxLength = 50;
                this.columnsource.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographsRow NewFEHyetographsRow() {
                return ((FEHyetographsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FEHyetographsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FEHyetographsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FEHyetographsRowChanged != null)) {
                    this.FEHyetographsRowChanged(this, new FEHyetographsRowChangeEvent(((FEHyetographsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FEHyetographsRowChanging != null)) {
                    this.FEHyetographsRowChanging(this, new FEHyetographsRowChangeEvent(((FEHyetographsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FEHyetographsRowDeleted != null)) {
                    this.FEHyetographsRowDeleted(this, new FEHyetographsRowChangeEvent(((FEHyetographsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FEHyetographsRowDeleting != null)) {
                    this.FEHyetographsRowDeleting(this, new FEHyetographsRowChangeEvent(((FEHyetographsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFEHyetographsRow(FEHyetographsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GridInterfaceDataSet ds = new GridInterfaceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FEHyetographsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FEModelRunDataTable : global::System.Data.TypedTableBase<FEModelRunRow> {
            
            private global::System.Data.DataColumn columnmodel_run_id;
            
            private global::System.Data.DataColumn columnscenario_id;
            
            private global::System.Data.DataColumn columnselection_set_area_id;
            
            private global::System.Data.DataColumn columnhyetograph_id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEModelRunDataTable() {
                this.TableName = "FEModelRun";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEModelRunDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FEModelRunDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn model_run_idColumn {
                get {
                    return this.columnmodel_run_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scenario_idColumn {
                get {
                    return this.columnscenario_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn selection_set_area_idColumn {
                get {
                    return this.columnselection_set_area_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hyetograph_idColumn {
                get {
                    return this.columnhyetograph_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEModelRunRow this[int index] {
                get {
                    return ((FEModelRunRow)(this.Rows[index]));
                }
            }
            
            public event FEModelRunRowChangeEventHandler FEModelRunRowChanging;
            
            public event FEModelRunRowChangeEventHandler FEModelRunRowChanged;
            
            public event FEModelRunRowChangeEventHandler FEModelRunRowDeleting;
            
            public event FEModelRunRowChangeEventHandler FEModelRunRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFEModelRunRow(FEModelRunRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEModelRunRow AddFEModelRunRow(FEScenariosRow parentFEScenariosRowByFE_SCENARIOSFE_MODEL_RUN, FESelectionSetAreasRow parentFESelectionSetAreasRowByFE_SELECTION_SET_AREASFE_GRID_MODEL_RUN, FEHyetographsRow parentFEHyetographsRowByFE_HYDROGRAPHSFE_GRID_MODEL_RUN) {
                FEModelRunRow rowFEModelRunRow = ((FEModelRunRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        null};
                if ((parentFEScenariosRowByFE_SCENARIOSFE_MODEL_RUN != null)) {
                    columnValuesArray[1] = parentFEScenariosRowByFE_SCENARIOSFE_MODEL_RUN[0];
                }
                if ((parentFESelectionSetAreasRowByFE_SELECTION_SET_AREASFE_GRID_MODEL_RUN != null)) {
                    columnValuesArray[2] = parentFESelectionSetAreasRowByFE_SELECTION_SET_AREASFE_GRID_MODEL_RUN[0];
                }
                if ((parentFEHyetographsRowByFE_HYDROGRAPHSFE_GRID_MODEL_RUN != null)) {
                    columnValuesArray[3] = parentFEHyetographsRowByFE_HYDROGRAPHSFE_GRID_MODEL_RUN[0];
                }
                rowFEModelRunRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFEModelRunRow);
                return rowFEModelRunRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEModelRunRow FindBymodel_run_id(int model_run_id) {
                return ((FEModelRunRow)(this.Rows.Find(new object[] {
                            model_run_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FEModelRunDataTable cln = ((FEModelRunDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FEModelRunDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnmodel_run_id = base.Columns["model_run_id"];
                this.columnscenario_id = base.Columns["scenario_id"];
                this.columnselection_set_area_id = base.Columns["selection_set_area_id"];
                this.columnhyetograph_id = base.Columns["hyetograph_id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnmodel_run_id = new global::System.Data.DataColumn("model_run_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel_run_id);
                this.columnscenario_id = new global::System.Data.DataColumn("scenario_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscenario_id);
                this.columnselection_set_area_id = new global::System.Data.DataColumn("selection_set_area_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnselection_set_area_id);
                this.columnhyetograph_id = new global::System.Data.DataColumn("hyetograph_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhyetograph_id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnmodel_run_id}, true));
                this.columnmodel_run_id.AutoIncrement = true;
                this.columnmodel_run_id.AutoIncrementSeed = 1;
                this.columnmodel_run_id.AllowDBNull = false;
                this.columnmodel_run_id.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEModelRunRow NewFEModelRunRow() {
                return ((FEModelRunRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FEModelRunRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FEModelRunRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FEModelRunRowChanged != null)) {
                    this.FEModelRunRowChanged(this, new FEModelRunRowChangeEvent(((FEModelRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FEModelRunRowChanging != null)) {
                    this.FEModelRunRowChanging(this, new FEModelRunRowChangeEvent(((FEModelRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FEModelRunRowDeleted != null)) {
                    this.FEModelRunRowDeleted(this, new FEModelRunRowChangeEvent(((FEModelRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FEModelRunRowDeleting != null)) {
                    this.FEModelRunRowDeleting(this, new FEModelRunRowChangeEvent(((FEModelRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFEModelRunRow(FEModelRunRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GridInterfaceDataSet ds = new GridInterfaceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FEModelRunDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FEScenariosDataTable : global::System.Data.TypedTableBase<FEScenariosRow> {
            
            private global::System.Data.DataColumn columnscenario_id;
            
            private global::System.Data.DataColumn columnproject_id;
            
            private global::System.Data.DataColumn columntime_period;
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columninclude_instream_facilities;
            
            private global::System.Data.DataColumn columnpollutant_loading_db;
            
            private global::System.Data.DataColumn columnpollutant_loading_table;
            
            private global::System.Data.DataColumn columnbmp_effectiveness_db;
            
            private global::System.Data.DataColumn columnbmp_effectiveness_table;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenariosDataTable() {
                this.TableName = "FEScenarios";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEScenariosDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FEScenariosDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scenario_idColumn {
                get {
                    return this.columnscenario_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn project_idColumn {
                get {
                    return this.columnproject_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_periodColumn {
                get {
                    return this.columntime_period;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn include_instream_facilitiesColumn {
                get {
                    return this.columninclude_instream_facilities;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pollutant_loading_dbColumn {
                get {
                    return this.columnpollutant_loading_db;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pollutant_loading_tableColumn {
                get {
                    return this.columnpollutant_loading_table;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bmp_effectiveness_dbColumn {
                get {
                    return this.columnbmp_effectiveness_db;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bmp_effectiveness_tableColumn {
                get {
                    return this.columnbmp_effectiveness_table;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenariosRow this[int index] {
                get {
                    return ((FEScenariosRow)(this.Rows[index]));
                }
            }
            
            public event FEScenariosRowChangeEventHandler FEScenariosRowChanging;
            
            public event FEScenariosRowChangeEventHandler FEScenariosRowChanged;
            
            public event FEScenariosRowChangeEventHandler FEScenariosRowDeleting;
            
            public event FEScenariosRowChangeEventHandler FEScenariosRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFEScenariosRow(FEScenariosRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenariosRow AddFEScenariosRow(FEGridProjectsRow parentFEGridProjectsRowByFE_GRID_PROJECTSFE_SCENARIOS, string time_period, string description, bool include_instream_facilities, string pollutant_loading_db, string pollutant_loading_table, string bmp_effectiveness_db, string bmp_effectiveness_table) {
                FEScenariosRow rowFEScenariosRow = ((FEScenariosRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        time_period,
                        description,
                        include_instream_facilities,
                        pollutant_loading_db,
                        pollutant_loading_table,
                        bmp_effectiveness_db,
                        bmp_effectiveness_table};
                if ((parentFEGridProjectsRowByFE_GRID_PROJECTSFE_SCENARIOS != null)) {
                    columnValuesArray[1] = parentFEGridProjectsRowByFE_GRID_PROJECTSFE_SCENARIOS[0];
                }
                rowFEScenariosRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFEScenariosRow);
                return rowFEScenariosRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenariosRow FindByscenario_id(int scenario_id) {
                return ((FEScenariosRow)(this.Rows.Find(new object[] {
                            scenario_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FEScenariosDataTable cln = ((FEScenariosDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FEScenariosDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnscenario_id = base.Columns["scenario_id"];
                this.columnproject_id = base.Columns["project_id"];
                this.columntime_period = base.Columns["time_period"];
                this.columndescription = base.Columns["description"];
                this.columninclude_instream_facilities = base.Columns["include_instream_facilities"];
                this.columnpollutant_loading_db = base.Columns["pollutant_loading_db"];
                this.columnpollutant_loading_table = base.Columns["pollutant_loading_table"];
                this.columnbmp_effectiveness_db = base.Columns["bmp_effectiveness_db"];
                this.columnbmp_effectiveness_table = base.Columns["bmp_effectiveness_table"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnscenario_id = new global::System.Data.DataColumn("scenario_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscenario_id);
                this.columnproject_id = new global::System.Data.DataColumn("project_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproject_id);
                this.columntime_period = new global::System.Data.DataColumn("time_period", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_period);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columninclude_instream_facilities = new global::System.Data.DataColumn("include_instream_facilities", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninclude_instream_facilities);
                this.columnpollutant_loading_db = new global::System.Data.DataColumn("pollutant_loading_db", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpollutant_loading_db);
                this.columnpollutant_loading_table = new global::System.Data.DataColumn("pollutant_loading_table", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpollutant_loading_table);
                this.columnbmp_effectiveness_db = new global::System.Data.DataColumn("bmp_effectiveness_db", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbmp_effectiveness_db);
                this.columnbmp_effectiveness_table = new global::System.Data.DataColumn("bmp_effectiveness_table", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbmp_effectiveness_table);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnscenario_id}, true));
                this.columnscenario_id.AutoIncrement = true;
                this.columnscenario_id.AutoIncrementSeed = 1;
                this.columnscenario_id.AllowDBNull = false;
                this.columnscenario_id.Unique = true;
                this.columntime_period.MaxLength = 50;
                this.columndescription.MaxLength = 50;
                this.columnpollutant_loading_db.MaxLength = 100;
                this.columnpollutant_loading_table.MaxLength = 50;
                this.columnbmp_effectiveness_db.MaxLength = 100;
                this.columnbmp_effectiveness_table.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenariosRow NewFEScenariosRow() {
                return ((FEScenariosRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FEScenariosRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FEScenariosRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FEScenariosRowChanged != null)) {
                    this.FEScenariosRowChanged(this, new FEScenariosRowChangeEvent(((FEScenariosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FEScenariosRowChanging != null)) {
                    this.FEScenariosRowChanging(this, new FEScenariosRowChangeEvent(((FEScenariosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FEScenariosRowDeleted != null)) {
                    this.FEScenariosRowDeleted(this, new FEScenariosRowChangeEvent(((FEScenariosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FEScenariosRowDeleting != null)) {
                    this.FEScenariosRowDeleting(this, new FEScenariosRowChangeEvent(((FEScenariosRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFEScenariosRow(FEScenariosRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GridInterfaceDataSet ds = new GridInterfaceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FEScenariosDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FESelectionSetAreasDataTable : global::System.Data.TypedTableBase<FESelectionSetAreasRow> {
            
            private global::System.Data.DataColumn columnselection_set_area_id;
            
            private global::System.Data.DataColumn columnproject_id;
            
            private global::System.Data.DataColumn columnarea;
            
            private global::System.Data.DataColumn columnsub_area;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetAreasDataTable() {
                this.TableName = "FESelectionSetAreas";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FESelectionSetAreasDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FESelectionSetAreasDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn selection_set_area_idColumn {
                get {
                    return this.columnselection_set_area_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn project_idColumn {
                get {
                    return this.columnproject_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn areaColumn {
                get {
                    return this.columnarea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sub_areaColumn {
                get {
                    return this.columnsub_area;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetAreasRow this[int index] {
                get {
                    return ((FESelectionSetAreasRow)(this.Rows[index]));
                }
            }
            
            public event FESelectionSetAreasRowChangeEventHandler FESelectionSetAreasRowChanging;
            
            public event FESelectionSetAreasRowChangeEventHandler FESelectionSetAreasRowChanged;
            
            public event FESelectionSetAreasRowChangeEventHandler FESelectionSetAreasRowDeleting;
            
            public event FESelectionSetAreasRowChangeEventHandler FESelectionSetAreasRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFESelectionSetAreasRow(FESelectionSetAreasRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetAreasRow AddFESelectionSetAreasRow(FEGridProjectsRow parentFEGridProjectsRowByFE_GRID_PROJECTSFE_SELECTION_SET_AREAS, string area, string sub_area) {
                FESelectionSetAreasRow rowFESelectionSetAreasRow = ((FESelectionSetAreasRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        area,
                        sub_area};
                if ((parentFEGridProjectsRowByFE_GRID_PROJECTSFE_SELECTION_SET_AREAS != null)) {
                    columnValuesArray[1] = parentFEGridProjectsRowByFE_GRID_PROJECTSFE_SELECTION_SET_AREAS[0];
                }
                rowFESelectionSetAreasRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFESelectionSetAreasRow);
                return rowFESelectionSetAreasRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetAreasRow FindByselection_set_area_id(int selection_set_area_id) {
                return ((FESelectionSetAreasRow)(this.Rows.Find(new object[] {
                            selection_set_area_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FESelectionSetAreasDataTable cln = ((FESelectionSetAreasDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FESelectionSetAreasDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnselection_set_area_id = base.Columns["selection_set_area_id"];
                this.columnproject_id = base.Columns["project_id"];
                this.columnarea = base.Columns["area"];
                this.columnsub_area = base.Columns["sub_area"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnselection_set_area_id = new global::System.Data.DataColumn("selection_set_area_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnselection_set_area_id);
                this.columnproject_id = new global::System.Data.DataColumn("project_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproject_id);
                this.columnarea = new global::System.Data.DataColumn("area", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnarea);
                this.columnsub_area = new global::System.Data.DataColumn("sub_area", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsub_area);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnselection_set_area_id}, true));
                this.columnselection_set_area_id.AutoIncrement = true;
                this.columnselection_set_area_id.AutoIncrementSeed = 1;
                this.columnselection_set_area_id.AllowDBNull = false;
                this.columnselection_set_area_id.Unique = true;
                this.columnarea.MaxLength = 50;
                this.columnsub_area.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetAreasRow NewFESelectionSetAreasRow() {
                return ((FESelectionSetAreasRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FESelectionSetAreasRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FESelectionSetAreasRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FESelectionSetAreasRowChanged != null)) {
                    this.FESelectionSetAreasRowChanged(this, new FESelectionSetAreasRowChangeEvent(((FESelectionSetAreasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FESelectionSetAreasRowChanging != null)) {
                    this.FESelectionSetAreasRowChanging(this, new FESelectionSetAreasRowChangeEvent(((FESelectionSetAreasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FESelectionSetAreasRowDeleted != null)) {
                    this.FESelectionSetAreasRowDeleted(this, new FESelectionSetAreasRowChangeEvent(((FESelectionSetAreasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FESelectionSetAreasRowDeleting != null)) {
                    this.FESelectionSetAreasRowDeleting(this, new FESelectionSetAreasRowChangeEvent(((FESelectionSetAreasRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFESelectionSetAreasRow(FESelectionSetAreasRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GridInterfaceDataSet ds = new GridInterfaceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FESelectionSetAreasDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QryModelRunDataTable : global::System.Data.TypedTableBase<QryModelRunRow> {
            
            private global::System.Data.DataColumn columntime_period;
            
            private global::System.Data.DataColumn columnscenario_id;
            
            private global::System.Data.DataColumn columnselection_set_area_id;
            
            private global::System.Data.DataColumn columnhyetograph_id;
            
            private global::System.Data.DataColumn columnproject_id;
            
            private global::System.Data.DataColumn columnmodel_run_id;
            
            private global::System.Data.DataColumn columnarea;
            
            private global::System.Data.DataColumn columnsub_area;
            
            private global::System.Data.DataColumn columninclude_instream_facilities;
            
            private global::System.Data.DataColumn columnproject_description;
            
            private global::System.Data.DataColumn columnpollutant_loading_db;
            
            private global::System.Data.DataColumn columnpollutant_loading_table;
            
            private global::System.Data.DataColumn columnbmp_effectiveness_db;
            
            private global::System.Data.DataColumn columnbmp_effectiveness_table;
            
            private global::System.Data.DataColumn columnscenario_description;
            
            private global::System.Data.DataColumn columnhyetograph_description;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryModelRunDataTable() {
                this.TableName = "QryModelRun";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QryModelRunDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QryModelRunDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn time_periodColumn {
                get {
                    return this.columntime_period;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scenario_idColumn {
                get {
                    return this.columnscenario_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn selection_set_area_idColumn {
                get {
                    return this.columnselection_set_area_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hyetograph_idColumn {
                get {
                    return this.columnhyetograph_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn project_idColumn {
                get {
                    return this.columnproject_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn model_run_idColumn {
                get {
                    return this.columnmodel_run_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn areaColumn {
                get {
                    return this.columnarea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sub_areaColumn {
                get {
                    return this.columnsub_area;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn include_instream_facilitiesColumn {
                get {
                    return this.columninclude_instream_facilities;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn project_descriptionColumn {
                get {
                    return this.columnproject_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pollutant_loading_dbColumn {
                get {
                    return this.columnpollutant_loading_db;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pollutant_loading_tableColumn {
                get {
                    return this.columnpollutant_loading_table;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bmp_effectiveness_dbColumn {
                get {
                    return this.columnbmp_effectiveness_db;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn bmp_effectiveness_tableColumn {
                get {
                    return this.columnbmp_effectiveness_table;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scenario_descriptionColumn {
                get {
                    return this.columnscenario_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn hyetograph_descriptionColumn {
                get {
                    return this.columnhyetograph_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryModelRunRow this[int index] {
                get {
                    return ((QryModelRunRow)(this.Rows[index]));
                }
            }
            
            public event QryModelRunRowChangeEventHandler QryModelRunRowChanging;
            
            public event QryModelRunRowChangeEventHandler QryModelRunRowChanged;
            
            public event QryModelRunRowChangeEventHandler QryModelRunRowDeleting;
            
            public event QryModelRunRowChangeEventHandler QryModelRunRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQryModelRunRow(QryModelRunRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryModelRunRow AddQryModelRunRow(string time_period, int scenario_id, int selection_set_area_id, int hyetograph_id, string area, string sub_area, bool include_instream_facilities, string project_description, string pollutant_loading_db, string pollutant_loading_table, string bmp_effectiveness_db, string bmp_effectiveness_table, string scenario_description, string hyetograph_description) {
                QryModelRunRow rowQryModelRunRow = ((QryModelRunRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        time_period,
                        scenario_id,
                        selection_set_area_id,
                        hyetograph_id,
                        null,
                        null,
                        area,
                        sub_area,
                        include_instream_facilities,
                        project_description,
                        pollutant_loading_db,
                        pollutant_loading_table,
                        bmp_effectiveness_db,
                        bmp_effectiveness_table,
                        scenario_description,
                        hyetograph_description};
                rowQryModelRunRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowQryModelRunRow);
                return rowQryModelRunRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryModelRunRow FindBymodel_run_id(int model_run_id) {
                return ((QryModelRunRow)(this.Rows.Find(new object[] {
                            model_run_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                QryModelRunDataTable cln = ((QryModelRunDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new QryModelRunDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntime_period = base.Columns["time_period"];
                this.columnscenario_id = base.Columns["scenario_id"];
                this.columnselection_set_area_id = base.Columns["selection_set_area_id"];
                this.columnhyetograph_id = base.Columns["hyetograph_id"];
                this.columnproject_id = base.Columns["project_id"];
                this.columnmodel_run_id = base.Columns["model_run_id"];
                this.columnarea = base.Columns["area"];
                this.columnsub_area = base.Columns["sub_area"];
                this.columninclude_instream_facilities = base.Columns["include_instream_facilities"];
                this.columnproject_description = base.Columns["project_description"];
                this.columnpollutant_loading_db = base.Columns["pollutant_loading_db"];
                this.columnpollutant_loading_table = base.Columns["pollutant_loading_table"];
                this.columnbmp_effectiveness_db = base.Columns["bmp_effectiveness_db"];
                this.columnbmp_effectiveness_table = base.Columns["bmp_effectiveness_table"];
                this.columnscenario_description = base.Columns["scenario_description"];
                this.columnhyetograph_description = base.Columns["hyetograph_description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntime_period = new global::System.Data.DataColumn("time_period", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntime_period);
                this.columnscenario_id = new global::System.Data.DataColumn("scenario_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscenario_id);
                this.columnselection_set_area_id = new global::System.Data.DataColumn("selection_set_area_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnselection_set_area_id);
                this.columnhyetograph_id = new global::System.Data.DataColumn("hyetograph_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhyetograph_id);
                this.columnproject_id = new global::System.Data.DataColumn("project_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproject_id);
                this.columnmodel_run_id = new global::System.Data.DataColumn("model_run_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmodel_run_id);
                this.columnarea = new global::System.Data.DataColumn("area", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnarea);
                this.columnsub_area = new global::System.Data.DataColumn("sub_area", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsub_area);
                this.columninclude_instream_facilities = new global::System.Data.DataColumn("include_instream_facilities", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninclude_instream_facilities);
                this.columnproject_description = new global::System.Data.DataColumn("project_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnproject_description);
                this.columnpollutant_loading_db = new global::System.Data.DataColumn("pollutant_loading_db", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpollutant_loading_db);
                this.columnpollutant_loading_table = new global::System.Data.DataColumn("pollutant_loading_table", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpollutant_loading_table);
                this.columnbmp_effectiveness_db = new global::System.Data.DataColumn("bmp_effectiveness_db", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbmp_effectiveness_db);
                this.columnbmp_effectiveness_table = new global::System.Data.DataColumn("bmp_effectiveness_table", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbmp_effectiveness_table);
                this.columnscenario_description = new global::System.Data.DataColumn("scenario_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscenario_description);
                this.columnhyetograph_description = new global::System.Data.DataColumn("hyetograph_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhyetograph_description);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnmodel_run_id}, true));
                this.columntime_period.MaxLength = 50;
                this.columnproject_id.AutoIncrement = true;
                this.columnproject_id.AutoIncrementSeed = -1;
                this.columnproject_id.AutoIncrementStep = -1;
                this.columnmodel_run_id.AutoIncrement = true;
                this.columnmodel_run_id.AutoIncrementSeed = 1;
                this.columnmodel_run_id.AllowDBNull = false;
                this.columnmodel_run_id.Unique = true;
                this.columnarea.MaxLength = 50;
                this.columnsub_area.MaxLength = 50;
                this.columnproject_description.MaxLength = 50;
                this.columnpollutant_loading_db.MaxLength = 100;
                this.columnpollutant_loading_table.MaxLength = 50;
                this.columnbmp_effectiveness_db.MaxLength = 100;
                this.columnbmp_effectiveness_table.MaxLength = 50;
                this.columnscenario_description.MaxLength = 255;
                this.columnhyetograph_description.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryModelRunRow NewQryModelRunRow() {
                return ((QryModelRunRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new QryModelRunRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(QryModelRunRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QryModelRunRowChanged != null)) {
                    this.QryModelRunRowChanged(this, new QryModelRunRowChangeEvent(((QryModelRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QryModelRunRowChanging != null)) {
                    this.QryModelRunRowChanging(this, new QryModelRunRowChangeEvent(((QryModelRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QryModelRunRowDeleted != null)) {
                    this.QryModelRunRowDeleted(this, new QryModelRunRowChangeEvent(((QryModelRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QryModelRunRowDeleting != null)) {
                    this.QryModelRunRowDeleting(this, new QryModelRunRowChangeEvent(((QryModelRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQryModelRunRow(QryModelRunRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GridInterfaceDataSet ds = new GridInterfaceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QryModelRunDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FEScenarioXProcessDataTable : global::System.Data.TypedTableBase<FEScenarioXProcessRow> {
            
            private global::System.Data.DataColumn columnscenario_x_process_id;
            
            private global::System.Data.DataColumn columnscenario_id;
            
            private global::System.Data.DataColumn columnprocess_group;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenarioXProcessDataTable() {
                this.TableName = "FEScenarioXProcess";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEScenarioXProcessDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FEScenarioXProcessDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scenario_x_process_idColumn {
                get {
                    return this.columnscenario_x_process_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scenario_idColumn {
                get {
                    return this.columnscenario_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn process_groupColumn {
                get {
                    return this.columnprocess_group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenarioXProcessRow this[int index] {
                get {
                    return ((FEScenarioXProcessRow)(this.Rows[index]));
                }
            }
            
            public event FEScenarioXProcessRowChangeEventHandler FEScenarioXProcessRowChanging;
            
            public event FEScenarioXProcessRowChangeEventHandler FEScenarioXProcessRowChanged;
            
            public event FEScenarioXProcessRowChangeEventHandler FEScenarioXProcessRowDeleting;
            
            public event FEScenarioXProcessRowChangeEventHandler FEScenarioXProcessRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFEScenarioXProcessRow(FEScenarioXProcessRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenarioXProcessRow AddFEScenarioXProcessRow(FEScenariosRow parentFEScenariosRowByFE_SCENARIOSFE_SCENARIO_X_PROCESS, string process_group) {
                FEScenarioXProcessRow rowFEScenarioXProcessRow = ((FEScenarioXProcessRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        process_group};
                if ((parentFEScenariosRowByFE_SCENARIOSFE_SCENARIO_X_PROCESS != null)) {
                    columnValuesArray[1] = parentFEScenariosRowByFE_SCENARIOSFE_SCENARIO_X_PROCESS[0];
                }
                rowFEScenarioXProcessRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFEScenarioXProcessRow);
                return rowFEScenarioXProcessRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenarioXProcessRow FindByscenario_x_process_id(int scenario_x_process_id) {
                return ((FEScenarioXProcessRow)(this.Rows.Find(new object[] {
                            scenario_x_process_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FEScenarioXProcessDataTable cln = ((FEScenarioXProcessDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FEScenarioXProcessDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnscenario_x_process_id = base.Columns["scenario_x_process_id"];
                this.columnscenario_id = base.Columns["scenario_id"];
                this.columnprocess_group = base.Columns["process_group"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnscenario_x_process_id = new global::System.Data.DataColumn("scenario_x_process_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscenario_x_process_id);
                this.columnscenario_id = new global::System.Data.DataColumn("scenario_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscenario_id);
                this.columnprocess_group = new global::System.Data.DataColumn("process_group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocess_group);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnscenario_x_process_id}, true));
                this.columnscenario_x_process_id.AutoIncrement = true;
                this.columnscenario_x_process_id.AutoIncrementSeed = 1;
                this.columnscenario_x_process_id.AllowDBNull = false;
                this.columnscenario_x_process_id.Unique = true;
                this.columnprocess_group.MaxLength = 60;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenarioXProcessRow NewFEScenarioXProcessRow() {
                return ((FEScenarioXProcessRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FEScenarioXProcessRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FEScenarioXProcessRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FEScenarioXProcessRowChanged != null)) {
                    this.FEScenarioXProcessRowChanged(this, new FEScenarioXProcessRowChangeEvent(((FEScenarioXProcessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FEScenarioXProcessRowChanging != null)) {
                    this.FEScenarioXProcessRowChanging(this, new FEScenarioXProcessRowChangeEvent(((FEScenarioXProcessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FEScenarioXProcessRowDeleted != null)) {
                    this.FEScenarioXProcessRowDeleted(this, new FEScenarioXProcessRowChangeEvent(((FEScenarioXProcessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FEScenarioXProcessRowDeleting != null)) {
                    this.FEScenarioXProcessRowDeleting(this, new FEScenarioXProcessRowChangeEvent(((FEScenarioXProcessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFEScenarioXProcessRow(FEScenarioXProcessRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GridInterfaceDataSet ds = new GridInterfaceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FEScenarioXProcessDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FEProcessDataTable : global::System.Data.TypedTableBase<FEProcessRow> {
            
            private global::System.Data.DataColumn columnprocess_id;
            
            private global::System.Data.DataColumn columnprocess_group;
            
            private global::System.Data.DataColumn columnprocess_name;
            
            private global::System.Data.DataColumn columncritical;
            
            private global::System.Data.DataColumn columnprocess_order;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessDataTable() {
                this.TableName = "FEProcess";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEProcessDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FEProcessDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn process_idColumn {
                get {
                    return this.columnprocess_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn process_groupColumn {
                get {
                    return this.columnprocess_group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn process_nameColumn {
                get {
                    return this.columnprocess_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn criticalColumn {
                get {
                    return this.columncritical;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn process_orderColumn {
                get {
                    return this.columnprocess_order;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessRow this[int index] {
                get {
                    return ((FEProcessRow)(this.Rows[index]));
                }
            }
            
            public event FEProcessRowChangeEventHandler FEProcessRowChanging;
            
            public event FEProcessRowChangeEventHandler FEProcessRowChanged;
            
            public event FEProcessRowChangeEventHandler FEProcessRowDeleting;
            
            public event FEProcessRowChangeEventHandler FEProcessRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFEProcessRow(FEProcessRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessRow AddFEProcessRow(FEProcessGroupRow parentFEProcessGroupRowByFEProcessGroup_FEProcess, string process_name, bool critical, float process_order) {
                FEProcessRow rowFEProcessRow = ((FEProcessRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        process_name,
                        critical,
                        process_order};
                if ((parentFEProcessGroupRowByFEProcessGroup_FEProcess != null)) {
                    columnValuesArray[1] = parentFEProcessGroupRowByFEProcessGroup_FEProcess[1];
                }
                rowFEProcessRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFEProcessRow);
                return rowFEProcessRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessRow FindByprocess_id(int process_id) {
                return ((FEProcessRow)(this.Rows.Find(new object[] {
                            process_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FEProcessDataTable cln = ((FEProcessDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FEProcessDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprocess_id = base.Columns["process_id"];
                this.columnprocess_group = base.Columns["process_group"];
                this.columnprocess_name = base.Columns["process_name"];
                this.columncritical = base.Columns["critical"];
                this.columnprocess_order = base.Columns["process_order"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprocess_id = new global::System.Data.DataColumn("process_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocess_id);
                this.columnprocess_group = new global::System.Data.DataColumn("process_group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocess_group);
                this.columnprocess_name = new global::System.Data.DataColumn("process_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocess_name);
                this.columncritical = new global::System.Data.DataColumn("critical", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncritical);
                this.columnprocess_order = new global::System.Data.DataColumn("process_order", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocess_order);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnprocess_id}, true));
                this.columnprocess_id.AutoIncrement = true;
                this.columnprocess_id.AutoIncrementSeed = 1;
                this.columnprocess_id.AllowDBNull = false;
                this.columnprocess_id.Unique = true;
                this.columnprocess_group.MaxLength = 20;
                this.columnprocess_name.MaxLength = 120;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessRow NewFEProcessRow() {
                return ((FEProcessRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FEProcessRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FEProcessRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FEProcessRowChanged != null)) {
                    this.FEProcessRowChanged(this, new FEProcessRowChangeEvent(((FEProcessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FEProcessRowChanging != null)) {
                    this.FEProcessRowChanging(this, new FEProcessRowChangeEvent(((FEProcessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FEProcessRowDeleted != null)) {
                    this.FEProcessRowDeleted(this, new FEProcessRowChangeEvent(((FEProcessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FEProcessRowDeleting != null)) {
                    this.FEProcessRowDeleting(this, new FEProcessRowChangeEvent(((FEProcessRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFEProcessRow(FEProcessRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GridInterfaceDataSet ds = new GridInterfaceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FEProcessDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FEProcessGroupDataTable : global::System.Data.TypedTableBase<FEProcessGroupRow> {
            
            private global::System.Data.DataColumn columnprocess_group_id;
            
            private global::System.Data.DataColumn columnprocess_group;
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columngroup_order;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessGroupDataTable() {
                this.TableName = "FEProcessGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEProcessGroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FEProcessGroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn process_group_idColumn {
                get {
                    return this.columnprocess_group_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn process_groupColumn {
                get {
                    return this.columnprocess_group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn group_orderColumn {
                get {
                    return this.columngroup_order;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessGroupRow this[int index] {
                get {
                    return ((FEProcessGroupRow)(this.Rows[index]));
                }
            }
            
            public event FEProcessGroupRowChangeEventHandler FEProcessGroupRowChanging;
            
            public event FEProcessGroupRowChangeEventHandler FEProcessGroupRowChanged;
            
            public event FEProcessGroupRowChangeEventHandler FEProcessGroupRowDeleting;
            
            public event FEProcessGroupRowChangeEventHandler FEProcessGroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFEProcessGroupRow(FEProcessGroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessGroupRow AddFEProcessGroupRow(int process_group_id, FEScenarioXProcessRow parentFEScenarioXProcessRowByFEScenarioXProcess_FEProcessGroup, string description, float group_order) {
                FEProcessGroupRow rowFEProcessGroupRow = ((FEProcessGroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        process_group_id,
                        null,
                        description,
                        group_order};
                if ((parentFEScenarioXProcessRowByFEScenarioXProcess_FEProcessGroup != null)) {
                    columnValuesArray[1] = parentFEScenarioXProcessRowByFEScenarioXProcess_FEProcessGroup[2];
                }
                rowFEProcessGroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFEProcessGroupRow);
                return rowFEProcessGroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessGroupRow FindByprocess_group(string process_group) {
                return ((FEProcessGroupRow)(this.Rows.Find(new object[] {
                            process_group})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FEProcessGroupDataTable cln = ((FEProcessGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FEProcessGroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprocess_group_id = base.Columns["process_group_id"];
                this.columnprocess_group = base.Columns["process_group"];
                this.columndescription = base.Columns["description"];
                this.columngroup_order = base.Columns["group_order"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprocess_group_id = new global::System.Data.DataColumn("process_group_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocess_group_id);
                this.columnprocess_group = new global::System.Data.DataColumn("process_group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocess_group);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columngroup_order = new global::System.Data.DataColumn("group_order", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroup_order);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnprocess_group}, true));
                this.columnprocess_group.AllowDBNull = false;
                this.columnprocess_group.Unique = true;
                this.columnprocess_group.MaxLength = 255;
                this.columndescription.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessGroupRow NewFEProcessGroupRow() {
                return ((FEProcessGroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FEProcessGroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FEProcessGroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FEProcessGroupRowChanged != null)) {
                    this.FEProcessGroupRowChanged(this, new FEProcessGroupRowChangeEvent(((FEProcessGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FEProcessGroupRowChanging != null)) {
                    this.FEProcessGroupRowChanging(this, new FEProcessGroupRowChangeEvent(((FEProcessGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FEProcessGroupRowDeleted != null)) {
                    this.FEProcessGroupRowDeleted(this, new FEProcessGroupRowChangeEvent(((FEProcessGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FEProcessGroupRowDeleting != null)) {
                    this.FEProcessGroupRowDeleting(this, new FEProcessGroupRowChangeEvent(((FEProcessGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFEProcessGroupRow(FEProcessGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GridInterfaceDataSet ds = new GridInterfaceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FEProcessGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QryProcessesDataTable : global::System.Data.TypedTableBase<QryProcessesRow> {
            
            private global::System.Data.DataColumn columnprocess_group;
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columnincluded_in_scenario;
            
            private global::System.Data.DataColumn columngroup_order;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryProcessesDataTable() {
                this.TableName = "QryProcesses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QryProcessesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QryProcessesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn process_groupColumn {
                get {
                    return this.columnprocess_group;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn included_in_scenarioColumn {
                get {
                    return this.columnincluded_in_scenario;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn group_orderColumn {
                get {
                    return this.columngroup_order;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryProcessesRow this[int index] {
                get {
                    return ((QryProcessesRow)(this.Rows[index]));
                }
            }
            
            public event QryProcessesRowChangeEventHandler QryProcessesRowChanging;
            
            public event QryProcessesRowChangeEventHandler QryProcessesRowChanged;
            
            public event QryProcessesRowChangeEventHandler QryProcessesRowDeleting;
            
            public event QryProcessesRowChangeEventHandler QryProcessesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQryProcessesRow(QryProcessesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryProcessesRow AddQryProcessesRow(string process_group, string description, bool included_in_scenario, double group_order) {
                QryProcessesRow rowQryProcessesRow = ((QryProcessesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        process_group,
                        description,
                        included_in_scenario,
                        group_order};
                rowQryProcessesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowQryProcessesRow);
                return rowQryProcessesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                QryProcessesDataTable cln = ((QryProcessesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new QryProcessesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnprocess_group = base.Columns["process_group"];
                this.columndescription = base.Columns["description"];
                this.columnincluded_in_scenario = base.Columns["included_in_scenario"];
                this.columngroup_order = base.Columns["group_order"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnprocess_group = new global::System.Data.DataColumn("process_group", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnprocess_group);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columnincluded_in_scenario = new global::System.Data.DataColumn("included_in_scenario", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnincluded_in_scenario);
                this.columngroup_order = new global::System.Data.DataColumn("group_order", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngroup_order);
                this.columnincluded_in_scenario.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryProcessesRow NewQryProcessesRow() {
                return ((QryProcessesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new QryProcessesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(QryProcessesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QryProcessesRowChanged != null)) {
                    this.QryProcessesRowChanged(this, new QryProcessesRowChangeEvent(((QryProcessesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QryProcessesRowChanging != null)) {
                    this.QryProcessesRowChanging(this, new QryProcessesRowChangeEvent(((QryProcessesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QryProcessesRowDeleted != null)) {
                    this.QryProcessesRowDeleted(this, new QryProcessesRowChangeEvent(((QryProcessesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QryProcessesRowDeleting != null)) {
                    this.QryProcessesRowDeleting(this, new QryProcessesRowChangeEvent(((QryProcessesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQryProcessesRow(QryProcessesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GridInterfaceDataSet ds = new GridInterfaceDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QryProcessesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FEGridProjectsRow : global::System.Data.DataRow {
            
            private FEGridProjectsDataTable tableFEGridProjects;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEGridProjectsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFEGridProjects = ((FEGridProjectsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int project_id {
                get {
                    return ((int)(this[this.tableFEGridProjects.project_idColumn]));
                }
                set {
                    this[this.tableFEGridProjects.project_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string project_description {
                get {
                    try {
                        return ((string)(this[this.tableFEGridProjects.project_descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'project_description\' in table \'FEGridProjects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEGridProjects.project_descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string grid_path {
                get {
                    try {
                        return ((string)(this[this.tableFEGridProjects.grid_pathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'grid_path\' in table \'FEGridProjects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEGridProjects.grid_pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bmp_path {
                get {
                    try {
                        return ((string)(this[this.tableFEGridProjects.bmp_pathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bmp_path\' in table \'FEGridProjects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEGridProjects.bmp_pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mip_path {
                get {
                    try {
                        return ((string)(this[this.tableFEGridProjects.mip_pathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'mip_path\' in table \'FEGridProjects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEGridProjects.mip_pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string osf_path {
                get {
                    try {
                        return ((string)(this[this.tableFEGridProjects.osf_pathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'osf_path\' in table \'FEGridProjects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEGridProjects.osf_pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string default_output_path {
                get {
                    try {
                        return ((string)(this[this.tableFEGridProjects.default_output_pathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'default_output_path\' in table \'FEGridProjects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEGridProjects.default_output_pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isproject_descriptionNull() {
                return this.IsNull(this.tableFEGridProjects.project_descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setproject_descriptionNull() {
                this[this.tableFEGridProjects.project_descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgrid_pathNull() {
                return this.IsNull(this.tableFEGridProjects.grid_pathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgrid_pathNull() {
                this[this.tableFEGridProjects.grid_pathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbmp_pathNull() {
                return this.IsNull(this.tableFEGridProjects.bmp_pathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbmp_pathNull() {
                this[this.tableFEGridProjects.bmp_pathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismip_pathNull() {
                return this.IsNull(this.tableFEGridProjects.mip_pathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmip_pathNull() {
                this[this.tableFEGridProjects.mip_pathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isosf_pathNull() {
                return this.IsNull(this.tableFEGridProjects.osf_pathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setosf_pathNull() {
                this[this.tableFEGridProjects.osf_pathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdefault_output_pathNull() {
                return this.IsNull(this.tableFEGridProjects.default_output_pathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdefault_output_pathNull() {
                this[this.tableFEGridProjects.default_output_pathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenariosRow[] GetFEScenariosRows() {
                if ((this.Table.ChildRelations["FE_GRID_PROJECTSFE_SCENARIOS"] == null)) {
                    return new FEScenariosRow[0];
                }
                else {
                    return ((FEScenariosRow[])(base.GetChildRows(this.Table.ChildRelations["FE_GRID_PROJECTSFE_SCENARIOS"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetAreasRow[] GetFESelectionSetAreasRows() {
                if ((this.Table.ChildRelations["FE_GRID_PROJECTSFE_SELECTION_SET_AREAS"] == null)) {
                    return new FESelectionSetAreasRow[0];
                }
                else {
                    return ((FESelectionSetAreasRow[])(base.GetChildRows(this.Table.ChildRelations["FE_GRID_PROJECTSFE_SELECTION_SET_AREAS"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryModelRunRow[] GetQryModelRunRows() {
                if ((this.Table.ChildRelations["FEGridProjects_QryModelRun"] == null)) {
                    return new QryModelRunRow[0];
                }
                else {
                    return ((QryModelRunRow[])(base.GetChildRows(this.Table.ChildRelations["FEGridProjects_QryModelRun"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FESelectionSetsRow : global::System.Data.DataRow {
            
            private FESelectionSetsDataTable tableFESelectionSets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FESelectionSetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFESelectionSets = ((FESelectionSetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int selection_set_id {
                get {
                    return ((int)(this[this.tableFESelectionSets.selection_set_idColumn]));
                }
                set {
                    this[this.tableFESelectionSets.selection_set_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int selection_set_area_id {
                get {
                    try {
                        return ((int)(this[this.tableFESelectionSets.selection_set_area_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'selection_set_area_id\' in table \'FESelectionSets\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableFESelectionSets.selection_set_area_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableFESelectionSets.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'FESelectionSets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFESelectionSets.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string col_name {
                get {
                    try {
                        return ((string)(this[this.tableFESelectionSets.col_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'col_name\' in table \'FESelectionSets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFESelectionSets.col_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string row_name {
                get {
                    try {
                        return ((string)(this[this.tableFESelectionSets.row_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'row_name\' in table \'FESelectionSets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFESelectionSets.row_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float percent_overlap {
                get {
                    try {
                        return ((float)(this[this.tableFESelectionSets.percent_overlapColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'percent_overlap\' in table \'FESelectionSets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFESelectionSets.percent_overlapColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetAreasRow FESelectionSetAreasRow {
                get {
                    return ((FESelectionSetAreasRow)(this.GetParentRow(this.Table.ParentRelations["FE_SELECTION_SET_AREASFE_SELECTION_SETS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FE_SELECTION_SET_AREASFE_SELECTION_SETS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isselection_set_area_idNull() {
                return this.IsNull(this.tableFESelectionSets.selection_set_area_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setselection_set_area_idNull() {
                this[this.tableFESelectionSets.selection_set_area_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableFESelectionSets.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableFESelectionSets.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscol_nameNull() {
                return this.IsNull(this.tableFESelectionSets.col_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcol_nameNull() {
                this[this.tableFESelectionSets.col_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrow_nameNull() {
                return this.IsNull(this.tableFESelectionSets.row_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrow_nameNull() {
                this[this.tableFESelectionSets.row_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispercent_overlapNull() {
                return this.IsNull(this.tableFESelectionSets.percent_overlapColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpercent_overlapNull() {
                this[this.tableFESelectionSets.percent_overlapColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FEHyetographDataRow : global::System.Data.DataRow {
            
            private FEHyetographDataDataTable tableFEHyetographData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEHyetographDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFEHyetographData = ((FEHyetographDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int hyetograph_data_id {
                get {
                    return ((int)(this[this.tableFEHyetographData.hyetograph_data_idColumn]));
                }
                set {
                    this[this.tableFEHyetographData.hyetograph_data_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int hyetograph_id {
                get {
                    try {
                        return ((int)(this[this.tableFEHyetographData.hyetograph_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hyetograph_id\' in table \'FEHyetographData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEHyetographData.hyetograph_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int run_order {
                get {
                    try {
                        return ((int)(this[this.tableFEHyetographData.run_orderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'run_order\' in table \'FEHyetographData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEHyetographData.run_orderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment {
                get {
                    if (this.IscommentNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFEHyetographData.commentColumn]));
                    }
                }
                set {
                    this[this.tableFEHyetographData.commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float rainfall {
                get {
                    try {
                        return ((float)(this[this.tableFEHyetographData.rainfallColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rainfall\' in table \'FEHyetographData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEHyetographData.rainfallColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographsRow FEHyetographsRow {
                get {
                    return ((FEHyetographsRow)(this.GetParentRow(this.Table.ParentRelations["FE_HYETOGRAPHSFE_HYETOGRAPH_DATA"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FE_HYETOGRAPHSFE_HYETOGRAPH_DATA"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishyetograph_idNull() {
                return this.IsNull(this.tableFEHyetographData.hyetograph_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethyetograph_idNull() {
                this[this.tableFEHyetographData.hyetograph_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrun_orderNull() {
                return this.IsNull(this.tableFEHyetographData.run_orderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrun_orderNull() {
                this[this.tableFEHyetographData.run_orderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentNull() {
                return this.IsNull(this.tableFEHyetographData.commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentNull() {
                this[this.tableFEHyetographData.commentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrainfallNull() {
                return this.IsNull(this.tableFEHyetographData.rainfallColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrainfallNull() {
                this[this.tableFEHyetographData.rainfallColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FEHyetographsRow : global::System.Data.DataRow {
            
            private FEHyetographsDataTable tableFEHyetographs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEHyetographsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFEHyetographs = ((FEHyetographsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int hyetograph_id {
                get {
                    return ((int)(this[this.tableFEHyetographs.hyetograph_idColumn]));
                }
                set {
                    this[this.tableFEHyetographs.hyetograph_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableFEHyetographs.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'FEHyetographs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEHyetographs.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string time_step_units {
                get {
                    try {
                        return ((string)(this[this.tableFEHyetographs.time_step_unitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'time_step_units\' in table \'FEHyetographs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEHyetographs.time_step_unitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string source {
                get {
                    try {
                        return ((string)(this[this.tableFEHyetographs.sourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'source\' in table \'FEHyetographs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEHyetographs.sourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float time_step {
                get {
                    try {
                        return ((float)(this[this.tableFEHyetographs.time_stepColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'time_step\' in table \'FEHyetographs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEHyetographs.time_stepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableFEHyetographs.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableFEHyetographs.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istime_step_unitsNull() {
                return this.IsNull(this.tableFEHyetographs.time_step_unitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settime_step_unitsNull() {
                this[this.tableFEHyetographs.time_step_unitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssourceNull() {
                return this.IsNull(this.tableFEHyetographs.sourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsourceNull() {
                this[this.tableFEHyetographs.sourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istime_stepNull() {
                return this.IsNull(this.tableFEHyetographs.time_stepColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settime_stepNull() {
                this[this.tableFEHyetographs.time_stepColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographDataRow[] GetFE_HYETOGRAPH_DATARows() {
                if ((this.Table.ChildRelations["FE_HYETOGRAPHSFE_HYETOGRAPH_DATA"] == null)) {
                    return new FEHyetographDataRow[0];
                }
                else {
                    return ((FEHyetographDataRow[])(base.GetChildRows(this.Table.ChildRelations["FE_HYETOGRAPHSFE_HYETOGRAPH_DATA"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEModelRunRow[] GetFEModelRunRows() {
                if ((this.Table.ChildRelations["FE_HYDROGRAPHSFE_GRID_MODEL_RUN"] == null)) {
                    return new FEModelRunRow[0];
                }
                else {
                    return ((FEModelRunRow[])(base.GetChildRows(this.Table.ChildRelations["FE_HYDROGRAPHSFE_GRID_MODEL_RUN"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FEModelRunRow : global::System.Data.DataRow {
            
            private FEModelRunDataTable tableFEModelRun;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEModelRunRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFEModelRun = ((FEModelRunDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int model_run_id {
                get {
                    return ((int)(this[this.tableFEModelRun.model_run_idColumn]));
                }
                set {
                    this[this.tableFEModelRun.model_run_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scenario_id {
                get {
                    try {
                        return ((int)(this[this.tableFEModelRun.scenario_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scenario_id\' in table \'FEModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEModelRun.scenario_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int selection_set_area_id {
                get {
                    try {
                        return ((int)(this[this.tableFEModelRun.selection_set_area_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'selection_set_area_id\' in table \'FEModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEModelRun.selection_set_area_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int hyetograph_id {
                get {
                    try {
                        return ((int)(this[this.tableFEModelRun.hyetograph_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hyetograph_id\' in table \'FEModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEModelRun.hyetograph_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographsRow FE_HYETOGRAPHSRow {
                get {
                    return ((FEHyetographsRow)(this.GetParentRow(this.Table.ParentRelations["FE_HYDROGRAPHSFE_GRID_MODEL_RUN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FE_HYDROGRAPHSFE_GRID_MODEL_RUN"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenariosRow FEScenariosRow {
                get {
                    return ((FEScenariosRow)(this.GetParentRow(this.Table.ParentRelations["FE_SCENARIOSFE_MODEL_RUN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FE_SCENARIOSFE_MODEL_RUN"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetAreasRow FESelectionSetAreasRow {
                get {
                    return ((FESelectionSetAreasRow)(this.GetParentRow(this.Table.ParentRelations["FE_SELECTION_SET_AREASFE_GRID_MODEL_RUN"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FE_SELECTION_SET_AREASFE_GRID_MODEL_RUN"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscenario_idNull() {
                return this.IsNull(this.tableFEModelRun.scenario_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscenario_idNull() {
                this[this.tableFEModelRun.scenario_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isselection_set_area_idNull() {
                return this.IsNull(this.tableFEModelRun.selection_set_area_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setselection_set_area_idNull() {
                this[this.tableFEModelRun.selection_set_area_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishyetograph_idNull() {
                return this.IsNull(this.tableFEModelRun.hyetograph_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethyetograph_idNull() {
                this[this.tableFEModelRun.hyetograph_idColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FEScenariosRow : global::System.Data.DataRow {
            
            private FEScenariosDataTable tableFEScenarios;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEScenariosRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFEScenarios = ((FEScenariosDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scenario_id {
                get {
                    return ((int)(this[this.tableFEScenarios.scenario_idColumn]));
                }
                set {
                    this[this.tableFEScenarios.scenario_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int project_id {
                get {
                    try {
                        return ((int)(this[this.tableFEScenarios.project_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'project_id\' in table \'FEScenarios\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEScenarios.project_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string time_period {
                get {
                    try {
                        return ((string)(this[this.tableFEScenarios.time_periodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'time_period\' in table \'FEScenarios\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEScenarios.time_periodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableFEScenarios.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'FEScenarios\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEScenarios.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool include_instream_facilities {
                get {
                    try {
                        return ((bool)(this[this.tableFEScenarios.include_instream_facilitiesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'include_instream_facilities\' in table \'FEScenarios\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableFEScenarios.include_instream_facilitiesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pollutant_loading_db {
                get {
                    if (this.Ispollutant_loading_dbNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFEScenarios.pollutant_loading_dbColumn]));
                    }
                }
                set {
                    this[this.tableFEScenarios.pollutant_loading_dbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pollutant_loading_table {
                get {
                    if (this.Ispollutant_loading_tableNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFEScenarios.pollutant_loading_tableColumn]));
                    }
                }
                set {
                    this[this.tableFEScenarios.pollutant_loading_tableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bmp_effectiveness_db {
                get {
                    if (this.Isbmp_effectiveness_dbNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFEScenarios.bmp_effectiveness_dbColumn]));
                    }
                }
                set {
                    this[this.tableFEScenarios.bmp_effectiveness_dbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bmp_effectiveness_table {
                get {
                    if (this.Isbmp_effectiveness_tableNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFEScenarios.bmp_effectiveness_tableColumn]));
                    }
                }
                set {
                    this[this.tableFEScenarios.bmp_effectiveness_tableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEGridProjectsRow FE_GRID_PROJECTSRow {
                get {
                    return ((FEGridProjectsRow)(this.GetParentRow(this.Table.ParentRelations["FE_GRID_PROJECTSFE_SCENARIOS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FE_GRID_PROJECTSFE_SCENARIOS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryModelRunRow QryModelRunRow {
                get {
                    return ((QryModelRunRow)(this.GetParentRow(this.Table.ParentRelations["FE_GRID_PROJECTSFE_SCENARIOS1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FE_GRID_PROJECTSFE_SCENARIOS1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isproject_idNull() {
                return this.IsNull(this.tableFEScenarios.project_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setproject_idNull() {
                this[this.tableFEScenarios.project_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istime_periodNull() {
                return this.IsNull(this.tableFEScenarios.time_periodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settime_periodNull() {
                this[this.tableFEScenarios.time_periodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableFEScenarios.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableFEScenarios.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinclude_instream_facilitiesNull() {
                return this.IsNull(this.tableFEScenarios.include_instream_facilitiesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinclude_instream_facilitiesNull() {
                this[this.tableFEScenarios.include_instream_facilitiesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispollutant_loading_dbNull() {
                return this.IsNull(this.tableFEScenarios.pollutant_loading_dbColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpollutant_loading_dbNull() {
                this[this.tableFEScenarios.pollutant_loading_dbColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispollutant_loading_tableNull() {
                return this.IsNull(this.tableFEScenarios.pollutant_loading_tableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpollutant_loading_tableNull() {
                this[this.tableFEScenarios.pollutant_loading_tableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbmp_effectiveness_dbNull() {
                return this.IsNull(this.tableFEScenarios.bmp_effectiveness_dbColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbmp_effectiveness_dbNull() {
                this[this.tableFEScenarios.bmp_effectiveness_dbColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbmp_effectiveness_tableNull() {
                return this.IsNull(this.tableFEScenarios.bmp_effectiveness_tableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbmp_effectiveness_tableNull() {
                this[this.tableFEScenarios.bmp_effectiveness_tableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenarioXProcessRow[] GetFEScenarioXProcessRows() {
                if ((this.Table.ChildRelations["FE_SCENARIOSFE_SCENARIO_X_PROCESS"] == null)) {
                    return new FEScenarioXProcessRow[0];
                }
                else {
                    return ((FEScenarioXProcessRow[])(base.GetChildRows(this.Table.ChildRelations["FE_SCENARIOSFE_SCENARIO_X_PROCESS"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEModelRunRow[] GetFE_MODEL_RUNRows() {
                if ((this.Table.ChildRelations["FE_SCENARIOSFE_MODEL_RUN"] == null)) {
                    return new FEModelRunRow[0];
                }
                else {
                    return ((FEModelRunRow[])(base.GetChildRows(this.Table.ChildRelations["FE_SCENARIOSFE_MODEL_RUN"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FESelectionSetAreasRow : global::System.Data.DataRow {
            
            private FESelectionSetAreasDataTable tableFESelectionSetAreas;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FESelectionSetAreasRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFESelectionSetAreas = ((FESelectionSetAreasDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int selection_set_area_id {
                get {
                    return ((int)(this[this.tableFESelectionSetAreas.selection_set_area_idColumn]));
                }
                set {
                    this[this.tableFESelectionSetAreas.selection_set_area_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int project_id {
                get {
                    try {
                        return ((int)(this[this.tableFESelectionSetAreas.project_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'project_id\' in table \'FESelectionSetAreas\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFESelectionSetAreas.project_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string area {
                get {
                    try {
                        return ((string)(this[this.tableFESelectionSetAreas.areaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'area\' in table \'FESelectionSetAreas\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFESelectionSetAreas.areaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sub_area {
                get {
                    try {
                        return ((string)(this[this.tableFESelectionSetAreas.sub_areaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sub_area\' in table \'FESelectionSetAreas\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFESelectionSetAreas.sub_areaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEGridProjectsRow FE_GRID_PROJECTSRow {
                get {
                    return ((FEGridProjectsRow)(this.GetParentRow(this.Table.ParentRelations["FE_GRID_PROJECTSFE_SELECTION_SET_AREAS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FE_GRID_PROJECTSFE_SELECTION_SET_AREAS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryModelRunRow QryModelRunRow {
                get {
                    return ((QryModelRunRow)(this.GetParentRow(this.Table.ParentRelations["FE_GRID_PROJECTSFE_SELECTION_SET_AREAS1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FE_GRID_PROJECTSFE_SELECTION_SET_AREAS1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isproject_idNull() {
                return this.IsNull(this.tableFESelectionSetAreas.project_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setproject_idNull() {
                this[this.tableFESelectionSetAreas.project_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsareaNull() {
                return this.IsNull(this.tableFESelectionSetAreas.areaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetareaNull() {
                this[this.tableFESelectionSetAreas.areaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issub_areaNull() {
                return this.IsNull(this.tableFESelectionSetAreas.sub_areaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsub_areaNull() {
                this[this.tableFESelectionSetAreas.sub_areaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetsRow[] GetFE_SELECTION_SETSRows() {
                if ((this.Table.ChildRelations["FE_SELECTION_SET_AREASFE_SELECTION_SETS"] == null)) {
                    return new FESelectionSetsRow[0];
                }
                else {
                    return ((FESelectionSetsRow[])(base.GetChildRows(this.Table.ChildRelations["FE_SELECTION_SET_AREASFE_SELECTION_SETS"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEModelRunRow[] GetFE_MODEL_RUNRows() {
                if ((this.Table.ChildRelations["FE_SELECTION_SET_AREASFE_GRID_MODEL_RUN"] == null)) {
                    return new FEModelRunRow[0];
                }
                else {
                    return ((FEModelRunRow[])(base.GetChildRows(this.Table.ChildRelations["FE_SELECTION_SET_AREASFE_GRID_MODEL_RUN"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QryModelRunRow : global::System.Data.DataRow {
            
            private QryModelRunDataTable tableQryModelRun;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QryModelRunRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQryModelRun = ((QryModelRunDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string time_period {
                get {
                    try {
                        return ((string)(this[this.tableQryModelRun.time_periodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'time_period\' in table \'QryModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.time_periodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scenario_id {
                get {
                    try {
                        return ((int)(this[this.tableQryModelRun.scenario_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scenario_id\' in table \'QryModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.scenario_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int selection_set_area_id {
                get {
                    try {
                        return ((int)(this[this.tableQryModelRun.selection_set_area_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'selection_set_area_id\' in table \'QryModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.selection_set_area_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int hyetograph_id {
                get {
                    try {
                        return ((int)(this[this.tableQryModelRun.hyetograph_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hyetograph_id\' in table \'QryModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.hyetograph_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int project_id {
                get {
                    try {
                        return ((int)(this[this.tableQryModelRun.project_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'project_id\' in table \'QryModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.project_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int model_run_id {
                get {
                    return ((int)(this[this.tableQryModelRun.model_run_idColumn]));
                }
                set {
                    this[this.tableQryModelRun.model_run_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string area {
                get {
                    try {
                        return ((string)(this[this.tableQryModelRun.areaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'area\' in table \'QryModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.areaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sub_area {
                get {
                    try {
                        return ((string)(this[this.tableQryModelRun.sub_areaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sub_area\' in table \'QryModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.sub_areaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool include_instream_facilities {
                get {
                    try {
                        return ((bool)(this[this.tableQryModelRun.include_instream_facilitiesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'include_instream_facilities\' in table \'QryModelRun\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.include_instream_facilitiesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string project_description {
                get {
                    try {
                        return ((string)(this[this.tableQryModelRun.project_descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'project_description\' in table \'QryModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.project_descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pollutant_loading_db {
                get {
                    try {
                        return ((string)(this[this.tableQryModelRun.pollutant_loading_dbColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pollutant_loading_db\' in table \'QryModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.pollutant_loading_dbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pollutant_loading_table {
                get {
                    try {
                        return ((string)(this[this.tableQryModelRun.pollutant_loading_tableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'pollutant_loading_table\' in table \'QryModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.pollutant_loading_tableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bmp_effectiveness_db {
                get {
                    try {
                        return ((string)(this[this.tableQryModelRun.bmp_effectiveness_dbColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bmp_effectiveness_db\' in table \'QryModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.bmp_effectiveness_dbColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string bmp_effectiveness_table {
                get {
                    try {
                        return ((string)(this[this.tableQryModelRun.bmp_effectiveness_tableColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'bmp_effectiveness_table\' in table \'QryModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.bmp_effectiveness_tableColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string scenario_description {
                get {
                    try {
                        return ((string)(this[this.tableQryModelRun.scenario_descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scenario_description\' in table \'QryModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.scenario_descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string hyetograph_description {
                get {
                    try {
                        return ((string)(this[this.tableQryModelRun.hyetograph_descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'hyetograph_description\' in table \'QryModelRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryModelRun.hyetograph_descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEGridProjectsRow FEGridProjectsRow {
                get {
                    return ((FEGridProjectsRow)(this.GetParentRow(this.Table.ParentRelations["FEGridProjects_QryModelRun"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FEGridProjects_QryModelRun"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istime_periodNull() {
                return this.IsNull(this.tableQryModelRun.time_periodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settime_periodNull() {
                this[this.tableQryModelRun.time_periodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscenario_idNull() {
                return this.IsNull(this.tableQryModelRun.scenario_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscenario_idNull() {
                this[this.tableQryModelRun.scenario_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isselection_set_area_idNull() {
                return this.IsNull(this.tableQryModelRun.selection_set_area_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setselection_set_area_idNull() {
                this[this.tableQryModelRun.selection_set_area_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishyetograph_idNull() {
                return this.IsNull(this.tableQryModelRun.hyetograph_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethyetograph_idNull() {
                this[this.tableQryModelRun.hyetograph_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isproject_idNull() {
                return this.IsNull(this.tableQryModelRun.project_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setproject_idNull() {
                this[this.tableQryModelRun.project_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsareaNull() {
                return this.IsNull(this.tableQryModelRun.areaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetareaNull() {
                this[this.tableQryModelRun.areaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Issub_areaNull() {
                return this.IsNull(this.tableQryModelRun.sub_areaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setsub_areaNull() {
                this[this.tableQryModelRun.sub_areaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinclude_instream_facilitiesNull() {
                return this.IsNull(this.tableQryModelRun.include_instream_facilitiesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinclude_instream_facilitiesNull() {
                this[this.tableQryModelRun.include_instream_facilitiesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isproject_descriptionNull() {
                return this.IsNull(this.tableQryModelRun.project_descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setproject_descriptionNull() {
                this[this.tableQryModelRun.project_descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispollutant_loading_dbNull() {
                return this.IsNull(this.tableQryModelRun.pollutant_loading_dbColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpollutant_loading_dbNull() {
                this[this.tableQryModelRun.pollutant_loading_dbColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispollutant_loading_tableNull() {
                return this.IsNull(this.tableQryModelRun.pollutant_loading_tableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpollutant_loading_tableNull() {
                this[this.tableQryModelRun.pollutant_loading_tableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbmp_effectiveness_dbNull() {
                return this.IsNull(this.tableQryModelRun.bmp_effectiveness_dbColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbmp_effectiveness_dbNull() {
                this[this.tableQryModelRun.bmp_effectiveness_dbColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isbmp_effectiveness_tableNull() {
                return this.IsNull(this.tableQryModelRun.bmp_effectiveness_tableColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setbmp_effectiveness_tableNull() {
                this[this.tableQryModelRun.bmp_effectiveness_tableColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscenario_descriptionNull() {
                return this.IsNull(this.tableQryModelRun.scenario_descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscenario_descriptionNull() {
                this[this.tableQryModelRun.scenario_descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ishyetograph_descriptionNull() {
                return this.IsNull(this.tableQryModelRun.hyetograph_descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Sethyetograph_descriptionNull() {
                this[this.tableQryModelRun.hyetograph_descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenariosRow[] GetFEScenariosRows() {
                if ((this.Table.ChildRelations["FE_GRID_PROJECTSFE_SCENARIOS1"] == null)) {
                    return new FEScenariosRow[0];
                }
                else {
                    return ((FEScenariosRow[])(base.GetChildRows(this.Table.ChildRelations["FE_GRID_PROJECTSFE_SCENARIOS1"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetAreasRow[] GetFESelectionSetAreasRows() {
                if ((this.Table.ChildRelations["FE_GRID_PROJECTSFE_SELECTION_SET_AREAS1"] == null)) {
                    return new FESelectionSetAreasRow[0];
                }
                else {
                    return ((FESelectionSetAreasRow[])(base.GetChildRows(this.Table.ChildRelations["FE_GRID_PROJECTSFE_SELECTION_SET_AREAS1"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FEScenarioXProcessRow : global::System.Data.DataRow {
            
            private FEScenarioXProcessDataTable tableFEScenarioXProcess;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEScenarioXProcessRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFEScenarioXProcess = ((FEScenarioXProcessDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scenario_x_process_id {
                get {
                    return ((int)(this[this.tableFEScenarioXProcess.scenario_x_process_idColumn]));
                }
                set {
                    this[this.tableFEScenarioXProcess.scenario_x_process_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scenario_id {
                get {
                    try {
                        return ((int)(this[this.tableFEScenarioXProcess.scenario_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scenario_id\' in table \'FEScenarioXProcess\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEScenarioXProcess.scenario_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string process_group {
                get {
                    try {
                        return ((string)(this[this.tableFEScenarioXProcess.process_groupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'process_group\' in table \'FEScenarioXProcess\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEScenarioXProcess.process_groupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenariosRow FEScenariosRow {
                get {
                    return ((FEScenariosRow)(this.GetParentRow(this.Table.ParentRelations["FE_SCENARIOSFE_SCENARIO_X_PROCESS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FE_SCENARIOSFE_SCENARIO_X_PROCESS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscenario_idNull() {
                return this.IsNull(this.tableFEScenarioXProcess.scenario_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscenario_idNull() {
                this[this.tableFEScenarioXProcess.scenario_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprocess_groupNull() {
                return this.IsNull(this.tableFEScenarioXProcess.process_groupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprocess_groupNull() {
                this[this.tableFEScenarioXProcess.process_groupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessGroupRow[] GetFEProcessGroupRows() {
                if ((this.Table.ChildRelations["FEScenarioXProcess_FEProcessGroup"] == null)) {
                    return new FEProcessGroupRow[0];
                }
                else {
                    return ((FEProcessGroupRow[])(base.GetChildRows(this.Table.ChildRelations["FEScenarioXProcess_FEProcessGroup"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FEProcessRow : global::System.Data.DataRow {
            
            private FEProcessDataTable tableFEProcess;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEProcessRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFEProcess = ((FEProcessDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int process_id {
                get {
                    return ((int)(this[this.tableFEProcess.process_idColumn]));
                }
                set {
                    this[this.tableFEProcess.process_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string process_group {
                get {
                    try {
                        return ((string)(this[this.tableFEProcess.process_groupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'process_group\' in table \'FEProcess\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEProcess.process_groupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string process_name {
                get {
                    try {
                        return ((string)(this[this.tableFEProcess.process_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'process_name\' in table \'FEProcess\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEProcess.process_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool critical {
                get {
                    try {
                        return ((bool)(this[this.tableFEProcess.criticalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'critical\' in table \'FEProcess\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEProcess.criticalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float process_order {
                get {
                    try {
                        return ((float)(this[this.tableFEProcess.process_orderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'process_order\' in table \'FEProcess\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEProcess.process_orderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessGroupRow FEProcessGroupRow {
                get {
                    return ((FEProcessGroupRow)(this.GetParentRow(this.Table.ParentRelations["FEProcessGroup_FEProcess"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FEProcessGroup_FEProcess"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprocess_groupNull() {
                return this.IsNull(this.tableFEProcess.process_groupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprocess_groupNull() {
                this[this.tableFEProcess.process_groupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprocess_nameNull() {
                return this.IsNull(this.tableFEProcess.process_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprocess_nameNull() {
                this[this.tableFEProcess.process_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscriticalNull() {
                return this.IsNull(this.tableFEProcess.criticalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcriticalNull() {
                this[this.tableFEProcess.criticalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprocess_orderNull() {
                return this.IsNull(this.tableFEProcess.process_orderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprocess_orderNull() {
                this[this.tableFEProcess.process_orderColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FEProcessGroupRow : global::System.Data.DataRow {
            
            private FEProcessGroupDataTable tableFEProcessGroup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FEProcessGroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFEProcessGroup = ((FEProcessGroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int process_group_id {
                get {
                    try {
                        return ((int)(this[this.tableFEProcessGroup.process_group_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'process_group_id\' in table \'FEProcessGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEProcessGroup.process_group_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string process_group {
                get {
                    return ((string)(this[this.tableFEProcessGroup.process_groupColumn]));
                }
                set {
                    this[this.tableFEProcessGroup.process_groupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    if (this.IsdescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableFEProcessGroup.descriptionColumn]));
                    }
                }
                set {
                    this[this.tableFEProcessGroup.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float group_order {
                get {
                    try {
                        return ((float)(this[this.tableFEProcessGroup.group_orderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'group_order\' in table \'FEProcessGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFEProcessGroup.group_orderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenarioXProcessRow FEScenarioXProcessRow {
                get {
                    return ((FEScenarioXProcessRow)(this.GetParentRow(this.Table.ParentRelations["FEScenarioXProcess_FEProcessGroup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FEScenarioXProcess_FEProcessGroup"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprocess_group_idNull() {
                return this.IsNull(this.tableFEProcessGroup.process_group_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprocess_group_idNull() {
                this[this.tableFEProcessGroup.process_group_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableFEProcessGroup.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableFEProcessGroup.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgroup_orderNull() {
                return this.IsNull(this.tableFEProcessGroup.group_orderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgroup_orderNull() {
                this[this.tableFEProcessGroup.group_orderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessRow[] GetFEProcessRows() {
                if ((this.Table.ChildRelations["FEProcessGroup_FEProcess"] == null)) {
                    return new FEProcessRow[0];
                }
                else {
                    return ((FEProcessRow[])(base.GetChildRows(this.Table.ChildRelations["FEProcessGroup_FEProcess"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QryProcessesRow : global::System.Data.DataRow {
            
            private QryProcessesDataTable tableQryProcesses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QryProcessesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQryProcesses = ((QryProcessesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string process_group {
                get {
                    try {
                        return ((string)(this[this.tableQryProcesses.process_groupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'process_group\' in table \'QryProcesses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryProcesses.process_groupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    if (this.IsdescriptionNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableQryProcesses.descriptionColumn]));
                    }
                }
                set {
                    this[this.tableQryProcesses.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool included_in_scenario {
                get {
                    try {
                        return ((bool)(this[this.tableQryProcesses.included_in_scenarioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'included_in_scenario\' in table \'QryProcesses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryProcesses.included_in_scenarioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double group_order {
                get {
                    try {
                        return ((double)(this[this.tableQryProcesses.group_orderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'group_order\' in table \'QryProcesses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQryProcesses.group_orderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isprocess_groupNull() {
                return this.IsNull(this.tableQryProcesses.process_groupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setprocess_groupNull() {
                this[this.tableQryProcesses.process_groupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableQryProcesses.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableQryProcesses.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isincluded_in_scenarioNull() {
                return this.IsNull(this.tableQryProcesses.included_in_scenarioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setincluded_in_scenarioNull() {
                this[this.tableQryProcesses.included_in_scenarioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isgroup_orderNull() {
                return this.IsNull(this.tableQryProcesses.group_orderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setgroup_orderNull() {
                this[this.tableQryProcesses.group_orderColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FEGridProjectsRowChangeEvent : global::System.EventArgs {
            
            private FEGridProjectsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEGridProjectsRowChangeEvent(FEGridProjectsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEGridProjectsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FESelectionSetsRowChangeEvent : global::System.EventArgs {
            
            private FESelectionSetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetsRowChangeEvent(FESelectionSetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FEHyetographDataRowChangeEvent : global::System.EventArgs {
            
            private FEHyetographDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographDataRowChangeEvent(FEHyetographDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FEHyetographsRowChangeEvent : global::System.EventArgs {
            
            private FEHyetographsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographsRowChangeEvent(FEHyetographsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEHyetographsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FEModelRunRowChangeEvent : global::System.EventArgs {
            
            private FEModelRunRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEModelRunRowChangeEvent(FEModelRunRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEModelRunRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FEScenariosRowChangeEvent : global::System.EventArgs {
            
            private FEScenariosRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenariosRowChangeEvent(FEScenariosRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenariosRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FESelectionSetAreasRowChangeEvent : global::System.EventArgs {
            
            private FESelectionSetAreasRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetAreasRowChangeEvent(FESelectionSetAreasRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FESelectionSetAreasRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QryModelRunRowChangeEvent : global::System.EventArgs {
            
            private QryModelRunRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryModelRunRowChangeEvent(QryModelRunRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryModelRunRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FEScenarioXProcessRowChangeEvent : global::System.EventArgs {
            
            private FEScenarioXProcessRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenarioXProcessRowChangeEvent(FEScenarioXProcessRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEScenarioXProcessRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FEProcessRowChangeEvent : global::System.EventArgs {
            
            private FEProcessRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessRowChangeEvent(FEProcessRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FEProcessGroupRowChangeEvent : global::System.EventArgs {
            
            private FEProcessGroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessGroupRowChangeEvent(FEProcessGroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FEProcessGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QryProcessesRowChangeEvent : global::System.EventArgs {
            
            private QryProcessesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryProcessesRowChangeEvent(QryProcessesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QryProcessesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace SystemsAnalysis.Grid.GridAnalysis.GridInterfaceDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FEGridProjectsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FEGridProjectsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FEGridProjects";
            tableMapping.ColumnMappings.Add("project_id", "project_id");
            tableMapping.ColumnMappings.Add("project_description", "project_description");
            tableMapping.ColumnMappings.Add("grid_path", "grid_path");
            tableMapping.ColumnMappings.Add("bmp_path", "bmp_path");
            tableMapping.ColumnMappings.Add("mip_path", "mip_path");
            tableMapping.ColumnMappings.Add("osf_path", "osf_path");
            tableMapping.ColumnMappings.Add("default_output_path", "default_output_path");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GRID_FE_GRID_PROJECTS] ([project_id], [project_description], [grid_p" +
                "ath], [bmp_path], [mip_path], [osf_path], [default_output_path]) VALUES (@projec" +
                "t_id, @project_description, @grid_path, @bmp_path, @mip_path, @osf_path, @defaul" +
                "t_output_path)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "project_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "project_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grid_path", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "grid_path", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bmp_path", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "bmp_path", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mip_path", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "mip_path", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@osf_path", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "osf_path", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@default_output_path", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "default_output_path", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE       GRID_FE_GRID_PROJECTS
SET                project_description = @project_description, grid_path = @grid_path, bmp_path = @bmp_path, mip_path = @mip_path, osf_path = @osf_path, default_output_path = @default_output_path
WHERE        (project_id = @project_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_description", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "project_description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@grid_path", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "grid_path", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bmp_path", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "bmp_path", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mip_path", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "mip_path", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@osf_path", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "osf_path", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@default_output_path", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "default_output_path", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "project_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.Grid.GridAnalysis.Properties.Settings.Default.Waterqual_GIS_v5_0ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        project_id, project_description, grid_path, bmp_path, mip_path, osf" +
                "_path, default_output_path\r\nFROM            GRID_FE_GRID_PROJECTS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GridInterfaceDataSet.FEGridProjectsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GridInterfaceDataSet.FEGridProjectsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GridInterfaceDataSet.FEGridProjectsDataTable dataTable = new GridInterfaceDataSet.FEGridProjectsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet.FEGridProjectsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FEGridProjects");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FESelectionSetsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FESelectionSetsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FESelectionSets";
            tableMapping.ColumnMappings.Add("selection_set_id", "selection_set_id");
            tableMapping.ColumnMappings.Add("selection_set_area_id", "selection_set_area_id");
            tableMapping.ColumnMappings.Add("description", "description");
            tableMapping.ColumnMappings.Add("col_name", "col_name");
            tableMapping.ColumnMappings.Add("row_name", "row_name");
            tableMapping.ColumnMappings.Add("percent_overlap", "percent_overlap");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GRID_FE_SELECTION_SETS] ([selection_set_id], [selection_set_area_id]" +
                ", [description], [col_name], [row_name], [percent_overlap]) VALUES (@selection_s" +
                "et_id, @selection_set_area_id, @description, @col_name, @row_name, @percent_over" +
                "lap)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@selection_set_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "selection_set_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@selection_set_area_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "selection_set_area_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@col_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "col_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@row_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "row_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@percent_overlap", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "percent_overlap", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.Grid.GridAnalysis.Properties.Settings.Default.Waterqual_GIS_v5_0ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        selection_set_id, selection_set_area_id, description, col_name, row" +
                "_name, percent_overlap\r\nFROM            GRID_FE_SELECTION_SETS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GridInterfaceDataSet.FESelectionSetsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GridInterfaceDataSet.FESelectionSetsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GridInterfaceDataSet.FESelectionSetsDataTable dataTable = new GridInterfaceDataSet.FESelectionSetsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet.FESelectionSetsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FESelectionSets");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FEHyetographDataTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FEHyetographDataTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FEHyetographData";
            tableMapping.ColumnMappings.Add("hyetograph_data_id", "hyetograph_data_id");
            tableMapping.ColumnMappings.Add("hyetograph_id", "hyetograph_id");
            tableMapping.ColumnMappings.Add("run_order", "run_order");
            tableMapping.ColumnMappings.Add("comment", "comment");
            tableMapping.ColumnMappings.Add("rainfall", "rainfall");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GRID_FE_HYETOGRAPH_DATA] ([hyetograph_data_id], [hyetograph_id], [ra" +
                "infall], [run_order], [comment]) VALUES (@hyetograph_data_id, @hyetograph_id, @r" +
                "ainfall, @run_order, @comment)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@hyetograph_data_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "hyetograph_data_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@hyetograph_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "hyetograph_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rainfall", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "rainfall", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@run_order", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "run_order", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@comment", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.Grid.GridAnalysis.Properties.Settings.Default.Waterqual_GIS_v5_0ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT hyetograph_data_id, hyetograph_id, rainfall, run_order, comment FROM GRID_" +
                "FE_HYETOGRAPH_DATA";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GridInterfaceDataSet.FEHyetographDataDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GridInterfaceDataSet.FEHyetographDataDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GridInterfaceDataSet.FEHyetographDataDataTable dataTable = new GridInterfaceDataSet.FEHyetographDataDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet.FEHyetographDataDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FEHyetographData");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FEHyetographsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FEHyetographsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FEHyetographs";
            tableMapping.ColumnMappings.Add("hyetograph_id", "hyetograph_id");
            tableMapping.ColumnMappings.Add("description", "description");
            tableMapping.ColumnMappings.Add("time_step_units", "time_step_units");
            tableMapping.ColumnMappings.Add("source", "source");
            tableMapping.ColumnMappings.Add("time_step", "time_step");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GRID_FE_HYETOGRAPHS] ([hyetograph_id], [description], [time_step], [" +
                "time_step_units], [source]) VALUES (@hyetograph_id, @description, @time_step, @t" +
                "ime_step_units, @source)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@hyetograph_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "hyetograph_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_step", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_step", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_step_units", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "time_step_units", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@source", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "source", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.Grid.GridAnalysis.Properties.Settings.Default.Waterqual_GIS_v5_0ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT hyetograph_id, description, time_step, time_step_units, source FROM GRID_F" +
                "E_HYETOGRAPHS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GridInterfaceDataSet.FEHyetographsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GridInterfaceDataSet.FEHyetographsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GridInterfaceDataSet.FEHyetographsDataTable dataTable = new GridInterfaceDataSet.FEHyetographsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet.FEHyetographsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FEHyetographs");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FEModelRunTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FEModelRunTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FEModelRun";
            tableMapping.ColumnMappings.Add("model_run_id", "model_run_id");
            tableMapping.ColumnMappings.Add("scenario_id", "scenario_id");
            tableMapping.ColumnMappings.Add("selection_set_area_id", "selection_set_area_id");
            tableMapping.ColumnMappings.Add("hyetograph_id", "hyetograph_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GRID_FE_MODEL_RUN] ([model_run_id], [scenario_id], [selection_set_ar" +
                "ea_id], [hyetograph_id]) VALUES (@model_run_id, @scenario_id, @selection_set_are" +
                "a_id, @hyetograph_id)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@model_run_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "model_run_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scenario_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "scenario_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@selection_set_area_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "selection_set_area_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@hyetograph_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "hyetograph_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.Grid.GridAnalysis.Properties.Settings.Default.Waterqual_GIS_v5_0ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        model_run_id, scenario_id, selection_set_area_id, hyetograph_id\r\nFR" +
                "OM            GRID_FE_MODEL_RUN";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT MAX(model_run_id)+1 FROM GRID_FE_MODEL_RUN";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO [GRID_FE_MODEL_RUN] ([model_run_id], [scenario_id], [selection_set_ar" +
                "ea_id], [hyetograph_id]) VALUES (@model_run_id, @scenario_id, @selection_set_are" +
                "a_id, @hyetograph_id)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@model_run_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "model_run_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scenario_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "scenario_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@selection_set_area_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "selection_set_area_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@hyetograph_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "hyetograph_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GridInterfaceDataSet.FEModelRunDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GridInterfaceDataSet.FEModelRunDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GridInterfaceDataSet.FEModelRunDataTable dataTable = new GridInterfaceDataSet.FEModelRunDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet.FEModelRunDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FEModelRun");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<int> GetNextModelRunID() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertQuery(global::System.Nullable<int> model_run_id, global::System.Nullable<int> scenario_id, global::System.Nullable<int> selection_set_area_id, global::System.Nullable<int> hyetograph_id) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((model_run_id.HasValue == true)) {
                command.Parameters[0].Value = ((int)(model_run_id.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((scenario_id.HasValue == true)) {
                command.Parameters[1].Value = ((int)(scenario_id.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((selection_set_area_id.HasValue == true)) {
                command.Parameters[2].Value = ((int)(selection_set_area_id.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((hyetograph_id.HasValue == true)) {
                command.Parameters[3].Value = ((int)(hyetograph_id.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FEScenariosTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FEScenariosTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FEScenarios";
            tableMapping.ColumnMappings.Add("scenario_id", "scenario_id");
            tableMapping.ColumnMappings.Add("project_id", "project_id");
            tableMapping.ColumnMappings.Add("time_period", "time_period");
            tableMapping.ColumnMappings.Add("description", "description");
            tableMapping.ColumnMappings.Add("include_instream_facilities", "include_instream_facilities");
            tableMapping.ColumnMappings.Add("pollutant_loading_db", "pollutant_loading_db");
            tableMapping.ColumnMappings.Add("pollutant_loading_table", "pollutant_loading_table");
            tableMapping.ColumnMappings.Add("bmp_effectiveness_db", "bmp_effectiveness_db");
            tableMapping.ColumnMappings.Add("bmp_effectiveness_table", "bmp_effectiveness_table");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO GRID_FE_SCENARIOS
                         (project_id, time_period, description, include_instream_facilities, pollutant_loading_db, pollutant_loading_table, bmp_effectiveness_db, bmp_effectiveness_table)
VALUES        (@project_id,@time_period,@description,@include_instream_facilities,@pollutant_loading_db,@pollutant_loading_table,@bmp_effectiveness_db,@bmp_effectiveness_table)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "project_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_period", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "time_period", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@include_instream_facilities", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "include_instream_facilities", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pollutant_loading_db", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "pollutant_loading_db", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pollutant_loading_table", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "pollutant_loading_table", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bmp_effectiveness_db", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "bmp_effectiveness_db", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bmp_effectiveness_table", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "bmp_effectiveness_table", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE       GRID_FE_SCENARIOS
SET                project_id = @project_id, time_period = @time_period, description = @description, include_instream_facilities = @include_instream_facilities, pollutant_loading_db = @pollutant_loading_db, 
                         pollutant_loading_table = @pollutant_loading_table, bmp_effectiveness_db = @bmp_effectiveness_db, bmp_effectiveness_table = @bmp_effectiveness_table
WHERE        (scenario_id = @scenario_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "project_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@time_period", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "time_period", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@include_instream_facilities", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "include_instream_facilities", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pollutant_loading_db", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "pollutant_loading_db", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pollutant_loading_table", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "pollutant_loading_table", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bmp_effectiveness_db", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "bmp_effectiveness_db", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bmp_effectiveness_table", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "bmp_effectiveness_table", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scenario_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "scenario_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.Grid.GridAnalysis.Properties.Settings.Default.Waterqual_GIS_v5_0ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        scenario_id, project_id, time_period, description, include_instream" +
                "_facilities, pollutant_loading_db, pollutant_loading_table, bmp_effectiveness_db" +
                ", bmp_effectiveness_table\r\nFROM            GRID_FE_SCENARIOS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GridInterfaceDataSet.FEScenariosDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GridInterfaceDataSet.FEScenariosDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GridInterfaceDataSet.FEScenariosDataTable dataTable = new GridInterfaceDataSet.FEScenariosDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet.FEScenariosDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FEScenarios");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FESelectionSetAreasTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FESelectionSetAreasTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FESelectionSetAreas";
            tableMapping.ColumnMappings.Add("selection_set_area_id", "selection_set_area_id");
            tableMapping.ColumnMappings.Add("project_id", "project_id");
            tableMapping.ColumnMappings.Add("area", "area");
            tableMapping.ColumnMappings.Add("sub_area", "sub_area");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GRID_FE_SELECTION_SET_AREAS] ([selection_set_area_id], [project_id]," +
                " [area], [sub_area]) VALUES (@selection_set_area_id, @project_id, @area, @sub_ar" +
                "ea)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@selection_set_area_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "selection_set_area_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@project_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "project_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@area", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "area", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sub_area", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "sub_area", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.Grid.GridAnalysis.Properties.Settings.Default.Waterqual_GIS_v5_0ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT selection_set_area_id, project_id, area, sub_area FROM GRID_FE_SELECTION_S" +
                "ET_AREAS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GridInterfaceDataSet.FESelectionSetAreasDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GridInterfaceDataSet.FESelectionSetAreasDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GridInterfaceDataSet.FESelectionSetAreasDataTable dataTable = new GridInterfaceDataSet.FESelectionSetAreasDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet.FESelectionSetAreasDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FESelectionSetAreas");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QryModelRunTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public QryModelRunTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "QryModelRun";
            tableMapping.ColumnMappings.Add("time_period", "time_period");
            tableMapping.ColumnMappings.Add("scenario_id", "scenario_id");
            tableMapping.ColumnMappings.Add("selection_set_area_id", "selection_set_area_id");
            tableMapping.ColumnMappings.Add("hyetograph_id", "hyetograph_id");
            tableMapping.ColumnMappings.Add("project_id", "project_id");
            tableMapping.ColumnMappings.Add("model_run_id", "model_run_id");
            tableMapping.ColumnMappings.Add("area", "area");
            tableMapping.ColumnMappings.Add("sub_area", "sub_area");
            tableMapping.ColumnMappings.Add("include_instream_facilities", "include_instream_facilities");
            tableMapping.ColumnMappings.Add("project_description", "project_description");
            tableMapping.ColumnMappings.Add("pollutant_loading_db", "pollutant_loading_db");
            tableMapping.ColumnMappings.Add("pollutant_loading_table", "pollutant_loading_table");
            tableMapping.ColumnMappings.Add("bmp_effectiveness_db", "bmp_effectiveness_db");
            tableMapping.ColumnMappings.Add("bmp_effectiveness_table", "bmp_effectiveness_table");
            tableMapping.ColumnMappings.Add("scenario_description", "scenario_description");
            tableMapping.ColumnMappings.Add("hyetograph_description", "hyetograph_description");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.Grid.GridAnalysis.Properties.Settings.Default.Waterqual_GIS_v5_0ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT       GRID_FE_SELECTION_SET_AREAS.area, GRID_FE_SELECTION_SET_AREAS.sub_area, GRID_FE_SCENARIOS.time_period, GRID_FE_SCENARIOS.description as scenario_description, GRID_FE_MODEL_RUN.scenario_id, GRID_FE_MODEL_RUN.selection_set_area_id, GRID_FE_MODEL_RUN.hyetograph_id, GRID_FE_HYETOGRAPHS.description AS hyetograph_description, 
                    GRID_FE_GRID_PROJECTS.project_id, GRID_FE_MODEL_RUN.model_run_id, GRID_FE_SCENARIOS.include_instream_facilities, GRID_FE_GRID_PROJECTS.project_description, GRID_FE_SCENARIOS.pollutant_loading_db, GRID_FE_SCENARIOS.pollutant_loading_table, GRID_FE_SCENARIOS.bmp_effectiveness_db, 
                    GRID_FE_SCENARIOS.bmp_effectiveness_table
FROM          ((((GRID_FE_SELECTION_SET_AREAS INNER JOIN
                    GRID_FE_MODEL_RUN ON GRID_FE_SELECTION_SET_AREAS.selection_set_area_id = GRID_FE_MODEL_RUN.selection_set_area_id) INNER JOIN
                    GRID_FE_SCENARIOS ON GRID_FE_MODEL_RUN.scenario_id = GRID_FE_SCENARIOS.scenario_id) INNER JOIN
                    GRID_FE_GRID_PROJECTS ON GRID_FE_SELECTION_SET_AREAS.project_id = GRID_FE_GRID_PROJECTS.project_id AND GRID_FE_SCENARIOS.project_id = GRID_FE_GRID_PROJECTS.project_id) INNER JOIN
                    GRID_FE_HYETOGRAPHS ON GRID_FE_MODEL_RUN.hyetograph_id = GRID_FE_HYETOGRAPHS.hyetograph_id)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GridInterfaceDataSet.QryModelRunDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GridInterfaceDataSet.QryModelRunDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GridInterfaceDataSet.QryModelRunDataTable dataTable = new GridInterfaceDataSet.QryModelRunDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FEScenarioXProcessTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FEScenarioXProcessTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FEScenarioXProcess";
            tableMapping.ColumnMappings.Add("scenario_x_process_id", "scenario_x_process_id");
            tableMapping.ColumnMappings.Add("scenario_id", "scenario_id");
            tableMapping.ColumnMappings.Add("process_group", "process_group");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM GRID_FE_SCENARIO_X_PROCESS\r\nWHERE        (scenario_x_process_id = @sc" +
                "enario_x_process_id)";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scenario_x_process_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "scenario_x_process_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO GRID_FE_SCENARIO_X_PROCESS\r\n                         (scenario_id, pr" +
                "ocess_group)\r\nVALUES        (@scenario_id,@process_group)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scenario_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "scenario_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@process_group", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "process_group", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE       GRID_FE_SCENARIO_X_PROCESS\r\nSET                scenario_id = @scenar" +
                "io_id, process_group = @process_group\r\nWHERE        (scenario_x_process_id = @sc" +
                "enario_x_process_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scenario_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "scenario_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@process_group", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "process_group", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scenario_x_process_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "scenario_x_process_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.Grid.GridAnalysis.Properties.Settings.Default.Waterqual_GIS_v5_0ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT       scenario_x_process_id, scenario_id, process_group\r\nFROM          GRI" +
                "D_FE_SCENARIO_X_PROCESS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT process_group, scenario_id, scenario_x_process_id FROM GRID_FE_SCENARIO_X_" +
                "PROCESS WHERE (scenario_id = @scenario_id)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@scenario_id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "scenario_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GridInterfaceDataSet.FEScenarioXProcessDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GridInterfaceDataSet.FEScenarioXProcessDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GridInterfaceDataSet.FEScenarioXProcessDataTable dataTable = new GridInterfaceDataSet.FEScenarioXProcessDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByScenarioID(GridInterfaceDataSet.FEScenarioXProcessDataTable dataTable, global::System.Nullable<int> scenario_id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((scenario_id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(scenario_id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual GridInterfaceDataSet.FEScenarioXProcessDataTable GetDataByScenarioID(global::System.Nullable<int> scenario_id) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((scenario_id.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(scenario_id.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            GridInterfaceDataSet.FEScenarioXProcessDataTable dataTable = new GridInterfaceDataSet.FEScenarioXProcessDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet.FEScenarioXProcessDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FEScenarioXProcess");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FEProcessTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FEProcessTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FEProcess";
            tableMapping.ColumnMappings.Add("process_id", "process_id");
            tableMapping.ColumnMappings.Add("process_group", "process_group");
            tableMapping.ColumnMappings.Add("process_name", "process_name");
            tableMapping.ColumnMappings.Add("critical", "critical");
            tableMapping.ColumnMappings.Add("process_order", "process_order");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [GRID_FE_PROCESS] ([process_id], [process_group], [process_order], [p" +
                "rocess_name], [critical]) VALUES (@process_id, @process_group, @process_order, @" +
                "process_name, @critical)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@process_id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "process_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@process_group", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "process_group", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@process_order", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "process_order", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@process_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "process_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@critical", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "critical", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.Grid.GridAnalysis.Properties.Settings.Default.Waterqual_GIS_v5_0ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT       process_id, process_group, process_order, process_name, critical\r\nFR" +
                "OM          GRID_FE_PROCESS\r\nORDER BY process_order";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GridInterfaceDataSet.FEProcessDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GridInterfaceDataSet.FEProcessDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GridInterfaceDataSet.FEProcessDataTable dataTable = new GridInterfaceDataSet.FEProcessDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet.FEProcessDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FEProcess");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FEProcessGroupTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FEProcessGroupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "FEProcessGroup";
            tableMapping.ColumnMappings.Add("process_group_id", "process_group_id");
            tableMapping.ColumnMappings.Add("process_group", "process_group");
            tableMapping.ColumnMappings.Add("description", "description");
            tableMapping.ColumnMappings.Add("group_order", "group_order");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO GRID_FE_PROCESS_GROUP\r\n                         (process_group, descr" +
                "iption, group_order)\r\nVALUES        (@process_group,@description,@group_order)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@process_group", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "process_group", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@group_order", global::System.Data.SqlDbType.Real, 4, global::System.Data.ParameterDirection.Input, 0, 0, "group_order", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::SystemsAnalysis.Grid.GridAnalysis.Properties.Settings.Default.Waterqual_GIS_v5_0ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT       process_group_id, process_group, description, group_order\r\nFROM     " +
                "     GRID_FE_PROCESS_GROUP\r\nORDER BY group_order";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GridInterfaceDataSet.FEProcessGroupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GridInterfaceDataSet.FEProcessGroupDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GridInterfaceDataSet.FEProcessGroupDataTable dataTable = new GridInterfaceDataSet.FEProcessGroupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet.FEProcessGroupDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GridInterfaceDataSet dataSet) {
            return this.Adapter.Update(dataSet, "FEProcessGroup");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private FEGridProjectsTableAdapter _fEGridProjectsTableAdapter;
        
        private FESelectionSetsTableAdapter _fESelectionSetsTableAdapter;
        
        private FEHyetographDataTableAdapter _fEHyetographDataTableAdapter;
        
        private FEHyetographsTableAdapter _fEHyetographsTableAdapter;
        
        private FEModelRunTableAdapter _fEModelRunTableAdapter;
        
        private FEScenariosTableAdapter _fEScenariosTableAdapter;
        
        private FESelectionSetAreasTableAdapter _fESelectionSetAreasTableAdapter;
        
        private FEScenarioXProcessTableAdapter _fEScenarioXProcessTableAdapter;
        
        private FEProcessTableAdapter _fEProcessTableAdapter;
        
        private FEProcessGroupTableAdapter _fEProcessGroupTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FEGridProjectsTableAdapter FEGridProjectsTableAdapter {
            get {
                return this._fEGridProjectsTableAdapter;
            }
            set {
                this._fEGridProjectsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FESelectionSetsTableAdapter FESelectionSetsTableAdapter {
            get {
                return this._fESelectionSetsTableAdapter;
            }
            set {
                this._fESelectionSetsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FEHyetographDataTableAdapter FEHyetographDataTableAdapter {
            get {
                return this._fEHyetographDataTableAdapter;
            }
            set {
                this._fEHyetographDataTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FEHyetographsTableAdapter FEHyetographsTableAdapter {
            get {
                return this._fEHyetographsTableAdapter;
            }
            set {
                this._fEHyetographsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FEModelRunTableAdapter FEModelRunTableAdapter {
            get {
                return this._fEModelRunTableAdapter;
            }
            set {
                this._fEModelRunTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FEScenariosTableAdapter FEScenariosTableAdapter {
            get {
                return this._fEScenariosTableAdapter;
            }
            set {
                this._fEScenariosTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FESelectionSetAreasTableAdapter FESelectionSetAreasTableAdapter {
            get {
                return this._fESelectionSetAreasTableAdapter;
            }
            set {
                this._fESelectionSetAreasTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FEScenarioXProcessTableAdapter FEScenarioXProcessTableAdapter {
            get {
                return this._fEScenarioXProcessTableAdapter;
            }
            set {
                this._fEScenarioXProcessTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FEProcessTableAdapter FEProcessTableAdapter {
            get {
                return this._fEProcessTableAdapter;
            }
            set {
                this._fEProcessTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public FEProcessGroupTableAdapter FEProcessGroupTableAdapter {
            get {
                return this._fEProcessGroupTableAdapter;
            }
            set {
                this._fEProcessGroupTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._fEGridProjectsTableAdapter != null) 
                            && (this._fEGridProjectsTableAdapter.Connection != null))) {
                    return this._fEGridProjectsTableAdapter.Connection;
                }
                if (((this._fESelectionSetsTableAdapter != null) 
                            && (this._fESelectionSetsTableAdapter.Connection != null))) {
                    return this._fESelectionSetsTableAdapter.Connection;
                }
                if (((this._fEHyetographDataTableAdapter != null) 
                            && (this._fEHyetographDataTableAdapter.Connection != null))) {
                    return this._fEHyetographDataTableAdapter.Connection;
                }
                if (((this._fEHyetographsTableAdapter != null) 
                            && (this._fEHyetographsTableAdapter.Connection != null))) {
                    return this._fEHyetographsTableAdapter.Connection;
                }
                if (((this._fEModelRunTableAdapter != null) 
                            && (this._fEModelRunTableAdapter.Connection != null))) {
                    return this._fEModelRunTableAdapter.Connection;
                }
                if (((this._fEScenariosTableAdapter != null) 
                            && (this._fEScenariosTableAdapter.Connection != null))) {
                    return this._fEScenariosTableAdapter.Connection;
                }
                if (((this._fESelectionSetAreasTableAdapter != null) 
                            && (this._fESelectionSetAreasTableAdapter.Connection != null))) {
                    return this._fESelectionSetAreasTableAdapter.Connection;
                }
                if (((this._fEScenarioXProcessTableAdapter != null) 
                            && (this._fEScenarioXProcessTableAdapter.Connection != null))) {
                    return this._fEScenarioXProcessTableAdapter.Connection;
                }
                if (((this._fEProcessTableAdapter != null) 
                            && (this._fEProcessTableAdapter.Connection != null))) {
                    return this._fEProcessTableAdapter.Connection;
                }
                if (((this._fEProcessGroupTableAdapter != null) 
                            && (this._fEProcessGroupTableAdapter.Connection != null))) {
                    return this._fEProcessGroupTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._fEGridProjectsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._fESelectionSetsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._fEHyetographDataTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._fEHyetographsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._fEModelRunTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._fEScenariosTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._fESelectionSetAreasTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._fEScenarioXProcessTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._fEProcessTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._fEProcessGroupTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(GridInterfaceDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._fEGridProjectsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FEGridProjects.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fEGridProjectsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._fEScenariosTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FEScenarios.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fEScenariosTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._fEScenarioXProcessTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FEScenarioXProcess.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fEScenarioXProcessTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._fESelectionSetAreasTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FESelectionSetAreas.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fESelectionSetAreasTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._fEHyetographsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FEHyetographs.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fEHyetographsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._fEProcessGroupTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FEProcessGroup.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fEProcessGroupTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._fEProcessTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FEProcess.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fEProcessTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._fEModelRunTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FEModelRun.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fEModelRunTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._fEHyetographDataTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FEHyetographData.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fEHyetographDataTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._fESelectionSetsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.FESelectionSets.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._fESelectionSetsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(GridInterfaceDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._fEGridProjectsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FEGridProjects.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fEGridProjectsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._fEScenariosTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FEScenarios.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fEScenariosTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._fEScenarioXProcessTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FEScenarioXProcess.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fEScenarioXProcessTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._fESelectionSetAreasTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FESelectionSetAreas.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fESelectionSetAreasTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._fEHyetographsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FEHyetographs.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fEHyetographsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._fEProcessGroupTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FEProcessGroup.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fEProcessGroupTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._fEProcessTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FEProcess.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fEProcessTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._fEModelRunTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FEModelRun.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fEModelRunTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._fEHyetographDataTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FEHyetographData.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fEHyetographDataTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._fESelectionSetsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.FESelectionSets.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._fESelectionSetsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(GridInterfaceDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._fESelectionSetsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FESelectionSets.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fESelectionSetsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._fEHyetographDataTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FEHyetographData.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fEHyetographDataTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._fEModelRunTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FEModelRun.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fEModelRunTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._fEProcessTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FEProcess.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fEProcessTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._fEProcessGroupTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FEProcessGroup.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fEProcessGroupTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._fEHyetographsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FEHyetographs.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fEHyetographsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._fESelectionSetAreasTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FESelectionSetAreas.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fESelectionSetAreasTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._fEScenarioXProcessTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FEScenarioXProcess.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fEScenarioXProcessTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._fEScenariosTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FEScenarios.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fEScenariosTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._fEGridProjectsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.FEGridProjects.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._fEGridProjectsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(GridInterfaceDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._fEGridProjectsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fEGridProjectsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._fESelectionSetsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fESelectionSetsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._fEHyetographDataTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fEHyetographDataTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._fEHyetographsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fEHyetographsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._fEModelRunTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fEModelRunTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._fEScenariosTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fEScenariosTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._fESelectionSetAreasTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fESelectionSetAreasTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._fEScenarioXProcessTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fEScenarioXProcessTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._fEProcessTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fEProcessTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._fEProcessGroupTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._fEProcessGroupTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._fEGridProjectsTableAdapter != null)) {
                    revertConnections.Add(this._fEGridProjectsTableAdapter, this._fEGridProjectsTableAdapter.Connection);
                    this._fEGridProjectsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fEGridProjectsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fEGridProjectsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fEGridProjectsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fEGridProjectsTableAdapter.Adapter);
                    }
                }
                if ((this._fESelectionSetsTableAdapter != null)) {
                    revertConnections.Add(this._fESelectionSetsTableAdapter, this._fESelectionSetsTableAdapter.Connection);
                    this._fESelectionSetsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fESelectionSetsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fESelectionSetsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fESelectionSetsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fESelectionSetsTableAdapter.Adapter);
                    }
                }
                if ((this._fEHyetographDataTableAdapter != null)) {
                    revertConnections.Add(this._fEHyetographDataTableAdapter, this._fEHyetographDataTableAdapter.Connection);
                    this._fEHyetographDataTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fEHyetographDataTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fEHyetographDataTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fEHyetographDataTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fEHyetographDataTableAdapter.Adapter);
                    }
                }
                if ((this._fEHyetographsTableAdapter != null)) {
                    revertConnections.Add(this._fEHyetographsTableAdapter, this._fEHyetographsTableAdapter.Connection);
                    this._fEHyetographsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fEHyetographsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fEHyetographsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fEHyetographsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fEHyetographsTableAdapter.Adapter);
                    }
                }
                if ((this._fEModelRunTableAdapter != null)) {
                    revertConnections.Add(this._fEModelRunTableAdapter, this._fEModelRunTableAdapter.Connection);
                    this._fEModelRunTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fEModelRunTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fEModelRunTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fEModelRunTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fEModelRunTableAdapter.Adapter);
                    }
                }
                if ((this._fEScenariosTableAdapter != null)) {
                    revertConnections.Add(this._fEScenariosTableAdapter, this._fEScenariosTableAdapter.Connection);
                    this._fEScenariosTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fEScenariosTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fEScenariosTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fEScenariosTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fEScenariosTableAdapter.Adapter);
                    }
                }
                if ((this._fESelectionSetAreasTableAdapter != null)) {
                    revertConnections.Add(this._fESelectionSetAreasTableAdapter, this._fESelectionSetAreasTableAdapter.Connection);
                    this._fESelectionSetAreasTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fESelectionSetAreasTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fESelectionSetAreasTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fESelectionSetAreasTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fESelectionSetAreasTableAdapter.Adapter);
                    }
                }
                if ((this._fEScenarioXProcessTableAdapter != null)) {
                    revertConnections.Add(this._fEScenarioXProcessTableAdapter, this._fEScenarioXProcessTableAdapter.Connection);
                    this._fEScenarioXProcessTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fEScenarioXProcessTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fEScenarioXProcessTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fEScenarioXProcessTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fEScenarioXProcessTableAdapter.Adapter);
                    }
                }
                if ((this._fEProcessTableAdapter != null)) {
                    revertConnections.Add(this._fEProcessTableAdapter, this._fEProcessTableAdapter.Connection);
                    this._fEProcessTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fEProcessTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fEProcessTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fEProcessTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fEProcessTableAdapter.Adapter);
                    }
                }
                if ((this._fEProcessGroupTableAdapter != null)) {
                    revertConnections.Add(this._fEProcessGroupTableAdapter, this._fEProcessGroupTableAdapter.Connection);
                    this._fEProcessGroupTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._fEProcessGroupTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._fEProcessGroupTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._fEProcessGroupTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._fEProcessGroupTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._fEGridProjectsTableAdapter != null)) {
                    this._fEGridProjectsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fEGridProjectsTableAdapter]));
                    this._fEGridProjectsTableAdapter.Transaction = null;
                }
                if ((this._fESelectionSetsTableAdapter != null)) {
                    this._fESelectionSetsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fESelectionSetsTableAdapter]));
                    this._fESelectionSetsTableAdapter.Transaction = null;
                }
                if ((this._fEHyetographDataTableAdapter != null)) {
                    this._fEHyetographDataTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fEHyetographDataTableAdapter]));
                    this._fEHyetographDataTableAdapter.Transaction = null;
                }
                if ((this._fEHyetographsTableAdapter != null)) {
                    this._fEHyetographsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fEHyetographsTableAdapter]));
                    this._fEHyetographsTableAdapter.Transaction = null;
                }
                if ((this._fEModelRunTableAdapter != null)) {
                    this._fEModelRunTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fEModelRunTableAdapter]));
                    this._fEModelRunTableAdapter.Transaction = null;
                }
                if ((this._fEScenariosTableAdapter != null)) {
                    this._fEScenariosTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fEScenariosTableAdapter]));
                    this._fEScenariosTableAdapter.Transaction = null;
                }
                if ((this._fESelectionSetAreasTableAdapter != null)) {
                    this._fESelectionSetAreasTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fESelectionSetAreasTableAdapter]));
                    this._fESelectionSetAreasTableAdapter.Transaction = null;
                }
                if ((this._fEScenarioXProcessTableAdapter != null)) {
                    this._fEScenarioXProcessTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fEScenarioXProcessTableAdapter]));
                    this._fEScenarioXProcessTableAdapter.Transaction = null;
                }
                if ((this._fEProcessTableAdapter != null)) {
                    this._fEProcessTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fEProcessTableAdapter]));
                    this._fEProcessTableAdapter.Transaction = null;
                }
                if ((this._fEProcessGroupTableAdapter != null)) {
                    this._fEProcessGroupTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._fEProcessGroupTableAdapter]));
                    this._fEProcessGroupTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SystemsAnalysis.EMGAATS.CrossSectionEditor {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProcessedXSectDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProcessedXSectDataSet : global::System.Data.DataSet {
        
        private XSectsDataTable tableXSects;
        
        private PointListDataTable tablePointList;
        
        private ChartTableDataTable tableChartTable;
        
        private global::System.Data.DataRelation relationFK_XSects_PointList;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProcessedXSectDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProcessedXSectDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["XSects"] != null)) {
                    base.Tables.Add(new XSectsDataTable(ds.Tables["XSects"]));
                }
                if ((ds.Tables["PointList"] != null)) {
                    base.Tables.Add(new PointListDataTable(ds.Tables["PointList"]));
                }
                if ((ds.Tables["ChartTable"] != null)) {
                    base.Tables.Add(new ChartTableDataTable(ds.Tables["ChartTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public XSectsDataTable XSects {
            get {
                return this.tableXSects;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PointListDataTable PointList {
            get {
                return this.tablePointList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ChartTableDataTable ChartTable {
            get {
                return this.tableChartTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProcessedXSectDataSet cln = ((ProcessedXSectDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["XSects"] != null)) {
                    base.Tables.Add(new XSectsDataTable(ds.Tables["XSects"]));
                }
                if ((ds.Tables["PointList"] != null)) {
                    base.Tables.Add(new PointListDataTable(ds.Tables["PointList"]));
                }
                if ((ds.Tables["ChartTable"] != null)) {
                    base.Tables.Add(new ChartTableDataTable(ds.Tables["ChartTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableXSects = ((XSectsDataTable)(base.Tables["XSects"]));
            if ((initTable == true)) {
                if ((this.tableXSects != null)) {
                    this.tableXSects.InitVars();
                }
            }
            this.tablePointList = ((PointListDataTable)(base.Tables["PointList"]));
            if ((initTable == true)) {
                if ((this.tablePointList != null)) {
                    this.tablePointList.InitVars();
                }
            }
            this.tableChartTable = ((ChartTableDataTable)(base.Tables["ChartTable"]));
            if ((initTable == true)) {
                if ((this.tableChartTable != null)) {
                    this.tableChartTable.InitVars();
                }
            }
            this.relationFK_XSects_PointList = this.Relations["FK_XSects_PointList"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProcessedXSectDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ProcessedXSectDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableXSects = new XSectsDataTable();
            base.Tables.Add(this.tableXSects);
            this.tablePointList = new PointListDataTable();
            base.Tables.Add(this.tablePointList);
            this.tableChartTable = new ChartTableDataTable();
            base.Tables.Add(this.tableChartTable);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("FK_XSects_PointList", new global::System.Data.DataColumn[] {
                        this.tableXSects.XSectNameColumn}, new global::System.Data.DataColumn[] {
                        this.tablePointList.XSectNameColumn});
            this.tablePointList.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationFK_XSects_PointList = new global::System.Data.DataRelation("FK_XSects_PointList", new global::System.Data.DataColumn[] {
                        this.tableXSects.XSectNameColumn}, new global::System.Data.DataColumn[] {
                        this.tablePointList.XSectNameColumn}, false);
            this.relationFK_XSects_PointList.Nested = true;
            this.Relations.Add(this.relationFK_XSects_PointList);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeXSects() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePointList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeChartTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProcessedXSectDataSet ds = new ProcessedXSectDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void XSectsRowChangeEventHandler(object sender, XSectsRowChangeEvent e);
        
        public delegate void PointListRowChangeEventHandler(object sender, PointListRowChangeEvent e);
        
        public delegate void ChartTableRowChangeEventHandler(object sender, ChartTableRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class XSectsDataTable : global::System.Data.TypedTableBase<XSectsRow> {
            
            private global::System.Data.DataColumn columnXSectName;
            
            private global::System.Data.DataColumn columnStation;
            
            private global::System.Data.DataColumn columnLongName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnMainChannelRoughness;
            
            private global::System.Data.DataColumn columnLeftOverbankRoughness;
            
            private global::System.Data.DataColumn columnRightOverbankRoughness;
            
            private global::System.Data.DataColumn columnLeftOverbankStation;
            
            private global::System.Data.DataColumn columnRightOverbankStation;
            
            private global::System.Data.DataColumn columnLeftOverbankLengthFactor;
            
            private global::System.Data.DataColumn columnRightOverbankLengthFactor;
            
            private global::System.Data.DataColumn columnReadyForExport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public XSectsDataTable() {
                this.TableName = "XSects";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal XSectsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected XSectsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XSectNameColumn {
                get {
                    return this.columnXSectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StationColumn {
                get {
                    return this.columnStation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongNameColumn {
                get {
                    return this.columnLongName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainChannelRoughnessColumn {
                get {
                    return this.columnMainChannelRoughness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeftOverbankRoughnessColumn {
                get {
                    return this.columnLeftOverbankRoughness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RightOverbankRoughnessColumn {
                get {
                    return this.columnRightOverbankRoughness;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeftOverbankStationColumn {
                get {
                    return this.columnLeftOverbankStation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RightOverbankStationColumn {
                get {
                    return this.columnRightOverbankStation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeftOverbankLengthFactorColumn {
                get {
                    return this.columnLeftOverbankLengthFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RightOverbankLengthFactorColumn {
                get {
                    return this.columnRightOverbankLengthFactor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReadyForExportColumn {
                get {
                    return this.columnReadyForExport;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public XSectsRow this[int index] {
                get {
                    return ((XSectsRow)(this.Rows[index]));
                }
            }
            
            public event XSectsRowChangeEventHandler XSectsRowChanging;
            
            public event XSectsRowChangeEventHandler XSectsRowChanged;
            
            public event XSectsRowChangeEventHandler XSectsRowDeleting;
            
            public event XSectsRowChangeEventHandler XSectsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddXSectsRow(XSectsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public XSectsRow AddXSectsRow(string XSectName, double Station, string LongName, string Description, double MainChannelRoughness, double LeftOverbankRoughness, double RightOverbankRoughness, double LeftOverbankStation, double RightOverbankStation, double LeftOverbankLengthFactor, double RightOverbankLengthFactor, bool ReadyForExport) {
                XSectsRow rowXSectsRow = ((XSectsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        XSectName,
                        Station,
                        LongName,
                        Description,
                        MainChannelRoughness,
                        LeftOverbankRoughness,
                        RightOverbankRoughness,
                        LeftOverbankStation,
                        RightOverbankStation,
                        LeftOverbankLengthFactor,
                        RightOverbankLengthFactor,
                        ReadyForExport};
                rowXSectsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowXSectsRow);
                return rowXSectsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public XSectsRow FindByXSectName(string XSectName) {
                return ((XSectsRow)(this.Rows.Find(new object[] {
                            XSectName})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                XSectsDataTable cln = ((XSectsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new XSectsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnXSectName = base.Columns["XSectName"];
                this.columnStation = base.Columns["Station"];
                this.columnLongName = base.Columns["LongName"];
                this.columnDescription = base.Columns["Description"];
                this.columnMainChannelRoughness = base.Columns["MainChannelRoughness"];
                this.columnLeftOverbankRoughness = base.Columns["LeftOverbankRoughness"];
                this.columnRightOverbankRoughness = base.Columns["RightOverbankRoughness"];
                this.columnLeftOverbankStation = base.Columns["LeftOverbankStation"];
                this.columnRightOverbankStation = base.Columns["RightOverbankStation"];
                this.columnLeftOverbankLengthFactor = base.Columns["LeftOverbankLengthFactor"];
                this.columnRightOverbankLengthFactor = base.Columns["RightOverbankLengthFactor"];
                this.columnReadyForExport = base.Columns["ReadyForExport"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnXSectName = new global::System.Data.DataColumn("XSectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXSectName);
                this.columnStation = new global::System.Data.DataColumn("Station", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStation);
                this.columnLongName = new global::System.Data.DataColumn("LongName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnMainChannelRoughness = new global::System.Data.DataColumn("MainChannelRoughness", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainChannelRoughness);
                this.columnLeftOverbankRoughness = new global::System.Data.DataColumn("LeftOverbankRoughness", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeftOverbankRoughness);
                this.columnRightOverbankRoughness = new global::System.Data.DataColumn("RightOverbankRoughness", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRightOverbankRoughness);
                this.columnLeftOverbankStation = new global::System.Data.DataColumn("LeftOverbankStation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeftOverbankStation);
                this.columnRightOverbankStation = new global::System.Data.DataColumn("RightOverbankStation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRightOverbankStation);
                this.columnLeftOverbankLengthFactor = new global::System.Data.DataColumn("LeftOverbankLengthFactor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeftOverbankLengthFactor);
                this.columnRightOverbankLengthFactor = new global::System.Data.DataColumn("RightOverbankLengthFactor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRightOverbankLengthFactor);
                this.columnReadyForExport = new global::System.Data.DataColumn("ReadyForExport", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReadyForExport);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnXSectName}, true));
                this.columnXSectName.AllowDBNull = false;
                this.columnXSectName.Unique = true;
                this.columnMainChannelRoughness.DefaultValue = ((double)(0.03));
                this.columnLeftOverbankRoughness.DefaultValue = ((double)(0.05));
                this.columnRightOverbankRoughness.DefaultValue = ((double)(0.05));
                this.columnLeftOverbankStation.DefaultValue = ((double)(0));
                this.columnRightOverbankStation.DefaultValue = ((double)(0));
                this.columnLeftOverbankLengthFactor.DefaultValue = ((double)(1));
                this.columnRightOverbankLengthFactor.DefaultValue = ((double)(1));
                this.columnReadyForExport.DefaultValue = ((bool)(false));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public XSectsRow NewXSectsRow() {
                return ((XSectsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new XSectsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(XSectsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.XSectsRowChanged != null)) {
                    this.XSectsRowChanged(this, new XSectsRowChangeEvent(((XSectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.XSectsRowChanging != null)) {
                    this.XSectsRowChanging(this, new XSectsRowChangeEvent(((XSectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.XSectsRowDeleted != null)) {
                    this.XSectsRowDeleted(this, new XSectsRowChangeEvent(((XSectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.XSectsRowDeleting != null)) {
                    this.XSectsRowDeleting(this, new XSectsRowChangeEvent(((XSectsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveXSectsRow(XSectsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProcessedXSectDataSet ds = new ProcessedXSectDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "XSectsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PointListDataTable : global::System.Data.TypedTableBase<PointListRow> {
            
            private global::System.Data.DataColumn columnXSectName;
            
            private global::System.Data.DataColumn columnStation;
            
            private global::System.Data.DataColumn columnElevation;
            
            private global::System.Data.DataColumn columnPointListID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PointListDataTable() {
                this.TableName = "PointList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PointListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PointListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XSectNameColumn {
                get {
                    return this.columnXSectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StationColumn {
                get {
                    return this.columnStation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ElevationColumn {
                get {
                    return this.columnElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PointListIDColumn {
                get {
                    return this.columnPointListID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PointListRow this[int index] {
                get {
                    return ((PointListRow)(this.Rows[index]));
                }
            }
            
            public event PointListRowChangeEventHandler PointListRowChanging;
            
            public event PointListRowChangeEventHandler PointListRowChanged;
            
            public event PointListRowChangeEventHandler PointListRowDeleting;
            
            public event PointListRowChangeEventHandler PointListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPointListRow(PointListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PointListRow AddPointListRow(XSectsRow parentXSectsRowByFK_XSects_PointList, double Station, double Elevation) {
                PointListRow rowPointListRow = ((PointListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Station,
                        Elevation,
                        null};
                if ((parentXSectsRowByFK_XSects_PointList != null)) {
                    columnValuesArray[0] = parentXSectsRowByFK_XSects_PointList[0];
                }
                rowPointListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPointListRow);
                return rowPointListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PointListRow FindByPointListID(int PointListID) {
                return ((PointListRow)(this.Rows.Find(new object[] {
                            PointListID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PointListDataTable cln = ((PointListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PointListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnXSectName = base.Columns["XSectName"];
                this.columnStation = base.Columns["Station"];
                this.columnElevation = base.Columns["Elevation"];
                this.columnPointListID = base.Columns["PointListID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnXSectName = new global::System.Data.DataColumn("XSectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXSectName);
                this.columnStation = new global::System.Data.DataColumn("Station", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStation);
                this.columnElevation = new global::System.Data.DataColumn("Elevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnElevation);
                this.columnPointListID = new global::System.Data.DataColumn("PointListID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPointListID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPointListID}, true));
                this.columnPointListID.AutoIncrement = true;
                this.columnPointListID.AutoIncrementSeed = -1;
                this.columnPointListID.AutoIncrementStep = -1;
                this.columnPointListID.AllowDBNull = false;
                this.columnPointListID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PointListRow NewPointListRow() {
                return ((PointListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PointListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PointListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PointListRowChanged != null)) {
                    this.PointListRowChanged(this, new PointListRowChangeEvent(((PointListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PointListRowChanging != null)) {
                    this.PointListRowChanging(this, new PointListRowChangeEvent(((PointListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PointListRowDeleted != null)) {
                    this.PointListRowDeleted(this, new PointListRowChangeEvent(((PointListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PointListRowDeleting != null)) {
                    this.PointListRowDeleting(this, new PointListRowChangeEvent(((PointListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePointListRow(PointListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProcessedXSectDataSet ds = new ProcessedXSectDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PointListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ChartTableDataTable : global::System.Data.TypedTableBase<ChartTableRow> {
            
            private global::System.Data.DataColumn columnSeriesName;
            
            private global::System.Data.DataColumn columnStation;
            
            private global::System.Data.DataColumn columnElevation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartTableDataTable() {
                this.TableName = "ChartTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChartTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ChartTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeriesNameColumn {
                get {
                    return this.columnSeriesName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StationColumn {
                get {
                    return this.columnStation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ElevationColumn {
                get {
                    return this.columnElevation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartTableRow this[int index] {
                get {
                    return ((ChartTableRow)(this.Rows[index]));
                }
            }
            
            public event ChartTableRowChangeEventHandler ChartTableRowChanging;
            
            public event ChartTableRowChangeEventHandler ChartTableRowChanged;
            
            public event ChartTableRowChangeEventHandler ChartTableRowDeleting;
            
            public event ChartTableRowChangeEventHandler ChartTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddChartTableRow(ChartTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartTableRow AddChartTableRow(string SeriesName, double Station, double Elevation) {
                ChartTableRow rowChartTableRow = ((ChartTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SeriesName,
                        Station,
                        Elevation};
                rowChartTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowChartTableRow);
                return rowChartTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ChartTableDataTable cln = ((ChartTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ChartTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSeriesName = base.Columns["SeriesName"];
                this.columnStation = base.Columns["Station"];
                this.columnElevation = base.Columns["Elevation"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSeriesName = new global::System.Data.DataColumn("SeriesName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeriesName);
                this.columnStation = new global::System.Data.DataColumn("Station", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStation);
                this.columnElevation = new global::System.Data.DataColumn("Elevation", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnElevation);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartTableRow NewChartTableRow() {
                return ((ChartTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ChartTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ChartTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ChartTableRowChanged != null)) {
                    this.ChartTableRowChanged(this, new ChartTableRowChangeEvent(((ChartTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ChartTableRowChanging != null)) {
                    this.ChartTableRowChanging(this, new ChartTableRowChangeEvent(((ChartTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ChartTableRowDeleted != null)) {
                    this.ChartTableRowDeleted(this, new ChartTableRowChangeEvent(((ChartTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ChartTableRowDeleting != null)) {
                    this.ChartTableRowDeleting(this, new ChartTableRowChangeEvent(((ChartTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveChartTableRow(ChartTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProcessedXSectDataSet ds = new ProcessedXSectDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ChartTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class XSectsRow : global::System.Data.DataRow {
            
            private XSectsDataTable tableXSects;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal XSectsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableXSects = ((XSectsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XSectName {
                get {
                    return ((string)(this[this.tableXSects.XSectNameColumn]));
                }
                set {
                    this[this.tableXSects.XSectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Station {
                get {
                    try {
                        return ((double)(this[this.tableXSects.StationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Station\' in table \'XSects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXSects.StationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LongName {
                get {
                    try {
                        return ((string)(this[this.tableXSects.LongNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LongName\' in table \'XSects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXSects.LongNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableXSects.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'XSects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXSects.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MainChannelRoughness {
                get {
                    try {
                        return ((double)(this[this.tableXSects.MainChannelRoughnessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainChannelRoughness\' in table \'XSects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXSects.MainChannelRoughnessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LeftOverbankRoughness {
                get {
                    try {
                        return ((double)(this[this.tableXSects.LeftOverbankRoughnessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeftOverbankRoughness\' in table \'XSects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXSects.LeftOverbankRoughnessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RightOverbankRoughness {
                get {
                    try {
                        return ((double)(this[this.tableXSects.RightOverbankRoughnessColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RightOverbankRoughness\' in table \'XSects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXSects.RightOverbankRoughnessColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LeftOverbankStation {
                get {
                    try {
                        return ((double)(this[this.tableXSects.LeftOverbankStationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeftOverbankStation\' in table \'XSects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXSects.LeftOverbankStationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RightOverbankStation {
                get {
                    try {
                        return ((double)(this[this.tableXSects.RightOverbankStationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RightOverbankStation\' in table \'XSects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXSects.RightOverbankStationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LeftOverbankLengthFactor {
                get {
                    try {
                        return ((double)(this[this.tableXSects.LeftOverbankLengthFactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeftOverbankLengthFactor\' in table \'XSects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXSects.LeftOverbankLengthFactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double RightOverbankLengthFactor {
                get {
                    try {
                        return ((double)(this[this.tableXSects.RightOverbankLengthFactorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RightOverbankLengthFactor\' in table \'XSects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXSects.RightOverbankLengthFactorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool ReadyForExport {
                get {
                    try {
                        return ((bool)(this[this.tableXSects.ReadyForExportColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReadyForExport\' in table \'XSects\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableXSects.ReadyForExportColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStationNull() {
                return this.IsNull(this.tableXSects.StationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStationNull() {
                this[this.tableXSects.StationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongNameNull() {
                return this.IsNull(this.tableXSects.LongNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongNameNull() {
                this[this.tableXSects.LongNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableXSects.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableXSects.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainChannelRoughnessNull() {
                return this.IsNull(this.tableXSects.MainChannelRoughnessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainChannelRoughnessNull() {
                this[this.tableXSects.MainChannelRoughnessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeftOverbankRoughnessNull() {
                return this.IsNull(this.tableXSects.LeftOverbankRoughnessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeftOverbankRoughnessNull() {
                this[this.tableXSects.LeftOverbankRoughnessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRightOverbankRoughnessNull() {
                return this.IsNull(this.tableXSects.RightOverbankRoughnessColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRightOverbankRoughnessNull() {
                this[this.tableXSects.RightOverbankRoughnessColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeftOverbankStationNull() {
                return this.IsNull(this.tableXSects.LeftOverbankStationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeftOverbankStationNull() {
                this[this.tableXSects.LeftOverbankStationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRightOverbankStationNull() {
                return this.IsNull(this.tableXSects.RightOverbankStationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRightOverbankStationNull() {
                this[this.tableXSects.RightOverbankStationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeftOverbankLengthFactorNull() {
                return this.IsNull(this.tableXSects.LeftOverbankLengthFactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeftOverbankLengthFactorNull() {
                this[this.tableXSects.LeftOverbankLengthFactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRightOverbankLengthFactorNull() {
                return this.IsNull(this.tableXSects.RightOverbankLengthFactorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRightOverbankLengthFactorNull() {
                this[this.tableXSects.RightOverbankLengthFactorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReadyForExportNull() {
                return this.IsNull(this.tableXSects.ReadyForExportColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReadyForExportNull() {
                this[this.tableXSects.ReadyForExportColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PointListRow[] GetPointListRows() {
                if ((this.Table.ChildRelations["FK_XSects_PointList"] == null)) {
                    return new PointListRow[0];
                }
                else {
                    return ((PointListRow[])(base.GetChildRows(this.Table.ChildRelations["FK_XSects_PointList"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PointListRow : global::System.Data.DataRow {
            
            private PointListDataTable tablePointList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PointListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePointList = ((PointListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XSectName {
                get {
                    try {
                        return ((string)(this[this.tablePointList.XSectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'XSectName\' in table \'PointList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePointList.XSectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Station {
                get {
                    try {
                        return ((double)(this[this.tablePointList.StationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Station\' in table \'PointList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePointList.StationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Elevation {
                get {
                    try {
                        return ((double)(this[this.tablePointList.ElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Elevation\' in table \'PointList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePointList.ElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PointListID {
                get {
                    return ((int)(this[this.tablePointList.PointListIDColumn]));
                }
                set {
                    this[this.tablePointList.PointListIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public XSectsRow XSectsRow {
                get {
                    return ((XSectsRow)(this.GetParentRow(this.Table.ParentRelations["FK_XSects_PointList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_XSects_PointList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXSectNameNull() {
                return this.IsNull(this.tablePointList.XSectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXSectNameNull() {
                this[this.tablePointList.XSectNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStationNull() {
                return this.IsNull(this.tablePointList.StationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStationNull() {
                this[this.tablePointList.StationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsElevationNull() {
                return this.IsNull(this.tablePointList.ElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetElevationNull() {
                this[this.tablePointList.ElevationColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ChartTableRow : global::System.Data.DataRow {
            
            private ChartTableDataTable tableChartTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChartTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableChartTable = ((ChartTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SeriesName {
                get {
                    try {
                        return ((string)(this[this.tableChartTable.SeriesNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeriesName\' in table \'ChartTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChartTable.SeriesNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Station {
                get {
                    try {
                        return ((double)(this[this.tableChartTable.StationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Station\' in table \'ChartTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChartTable.StationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Elevation {
                get {
                    try {
                        return ((double)(this[this.tableChartTable.ElevationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Elevation\' in table \'ChartTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChartTable.ElevationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeriesNameNull() {
                return this.IsNull(this.tableChartTable.SeriesNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeriesNameNull() {
                this[this.tableChartTable.SeriesNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStationNull() {
                return this.IsNull(this.tableChartTable.StationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStationNull() {
                this[this.tableChartTable.StationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsElevationNull() {
                return this.IsNull(this.tableChartTable.ElevationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetElevationNull() {
                this[this.tableChartTable.ElevationColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class XSectsRowChangeEvent : global::System.EventArgs {
            
            private XSectsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public XSectsRowChangeEvent(XSectsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public XSectsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PointListRowChangeEvent : global::System.EventArgs {
            
            private PointListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PointListRowChangeEvent(PointListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PointListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ChartTableRowChangeEvent : global::System.EventArgs {
            
            private ChartTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartTableRowChangeEvent(ChartTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
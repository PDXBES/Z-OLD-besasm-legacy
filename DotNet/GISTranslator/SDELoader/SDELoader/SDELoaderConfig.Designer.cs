//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SDELoader {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("SDELoaderConfig")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SDELoaderConfig : System.Data.DataSet {
        
        private UploadCommandDataTable tableUploadCommand;
        
        private PGDBWorkspaceDataTable tablePGDBWorkspace;
        
        private SDEWorkspaceDataTable tableSDEWorkspace;
        
        private FeatureClassDataTable tableFeatureClass;
        
        private System.Data.DataRelation relationUploadCommand_PGDBWorkspace;
        
        private System.Data.DataRelation relationUploadCommand_SDEWorkspace;
        
        private System.Data.DataRelation relationSDEWorkspace_SDEFeatureClass;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SDELoaderConfig() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected SDELoaderConfig(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["UploadCommand"] != null)) {
                    base.Tables.Add(new UploadCommandDataTable(ds.Tables["UploadCommand"]));
                }
                if ((ds.Tables["PGDBWorkspace"] != null)) {
                    base.Tables.Add(new PGDBWorkspaceDataTable(ds.Tables["PGDBWorkspace"]));
                }
                if ((ds.Tables["SDEWorkspace"] != null)) {
                    base.Tables.Add(new SDEWorkspaceDataTable(ds.Tables["SDEWorkspace"]));
                }
                if ((ds.Tables["FeatureClass"] != null)) {
                    base.Tables.Add(new FeatureClassDataTable(ds.Tables["FeatureClass"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UploadCommandDataTable UploadCommand {
            get {
                return this.tableUploadCommand;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PGDBWorkspaceDataTable PGDBWorkspace {
            get {
                return this.tablePGDBWorkspace;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SDEWorkspaceDataTable SDEWorkspace {
            get {
                return this.tableSDEWorkspace;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FeatureClassDataTable FeatureClass {
            get {
                return this.tableFeatureClass;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            SDELoaderConfig cln = ((SDELoaderConfig)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["UploadCommand"] != null)) {
                    base.Tables.Add(new UploadCommandDataTable(ds.Tables["UploadCommand"]));
                }
                if ((ds.Tables["PGDBWorkspace"] != null)) {
                    base.Tables.Add(new PGDBWorkspaceDataTable(ds.Tables["PGDBWorkspace"]));
                }
                if ((ds.Tables["SDEWorkspace"] != null)) {
                    base.Tables.Add(new SDEWorkspaceDataTable(ds.Tables["SDEWorkspace"]));
                }
                if ((ds.Tables["FeatureClass"] != null)) {
                    base.Tables.Add(new FeatureClassDataTable(ds.Tables["FeatureClass"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUploadCommand = ((UploadCommandDataTable)(base.Tables["UploadCommand"]));
            if ((initTable == true)) {
                if ((this.tableUploadCommand != null)) {
                    this.tableUploadCommand.InitVars();
                }
            }
            this.tablePGDBWorkspace = ((PGDBWorkspaceDataTable)(base.Tables["PGDBWorkspace"]));
            if ((initTable == true)) {
                if ((this.tablePGDBWorkspace != null)) {
                    this.tablePGDBWorkspace.InitVars();
                }
            }
            this.tableSDEWorkspace = ((SDEWorkspaceDataTable)(base.Tables["SDEWorkspace"]));
            if ((initTable == true)) {
                if ((this.tableSDEWorkspace != null)) {
                    this.tableSDEWorkspace.InitVars();
                }
            }
            this.tableFeatureClass = ((FeatureClassDataTable)(base.Tables["FeatureClass"]));
            if ((initTable == true)) {
                if ((this.tableFeatureClass != null)) {
                    this.tableFeatureClass.InitVars();
                }
            }
            this.relationUploadCommand_PGDBWorkspace = this.Relations["UploadCommand_PGDBWorkspace"];
            this.relationUploadCommand_SDEWorkspace = this.Relations["UploadCommand_SDEWorkspace"];
            this.relationSDEWorkspace_SDEFeatureClass = this.Relations["SDEWorkspace_SDEFeatureClass"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SDELoaderConfig";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SDELoaderConfig.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUploadCommand = new UploadCommandDataTable();
            base.Tables.Add(this.tableUploadCommand);
            this.tablePGDBWorkspace = new PGDBWorkspaceDataTable();
            base.Tables.Add(this.tablePGDBWorkspace);
            this.tableSDEWorkspace = new SDEWorkspaceDataTable();
            base.Tables.Add(this.tableSDEWorkspace);
            this.tableFeatureClass = new FeatureClassDataTable();
            base.Tables.Add(this.tableFeatureClass);
            this.relationUploadCommand_PGDBWorkspace = new System.Data.DataRelation("UploadCommand_PGDBWorkspace", new System.Data.DataColumn[] {
                        this.tableUploadCommand.UploadCommandIDColumn}, new System.Data.DataColumn[] {
                        this.tablePGDBWorkspace.UploadCommandIDColumn}, false);
            this.relationUploadCommand_PGDBWorkspace.Nested = true;
            this.Relations.Add(this.relationUploadCommand_PGDBWorkspace);
            this.relationUploadCommand_SDEWorkspace = new System.Data.DataRelation("UploadCommand_SDEWorkspace", new System.Data.DataColumn[] {
                        this.tableUploadCommand.UploadCommandIDColumn}, new System.Data.DataColumn[] {
                        this.tableSDEWorkspace.UploadCommandIDColumn}, false);
            this.relationUploadCommand_SDEWorkspace.Nested = true;
            this.Relations.Add(this.relationUploadCommand_SDEWorkspace);
            this.relationSDEWorkspace_SDEFeatureClass = new System.Data.DataRelation("SDEWorkspace_SDEFeatureClass", new System.Data.DataColumn[] {
                        this.tableUploadCommand.UploadCommandIDColumn}, new System.Data.DataColumn[] {
                        this.tableFeatureClass.UploadCommandIDColumn}, false);
            this.relationSDEWorkspace_SDEFeatureClass.Nested = true;
            this.Relations.Add(this.relationSDEWorkspace_SDEFeatureClass);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUploadCommand() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePGDBWorkspace() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSDEWorkspace() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFeatureClass() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            SDELoaderConfig ds = new SDELoaderConfig();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void UploadCommandRowChangeEventHandler(object sender, UploadCommandRowChangeEvent e);
        
        public delegate void PGDBWorkspaceRowChangeEventHandler(object sender, PGDBWorkspaceRowChangeEvent e);
        
        public delegate void SDEWorkspaceRowChangeEventHandler(object sender, SDEWorkspaceRowChangeEvent e);
        
        public delegate void FeatureClassRowChangeEventHandler(object sender, FeatureClassRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UploadCommandDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUploadCommandID;
            
            private System.Data.DataColumn columnDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UploadCommandDataTable() {
                this.TableName = "UploadCommand";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UploadCommandDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UploadCommandDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UploadCommandIDColumn {
                get {
                    return this.columnUploadCommandID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UploadCommandRow this[int index] {
                get {
                    return ((UploadCommandRow)(this.Rows[index]));
                }
            }
            
            public event UploadCommandRowChangeEventHandler UploadCommandRowChanging;
            
            public event UploadCommandRowChangeEventHandler UploadCommandRowChanged;
            
            public event UploadCommandRowChangeEventHandler UploadCommandRowDeleting;
            
            public event UploadCommandRowChangeEventHandler UploadCommandRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUploadCommandRow(UploadCommandRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UploadCommandRow AddUploadCommandRow(string Description) {
                UploadCommandRow rowUploadCommandRow = ((UploadCommandRow)(this.NewRow()));
                rowUploadCommandRow.ItemArray = new object[] {
                        null,
                        Description};
                this.Rows.Add(rowUploadCommandRow);
                return rowUploadCommandRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UploadCommandRow FindByUploadCommandID(int UploadCommandID) {
                return ((UploadCommandRow)(this.Rows.Find(new object[] {
                            UploadCommandID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UploadCommandDataTable cln = ((UploadCommandDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UploadCommandDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUploadCommandID = base.Columns["UploadCommandID"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUploadCommandID = new System.Data.DataColumn("UploadCommandID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUploadCommandID);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUploadCommandID}, true));
                this.columnUploadCommandID.AutoIncrement = true;
                this.columnUploadCommandID.AllowDBNull = false;
                this.columnUploadCommandID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UploadCommandRow NewUploadCommandRow() {
                return ((UploadCommandRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UploadCommandRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UploadCommandRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UploadCommandRowChanged != null)) {
                    this.UploadCommandRowChanged(this, new UploadCommandRowChangeEvent(((UploadCommandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UploadCommandRowChanging != null)) {
                    this.UploadCommandRowChanging(this, new UploadCommandRowChangeEvent(((UploadCommandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UploadCommandRowDeleted != null)) {
                    this.UploadCommandRowDeleted(this, new UploadCommandRowChangeEvent(((UploadCommandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UploadCommandRowDeleting != null)) {
                    this.UploadCommandRowDeleting(this, new UploadCommandRowChangeEvent(((UploadCommandRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUploadCommandRow(UploadCommandRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDELoaderConfig ds = new SDELoaderConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UploadCommandDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PGDBWorkspaceDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnPGDBWorkspaceID;
            
            private System.Data.DataColumn columnUploadCommandID;
            
            private System.Data.DataColumn columnPGDB;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PGDBWorkspaceDataTable() {
                this.TableName = "PGDBWorkspace";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PGDBWorkspaceDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PGDBWorkspaceDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PGDBWorkspaceIDColumn {
                get {
                    return this.columnPGDBWorkspaceID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UploadCommandIDColumn {
                get {
                    return this.columnUploadCommandID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PGDBColumn {
                get {
                    return this.columnPGDB;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PGDBWorkspaceRow this[int index] {
                get {
                    return ((PGDBWorkspaceRow)(this.Rows[index]));
                }
            }
            
            public event PGDBWorkspaceRowChangeEventHandler PGDBWorkspaceRowChanging;
            
            public event PGDBWorkspaceRowChangeEventHandler PGDBWorkspaceRowChanged;
            
            public event PGDBWorkspaceRowChangeEventHandler PGDBWorkspaceRowDeleting;
            
            public event PGDBWorkspaceRowChangeEventHandler PGDBWorkspaceRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPGDBWorkspaceRow(PGDBWorkspaceRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PGDBWorkspaceRow AddPGDBWorkspaceRow(UploadCommandRow parentUploadCommandRowByUploadCommand_PGDBWorkspace, string PGDB) {
                PGDBWorkspaceRow rowPGDBWorkspaceRow = ((PGDBWorkspaceRow)(this.NewRow()));
                rowPGDBWorkspaceRow.ItemArray = new object[] {
                        null,
                        parentUploadCommandRowByUploadCommand_PGDBWorkspace[0],
                        PGDB};
                this.Rows.Add(rowPGDBWorkspaceRow);
                return rowPGDBWorkspaceRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PGDBWorkspaceRow FindByPGDBWorkspaceID(int PGDBWorkspaceID) {
                return ((PGDBWorkspaceRow)(this.Rows.Find(new object[] {
                            PGDBWorkspaceID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PGDBWorkspaceDataTable cln = ((PGDBWorkspaceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PGDBWorkspaceDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPGDBWorkspaceID = base.Columns["PGDBWorkspaceID"];
                this.columnUploadCommandID = base.Columns["UploadCommandID"];
                this.columnPGDB = base.Columns["PGDB"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPGDBWorkspaceID = new System.Data.DataColumn("PGDBWorkspaceID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGDBWorkspaceID);
                this.columnUploadCommandID = new System.Data.DataColumn("UploadCommandID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUploadCommandID);
                this.columnPGDB = new System.Data.DataColumn("PGDB", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPGDB);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnPGDBWorkspaceID}, true));
                this.columnPGDBWorkspaceID.AutoIncrement = true;
                this.columnPGDBWorkspaceID.AllowDBNull = false;
                this.columnPGDBWorkspaceID.Unique = true;
                this.columnPGDB.Caption = "InputPGDB";
                this.columnPGDB.DefaultValue = ((string)(""));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PGDBWorkspaceRow NewPGDBWorkspaceRow() {
                return ((PGDBWorkspaceRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PGDBWorkspaceRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PGDBWorkspaceRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PGDBWorkspaceRowChanged != null)) {
                    this.PGDBWorkspaceRowChanged(this, new PGDBWorkspaceRowChangeEvent(((PGDBWorkspaceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PGDBWorkspaceRowChanging != null)) {
                    this.PGDBWorkspaceRowChanging(this, new PGDBWorkspaceRowChangeEvent(((PGDBWorkspaceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PGDBWorkspaceRowDeleted != null)) {
                    this.PGDBWorkspaceRowDeleted(this, new PGDBWorkspaceRowChangeEvent(((PGDBWorkspaceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PGDBWorkspaceRowDeleting != null)) {
                    this.PGDBWorkspaceRowDeleting(this, new PGDBWorkspaceRowChangeEvent(((PGDBWorkspaceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePGDBWorkspaceRow(PGDBWorkspaceRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDELoaderConfig ds = new SDELoaderConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PGDBWorkspaceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SDEWorkspaceDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSDEWorkspaceID;
            
            private System.Data.DataColumn columnUploadCommandID;
            
            private System.Data.DataColumn columnServer;
            
            private System.Data.DataColumn columnInstance;
            
            private System.Data.DataColumn columnDatabase;
            
            private System.Data.DataColumn columnUser;
            
            private System.Data.DataColumn columnPassword;
            
            private System.Data.DataColumn columnVersion;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SDEWorkspaceDataTable() {
                this.TableName = "SDEWorkspace";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SDEWorkspaceDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SDEWorkspaceDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SDEWorkspaceIDColumn {
                get {
                    return this.columnSDEWorkspaceID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UploadCommandIDColumn {
                get {
                    return this.columnUploadCommandID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ServerColumn {
                get {
                    return this.columnServer;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn InstanceColumn {
                get {
                    return this.columnInstance;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DatabaseColumn {
                get {
                    return this.columnDatabase;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserColumn {
                get {
                    return this.columnUser;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SDEWorkspaceRow this[int index] {
                get {
                    return ((SDEWorkspaceRow)(this.Rows[index]));
                }
            }
            
            public event SDEWorkspaceRowChangeEventHandler SDEWorkspaceRowChanging;
            
            public event SDEWorkspaceRowChangeEventHandler SDEWorkspaceRowChanged;
            
            public event SDEWorkspaceRowChangeEventHandler SDEWorkspaceRowDeleting;
            
            public event SDEWorkspaceRowChangeEventHandler SDEWorkspaceRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSDEWorkspaceRow(SDEWorkspaceRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SDEWorkspaceRow AddSDEWorkspaceRow(UploadCommandRow parentUploadCommandRowByUploadCommand_SDEWorkspace, string Server, string Instance, string Database, string User, string Password, string Version) {
                SDEWorkspaceRow rowSDEWorkspaceRow = ((SDEWorkspaceRow)(this.NewRow()));
                rowSDEWorkspaceRow.ItemArray = new object[] {
                        null,
                        parentUploadCommandRowByUploadCommand_SDEWorkspace[0],
                        Server,
                        Instance,
                        Database,
                        User,
                        Password,
                        Version};
                this.Rows.Add(rowSDEWorkspaceRow);
                return rowSDEWorkspaceRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SDEWorkspaceRow FindBySDEWorkspaceID(int SDEWorkspaceID) {
                return ((SDEWorkspaceRow)(this.Rows.Find(new object[] {
                            SDEWorkspaceID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SDEWorkspaceDataTable cln = ((SDEWorkspaceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SDEWorkspaceDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSDEWorkspaceID = base.Columns["SDEWorkspaceID"];
                this.columnUploadCommandID = base.Columns["UploadCommandID"];
                this.columnServer = base.Columns["Server"];
                this.columnInstance = base.Columns["Instance"];
                this.columnDatabase = base.Columns["Database"];
                this.columnUser = base.Columns["User"];
                this.columnPassword = base.Columns["Password"];
                this.columnVersion = base.Columns["Version"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSDEWorkspaceID = new System.Data.DataColumn("SDEWorkspaceID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSDEWorkspaceID);
                this.columnUploadCommandID = new System.Data.DataColumn("UploadCommandID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUploadCommandID);
                this.columnServer = new System.Data.DataColumn("Server", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnServer);
                this.columnInstance = new System.Data.DataColumn("Instance", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstance);
                this.columnDatabase = new System.Data.DataColumn("Database", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatabase);
                this.columnUser = new System.Data.DataColumn("User", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUser);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnVersion = new System.Data.DataColumn("Version", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersion);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSDEWorkspaceID}, true));
                this.columnSDEWorkspaceID.AutoIncrement = true;
                this.columnSDEWorkspaceID.AllowDBNull = false;
                this.columnSDEWorkspaceID.Unique = true;
                this.columnServer.Caption = "OutputServer";
                this.columnServer.DefaultValue = ((string)(""));
                this.columnInstance.Caption = "OutputInstance";
                this.columnInstance.DefaultValue = ((string)(""));
                this.columnDatabase.Caption = "OutputDB";
                this.columnDatabase.DefaultValue = ((string)("SDE"));
                this.columnUser.Caption = "OutputUser";
                this.columnPassword.Caption = "OutputPassword";
                this.columnVersion.Caption = "OutputVersion";
                this.columnVersion.DefaultValue = ((string)("sde.default"));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SDEWorkspaceRow NewSDEWorkspaceRow() {
                return ((SDEWorkspaceRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SDEWorkspaceRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SDEWorkspaceRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SDEWorkspaceRowChanged != null)) {
                    this.SDEWorkspaceRowChanged(this, new SDEWorkspaceRowChangeEvent(((SDEWorkspaceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SDEWorkspaceRowChanging != null)) {
                    this.SDEWorkspaceRowChanging(this, new SDEWorkspaceRowChangeEvent(((SDEWorkspaceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SDEWorkspaceRowDeleted != null)) {
                    this.SDEWorkspaceRowDeleted(this, new SDEWorkspaceRowChangeEvent(((SDEWorkspaceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SDEWorkspaceRowDeleting != null)) {
                    this.SDEWorkspaceRowDeleting(this, new SDEWorkspaceRowChangeEvent(((SDEWorkspaceRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSDEWorkspaceRow(SDEWorkspaceRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDELoaderConfig ds = new SDELoaderConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SDEWorkspaceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FeatureClassDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFeatureClassID;
            
            private System.Data.DataColumn columnUploadCommandID;
            
            private System.Data.DataColumn columnSourceFC;
            
            private System.Data.DataColumn columnDestFC;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeatureClassDataTable() {
                this.TableName = "FeatureClass";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FeatureClassDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FeatureClassDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FeatureClassIDColumn {
                get {
                    return this.columnFeatureClassID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UploadCommandIDColumn {
                get {
                    return this.columnUploadCommandID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SourceFCColumn {
                get {
                    return this.columnSourceFC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DestFCColumn {
                get {
                    return this.columnDestFC;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeatureClassRow this[int index] {
                get {
                    return ((FeatureClassRow)(this.Rows[index]));
                }
            }
            
            public event FeatureClassRowChangeEventHandler FeatureClassRowChanging;
            
            public event FeatureClassRowChangeEventHandler FeatureClassRowChanged;
            
            public event FeatureClassRowChangeEventHandler FeatureClassRowDeleting;
            
            public event FeatureClassRowChangeEventHandler FeatureClassRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFeatureClassRow(FeatureClassRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeatureClassRow AddFeatureClassRow(UploadCommandRow parentUploadCommandRowBySDEWorkspace_SDEFeatureClass, string SourceFC, string DestFC) {
                FeatureClassRow rowFeatureClassRow = ((FeatureClassRow)(this.NewRow()));
                rowFeatureClassRow.ItemArray = new object[] {
                        null,
                        parentUploadCommandRowBySDEWorkspace_SDEFeatureClass[0],
                        SourceFC,
                        DestFC};
                this.Rows.Add(rowFeatureClassRow);
                return rowFeatureClassRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FeatureClassDataTable cln = ((FeatureClassDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FeatureClassDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFeatureClassID = base.Columns["FeatureClassID"];
                this.columnUploadCommandID = base.Columns["UploadCommandID"];
                this.columnSourceFC = base.Columns["SourceFC"];
                this.columnDestFC = base.Columns["DestFC"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFeatureClassID = new System.Data.DataColumn("FeatureClassID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeatureClassID);
                this.columnUploadCommandID = new System.Data.DataColumn("UploadCommandID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUploadCommandID);
                this.columnSourceFC = new System.Data.DataColumn("SourceFC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSourceFC);
                this.columnDestFC = new System.Data.DataColumn("DestFC", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestFC);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint11", new System.Data.DataColumn[] {
                                this.columnFeatureClassID}, false));
                this.columnFeatureClassID.AutoIncrement = true;
                this.columnFeatureClassID.AllowDBNull = false;
                this.columnFeatureClassID.Unique = true;
                this.columnFeatureClassID.Caption = "SDEFeatureClassID";
                this.columnUploadCommandID.Caption = "SDEWorkspaceID";
                this.columnSourceFC.Caption = "FeatureClassName";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeatureClassRow NewFeatureClassRow() {
                return ((FeatureClassRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FeatureClassRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FeatureClassRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FeatureClassRowChanged != null)) {
                    this.FeatureClassRowChanged(this, new FeatureClassRowChangeEvent(((FeatureClassRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FeatureClassRowChanging != null)) {
                    this.FeatureClassRowChanging(this, new FeatureClassRowChangeEvent(((FeatureClassRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FeatureClassRowDeleted != null)) {
                    this.FeatureClassRowDeleted(this, new FeatureClassRowChangeEvent(((FeatureClassRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FeatureClassRowDeleting != null)) {
                    this.FeatureClassRowDeleting(this, new FeatureClassRowChangeEvent(((FeatureClassRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFeatureClassRow(FeatureClassRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                SDELoaderConfig ds = new SDELoaderConfig();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FeatureClassDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UploadCommandRow : System.Data.DataRow {
            
            private UploadCommandDataTable tableUploadCommand;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UploadCommandRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUploadCommand = ((UploadCommandDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UploadCommandID {
                get {
                    return ((int)(this[this.tableUploadCommand.UploadCommandIDColumn]));
                }
                set {
                    this[this.tableUploadCommand.UploadCommandIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableUploadCommand.DescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'UploadCommand\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUploadCommand.DescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableUploadCommand.DescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableUploadCommand.DescriptionColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PGDBWorkspaceRow[] GetPGDBWorkspaceRows() {
                return ((PGDBWorkspaceRow[])(base.GetChildRows(this.Table.ChildRelations["UploadCommand_PGDBWorkspace"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SDEWorkspaceRow[] GetSDEWorkspaceRows() {
                return ((SDEWorkspaceRow[])(base.GetChildRows(this.Table.ChildRelations["UploadCommand_SDEWorkspace"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeatureClassRow[] GetFeatureClassRows() {
                return ((FeatureClassRow[])(base.GetChildRows(this.Table.ChildRelations["SDEWorkspace_SDEFeatureClass"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PGDBWorkspaceRow : System.Data.DataRow {
            
            private PGDBWorkspaceDataTable tablePGDBWorkspace;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PGDBWorkspaceRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePGDBWorkspace = ((PGDBWorkspaceDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PGDBWorkspaceID {
                get {
                    return ((int)(this[this.tablePGDBWorkspace.PGDBWorkspaceIDColumn]));
                }
                set {
                    this[this.tablePGDBWorkspace.PGDBWorkspaceIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UploadCommandID {
                get {
                    try {
                        return ((int)(this[this.tablePGDBWorkspace.UploadCommandIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UploadCommandID\' in table \'PGDBWorkspace\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePGDBWorkspace.UploadCommandIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PGDB {
                get {
                    try {
                        return ((string)(this[this.tablePGDBWorkspace.PGDBColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PGDB\' in table \'PGDBWorkspace\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePGDBWorkspace.PGDBColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UploadCommandRow UploadCommandRow {
                get {
                    return ((UploadCommandRow)(this.GetParentRow(this.Table.ParentRelations["UploadCommand_PGDBWorkspace"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["UploadCommand_PGDBWorkspace"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUploadCommandIDNull() {
                return this.IsNull(this.tablePGDBWorkspace.UploadCommandIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUploadCommandIDNull() {
                this[this.tablePGDBWorkspace.UploadCommandIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPGDBNull() {
                return this.IsNull(this.tablePGDBWorkspace.PGDBColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPGDBNull() {
                this[this.tablePGDBWorkspace.PGDBColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SDEWorkspaceRow : System.Data.DataRow {
            
            private SDEWorkspaceDataTable tableSDEWorkspace;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SDEWorkspaceRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSDEWorkspace = ((SDEWorkspaceDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SDEWorkspaceID {
                get {
                    return ((int)(this[this.tableSDEWorkspace.SDEWorkspaceIDColumn]));
                }
                set {
                    this[this.tableSDEWorkspace.SDEWorkspaceIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UploadCommandID {
                get {
                    try {
                        return ((int)(this[this.tableSDEWorkspace.UploadCommandIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UploadCommandID\' in table \'SDEWorkspace\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSDEWorkspace.UploadCommandIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Server {
                get {
                    try {
                        return ((string)(this[this.tableSDEWorkspace.ServerColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Server\' in table \'SDEWorkspace\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSDEWorkspace.ServerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Instance {
                get {
                    try {
                        return ((string)(this[this.tableSDEWorkspace.InstanceColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Instance\' in table \'SDEWorkspace\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSDEWorkspace.InstanceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Database {
                get {
                    try {
                        return ((string)(this[this.tableSDEWorkspace.DatabaseColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Database\' in table \'SDEWorkspace\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSDEWorkspace.DatabaseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string User {
                get {
                    try {
                        return ((string)(this[this.tableSDEWorkspace.UserColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'User\' in table \'SDEWorkspace\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSDEWorkspace.UserColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableSDEWorkspace.PasswordColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Password\' in table \'SDEWorkspace\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSDEWorkspace.PasswordColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Version {
                get {
                    try {
                        return ((string)(this[this.tableSDEWorkspace.VersionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Version\' in table \'SDEWorkspace\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSDEWorkspace.VersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UploadCommandRow UploadCommandRow {
                get {
                    return ((UploadCommandRow)(this.GetParentRow(this.Table.ParentRelations["UploadCommand_SDEWorkspace"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["UploadCommand_SDEWorkspace"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUploadCommandIDNull() {
                return this.IsNull(this.tableSDEWorkspace.UploadCommandIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUploadCommandIDNull() {
                this[this.tableSDEWorkspace.UploadCommandIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServerNull() {
                return this.IsNull(this.tableSDEWorkspace.ServerColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServerNull() {
                this[this.tableSDEWorkspace.ServerColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstanceNull() {
                return this.IsNull(this.tableSDEWorkspace.InstanceColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstanceNull() {
                this[this.tableSDEWorkspace.InstanceColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDatabaseNull() {
                return this.IsNull(this.tableSDEWorkspace.DatabaseColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDatabaseNull() {
                this[this.tableSDEWorkspace.DatabaseColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNull() {
                return this.IsNull(this.tableSDEWorkspace.UserColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNull() {
                this[this.tableSDEWorkspace.UserColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPasswordNull() {
                return this.IsNull(this.tableSDEWorkspace.PasswordColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPasswordNull() {
                this[this.tableSDEWorkspace.PasswordColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVersionNull() {
                return this.IsNull(this.tableSDEWorkspace.VersionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVersionNull() {
                this[this.tableSDEWorkspace.VersionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FeatureClassRow : System.Data.DataRow {
            
            private FeatureClassDataTable tableFeatureClass;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FeatureClassRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFeatureClass = ((FeatureClassDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FeatureClassID {
                get {
                    return ((int)(this[this.tableFeatureClass.FeatureClassIDColumn]));
                }
                set {
                    this[this.tableFeatureClass.FeatureClassIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UploadCommandID {
                get {
                    try {
                        return ((int)(this[this.tableFeatureClass.UploadCommandIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'UploadCommandID\' in table \'FeatureClass\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeatureClass.UploadCommandIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SourceFC {
                get {
                    try {
                        return ((string)(this[this.tableFeatureClass.SourceFCColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SourceFC\' in table \'FeatureClass\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeatureClass.SourceFCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestFC {
                get {
                    try {
                        return ((string)(this[this.tableFeatureClass.DestFCColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'DestFC\' in table \'FeatureClass\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeatureClass.DestFCColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UploadCommandRow UploadCommandRow {
                get {
                    return ((UploadCommandRow)(this.GetParentRow(this.Table.ParentRelations["SDEWorkspace_SDEFeatureClass"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SDEWorkspace_SDEFeatureClass"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUploadCommandIDNull() {
                return this.IsNull(this.tableFeatureClass.UploadCommandIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUploadCommandIDNull() {
                this[this.tableFeatureClass.UploadCommandIDColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSourceFCNull() {
                return this.IsNull(this.tableFeatureClass.SourceFCColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSourceFCNull() {
                this[this.tableFeatureClass.SourceFCColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestFCNull() {
                return this.IsNull(this.tableFeatureClass.DestFCColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestFCNull() {
                this[this.tableFeatureClass.DestFCColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UploadCommandRowChangeEvent : System.EventArgs {
            
            private UploadCommandRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UploadCommandRowChangeEvent(UploadCommandRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UploadCommandRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PGDBWorkspaceRowChangeEvent : System.EventArgs {
            
            private PGDBWorkspaceRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PGDBWorkspaceRowChangeEvent(PGDBWorkspaceRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PGDBWorkspaceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SDEWorkspaceRowChangeEvent : System.EventArgs {
            
            private SDEWorkspaceRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SDEWorkspaceRowChangeEvent(SDEWorkspaceRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SDEWorkspaceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FeatureClassRowChangeEvent : System.EventArgs {
            
            private FeatureClassRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeatureClassRowChangeEvent(FeatureClassRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeatureClassRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591
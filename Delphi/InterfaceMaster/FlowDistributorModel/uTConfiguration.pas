{*******************************************************}
{*
{* uTConfiguration.pas
{* Delphi Implementation of the Class TDistributionConfiguration
{* Generated by Enterprise Architect
{* Created on:      03-May-2006 11:45:48 AM
{* Original author: Arnel Mandilag
{*
{*******************************************************}

unit uTConfiguration;

interface

uses SysUtils, IniFiles, Classes, DateUtils, StrUtils, Types,
	uTNetwork, uTDistributionCombiner, uTMainConfigSpecs;

type

	TDistributionConfigSpecs = record
		HydrographFile: TFileName;
		Multiplier: Double;
		VelocityFactor: Double;
		NumHeaderLines: Integer;
		DateFormat: String;
		TimeFormat: String;
		Delimiter: String;
		RootLink: String;
		StopLinks: String;
	end;

  ///<summary>
  ///  Manages the configuration INI file to control the distribution
  ///  The configuration file specifies the following:
  ///  The model over which a flow file will be distributed;
  ///  The distribution(s) (flow file, partial trace)
  ///</summary>
	TDistributionConfiguration = class
	private
		IniFile: TMemIniFile;
		Network: TNetwork;
		DistributionCombiner: TDistributionCombiner;
	public
		MainConfigSpecs: TMainConfigSpecs;
		DistributionSpecs: array of TDistributionConfigSpecs;
		function LagTime: Double;
		function EarliestLaggedDistributionTime: TDateTime;
		procedure WriteDistributedFile(AFile: TFileName);
		function SetUpDistributions: Boolean;
    function ValidConfiguration: Boolean;
		//Create reads the INI file and passes distribution information to the combiner.
		constructor Create(AFile: String); overload;
		destructor Destroy; override;
		constructor Create; overload;
	end;

implementation

uses dmIM_FlowDistributionSupport, uTLinksList, uTLink, uTFlowFileSpecs,
	fDistributeFlowsToModel, RzErrHnd, DB, PDXDateUtils, CodeSiteLogging, Dialogs;

{implementation of TDistributionConfiguration}

constructor TDistributionConfiguration.Create;
begin
	inherited Create;
end;

function TDistributionConfiguration.SetUpDistributions: Boolean;
var
	NumDistributions: Integer;
	StartTimeString: String;
	StartTime: TDateTime;
	EndTimeString: String;
	EndTime: TDateTime;
	i: Integer;
	RootLink: TLink;
	RootLinkID: Integer;
	StopLink: TLink;
	StopLinks: TStringList;
	StopLinkID: Integer;
	StopLinksAsTLink: TLinksList;
	FlowFilePath: TFileName;
	FlowFileSpecs: TFlowFileSpecs;
	j: Integer;
	AddedIndex: Integer;
	CheckedDelimiter: String;
	TimeStep: Double;
	Multiplier: Double;
	VelocityFactor: Double;
  BadDistribution: Boolean;
  DistributionSetupFailed: Boolean;
begin

  DistributionSetupFailed := False;

	Assert(Network <> nil, 'SetUpDistributions: Network not setup');
	NumDistributions := IniFile.ReadInteger('main', 'ndistribs', 0);
	MainConfigSpecs.NumDistribs := NumDistributions;

	StartTimeString := IniFile.ReadString('main', 'starttime', '');
	if Length(StartTimeString) > 0 then
		StartTime := StrToDateTime(StartTimeString)
	else
		StartTime := MinDateTime;
	MainConfigSpecs.StartTime := StartTime;

	EndTimeString := IniFile.ReadString('main', 'endtime', '');
	if Length(EndTimeString) > 0  then
		EndTime := StrToDateTime(EndTimeString)
	else
		EndTime := MaxDateTime;
	MainConfigSpecs.EndTime := EndTime;

	// Check date order
	if CompareDateTime(EndTime, StartTime) <= EqualsValue then
		frmDistributeFlowsToModel.errHandler.Add(
			Format('endtime of %s is not later than starttime of %s',
				[FormatDateTime('mm/dd/yyyy hh:mm', EndTime),
				FormatDateTime('mm/dd/yyyy hh:mm', StartTime)]), etValidation);

	StopLinks := TStringList.Create;
	StopLinksAsTLink := TLinksList.Create(False);
	SetLength(DistributionSpecs, NumDistributions);
	for i := 1 to NumDistributions  do
	begin
    BadDistribution := False;

		StopLinks.Clear;
		StopLinksAsTLink.Clear;

		RootLinkID := IniFile.ReadInteger('ndistrib'+IntToStr(i), 'rootlink', -1);
		if (MainConfigSpecs.LinkIDField = '') or
			(Uppercase(MainConfigSpecs.LinkIDField) = 'LinkID') then
			RootLink := Network.LinkByID(RootLinkID)
		else
		begin
			dmFlowDistributionSupport.adoLinks.Open;
			if dmFlowDistributionSupport.adoLinks.Locate(MainConfigSpecs.LinkIDField,
				RootLinkID, [loCaseInsensitive]) then
  			RootLink := Network.LinkByID(dmFlowDistributionSupport.adoLinks.FieldValues[
	  			'LinkID'])
      else
      begin
        frmDistributeFlowsToModel.errHandler.Add(
          Format('Distribution %d provided bad rootlink: %d', [i, RootLinkID]),
          etValidation);
        BadDistribution := True;
        RootLink := nil;
      end;
			dmFlowDistributionSupport.adoLinks.Close;
		end;

		// Identify root and stoplinks; convert to LinkID if necessary
		DistributionSpecs[i-1].RootLink := IntToStr(RootLink.LinkID);
		IniFile.ReadSection('stoplinks'+IntToStr(i), StopLinks);
		DistributionSpecs[i-1].StopLinks := '';
		if not ((MainConfigSpecs.LinkIDField = '') or
			(Uppercase(MainConfigSpecs.LinkIDField) = 'LinkID')) then
			dmFlowDistributionSupport.adoLinks.Open;
		for j := 0 to StopLinks.Count - 1 do
		begin
			if not ((MainConfigSpecs.LinkIDField = '') or
				(Uppercase(MainConfigSpecs.LinkIDField) = 'LinkID')) then
			begin
				if dmFlowDistributionSupport.adoLinks.Locate(MainConfigSpecs.LinkIDField,
					StopLinks[j], [loCaseInsensitive]) then
  				StopLink := Network.LinkByID(dmFlowDistributionSupport.adoLinks.FieldValues[
	  				'LinkID'])
        else
        begin
          frmDistributeFlowsToModel.errHandler.Add(
            Format('Distribution %d provided bad stoplink: %s', [i, StopLinks[j]]),
            etValidation);
          BadDistribution := True;
          StopLink := nil;
        end;
			end
			else
				StopLink := Network.LinkByID(StrToInt(StopLinks[j]));
			AddedIndex := StopLinksAsTLink.Add(StopLink);
      if BadDistribution then
        DistributionSpecs[i-1].StopLinks :=  ''
      else
  			DistributionSpecs[i-1].StopLinks := DistributionSpecs[i-1].StopLinks +
	  			IntToStr(StopLinksAsTLink[AddedIndex].LinkID) + ',';
		end;

    if BadDistribution then
      Continue;

		DistributionSpecs[i-1].StopLinks := LeftStr(DistributionSpecs[i-1].StopLinks,
			Length(DistributionSpecs[i-1].StopLinks)-1);
		if not ((MainConfigSpecs.LinkIDField = '') or
			(Uppercase(MainConfigSpecs.LinkIDField) = 'LinkID')) then
			dmFlowDistributionSupport.adoLinks.Close;

		FlowFilePath := IniFile.ReadString('ndistrib'+IntToStr(i), 'hydrographpath', '');
		DistributionSpecs[i-1].HydrographFile := FlowFilePath;

		// Revise the delimiter entry as blanks can be seen as an empty value for the
		// INI key.  Also, remove any quotes, which are required for multiple delimiters.
		// Replace any '#9's with a legit #9 (tabs)
		CheckedDelimiter := IniFile.ReadString('ndistrib'+IntToStr(i), 'Delimiter', ' ');
		if Length(CheckedDelimiter) = 0 then
			CheckedDelimiter := ' '
		else
		begin
			CheckedDelimiter := AnsiDequotedStr(CheckedDelimiter, '''');
			CheckedDelimiter := AnsiDequotedStr(CheckedDelimiter, '"');
		end;
		CheckedDelimiter := AnsiReplaceStr(CheckedDelimiter, '#9', #9);

		DistributionSpecs[i-1].Multiplier :=
			IniFile.ReadFloat('ndistrib'+IntToStr(i), 'multiplier', 1);
		DistributionSpecs[i-1].VelocityFactor :=
			IniFile.ReadFloat('ndistrib'+IntToStr(i), 'velocity', 1);

		FlowFileSpecs := TFlowFileSpecs.Create(
			IniFile.ReadInteger('ndistrib'+IntToStr(i), 'nheaderlines', 0),
			IniFile.ReadString('ndistrib'+IntToStr(i), 'Dateformat', 'MM/DD/YYYY'),
			IniFile.ReadString('ndistrib'+IntToStr(i), 'Timeformat', 'HH:MM:SS'),
			CheckedDelimiter, DistributionSpecs[i-1].Multiplier);
		DistributionSpecs[i-1].NumHeaderLines := FlowFileSpecs.HeaderLines;
		DistributionSpecs[i-1].DateFormat := FlowFileSpecs.DateFormat;
		DistributionSpecs[i-1].TimeFormat := FlowFileSpecs.TimeFormat;
		DistributionSpecs[i-1].Delimiter := FlowFileSpecs.Delimiter;

    Assert(not BadDistribution, 'Bad Distribution, cannot add');

    try
      DistributionCombiner.AddDistribution(Network, RootLink, StopLinksAsTLink,
        FlowFilePath, FlowFileSpecs, MainConfigSpecs.ModelPath,
        MainConfigSpecs, DistributionSpecs[i-1].VelocityFactor);
    except on E: Exception do
      begin
        DistributionCombiner.Clear;
        frmDistributeFlowsToModel.errHandler.Add(
          Format('Could not add distribution %d. Check your configuration file and ensure the '+
          'distribution table in [main] has nodes that match at least one node in the trace ' +
          'for this distribution.', [i]), etCritical);
        DistributionSetupFailed := True;
      end;
    end;
	end;

	// Set up time step; 5 minute default
  if not DistributionSetupFailed then
  begin
    TimeStep := IniFile.ReadFloat('main', 'timestep', -1);
    if TimeStep = -1 then
      TimeStep := 300;
    MainConfigSpecs.TimeStep := TimeStep;
    DistributionCombiner.TimeStep := TimeStep;

    DistributionCombiner.CurrentTime := DistributionCombiner.EarliestDistributionTime;
    if CompareDateTime(StartTime, MinDateTime) = EqualsValue then
      DistributionCombiner.StartTime := DistributionCombiner.CurrentTime
    else
      DistributionCombiner.StartTime := StartTime;

//    CodeSite.SendDateTime('DistributionCombiner.StartTime', DistributionCombiner.StartTime);

    DistributionCombiner.EndTime := EndTime;

//    CodeSite.SendDateTime('DistributionCombiner.EndTime', DistributionCombiner.EndTime);

    DistributionCombiner.SetDistributionMasterTimes;

    StopLinks.Free;
    StopLinksAsTLink.Free;
  end;
end;

function TDistributionConfiguration.ValidConfiguration: Boolean;
begin
  Result := DistributionCombiner.NumDistributions > 0; 
end;

procedure TDistributionConfiguration.WriteDistributedFile(AFile: TFileName);
begin
	DistributionCombiner.OutputPath := AFile;
	DistributionCombiner.WriteInterface;
end;

constructor TDistributionConfiguration.Create(AFile: String);
var
	ModelPath: String;
	LinkIDField: String;
	NodeField: String;
  DistributionSource: String;
	DistributionField: String;
  DistributionTable: String;
begin
	frmDistributeFlowsToModel.errHandler.Clear;
	IniFile := TMemIniFile.Create(AFile);
	ModelPath := IniFile.ReadString('main', 'modelpath', '');
	LinkIDField := IniFile.ReadString('main', 'linkidfield', '');
	NodeField := IniFile.ReadString('main', 'nodefield', '');
	DistributionSource := IniFile.ReadString('main', 'distributionsource', '\dsc\mdl_dirsc_ac.mdb');
  DistributionTable := IniFile.ReadString('main', 'distributiontable', 'mdl_dirsc_ac');
	DistributionField := IniFile.ReadString('main', 'distributionfield', '');
	MainConfigSpecs.ModelPath := ModelPath;
	MainConfigSpecs.LinkIDField := LinkIDField;
	MainConfigSpecs.NodeField := NodeField;
  MainConfigSpecs.DistributionSource := DistributionSource;
  MainConfigSpecs.DistributionTable:= DistributionTable;
	MainConfigSpecs.DistributionField := DistributionField;
	Assert(Length(ModelPath)>0, 'ModelPath is empty');
  Assert(Length(DistributionField)>0, 'DistributionField is empty/not specified');

	Network := TNetwork.Create(ModelPath+'\model.ini');
	DistributionCombiner := TDistributionCombiner.Create;
	// Read in distributions
	SetUpDistributions;

	frmDistributeFlowsToModel.errHandler.Caption := 'Configuration File Problems';
	frmDistributeFlowsToModel.errHandler.HandleErrors;
	frmDistributeFlowsToModel.errHandler.Clear;
end;

destructor TDistributionConfiguration.Destroy;
begin
	IniFile.Free;
	inherited;
end;

function TDistributionConfiguration.EarliestLaggedDistributionTime: TDateTime;
begin
	Result := DistributionCombiner.EarliestDistributionTime;
end;

function TDistributionConfiguration.LagTime: Double;
begin
	Result := DistributionCombiner.LongestLagTime;
end;

end.
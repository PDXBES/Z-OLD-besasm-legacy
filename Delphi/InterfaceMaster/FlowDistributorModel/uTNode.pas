{*******************************************************}
{*
{* uTNode.pas
{* Delphi Implementation of the Class TNode
{* Generated by Enterprise Architect
{* Created on:      03-May-2006 11:45:49 AM
{* Original author: Arnel Mandilag
{*
{*******************************************************}

unit uTNode;

interface

uses SysUtils, Classes, DateUtils, Types,
	uTFlowSeriesList;

type

	//Manages how a distributions flow is applied
	TNode = class
	private
		ID: String;
	public
		Proportion: Double;
		LengthFromRoot: Double;
		TimeToRoot: Double;
		function DistributeFlow(ATime: TDateTime; AFlowHistory: TFlowSeriesList;
			MaxLagTime: Double): Double;
		constructor Create(AID: String; ALengthFromRoot: Double; AProportion: Double;
			ATimeToRoot: Double); overload;
		constructor Create(ANode: TNode); overload;
		property NodeID:String read ID;
		procedure SetLengthFromRoot(ALength: Double);
		procedure SetTimeToRoot(ATime: Double);
		procedure SetProportion(AProportion: Double);
		destructor Destroy; override;
	end;

implementation

uses CodeSiteLogging;

{implementation of TNode}

constructor TNode.Create(ANode: TNode);
begin
	ID := ANode.ID;
	LengthFromRoot := ANode.LengthFromRoot;
	Proportion := ANode.Proportion;
	TimeToRoot := ANode.TimeToRoot;
end;

destructor TNode.Destroy;
begin
	inherited Destroy;
end;

function TNode.DistributeFlow(ATime: TDateTime; AFlowHistory: TFlowSeriesList;
	MaxLagTime: Double): Double;
var
	UnlaggedTime: TDateTime;
begin
	UnlaggedTime := IncMinute(ATime, (Round(TimeToRoot)));
//  if ATime > 0 then
//  begin
//    CodeSite.SendFmtMsg('ID %s TimeToRoot %d min', [ID, Round(TimeToRoot)]);
//    CodeSite.SendDateTime('DistributeFlow, ATime', ATime);
//    CodeSite.SendDateTime('DistributeFlow, UnlaggedTime', UnlaggedTime);
//  end;
	Result := Proportion * AFlowHistory.FlowAtTime(UnlaggedTime);
end;

procedure TNode.SetLengthFromRoot(ALength: Double);
begin
	TimeToRoot := ALength;
end;

procedure TNode.SetProportion(AProportion: Double);
begin
	Proportion := AProportion;
end;

procedure TNode.SetTimeToRoot(ATime: Double);
begin
	TimeToRoot := ATime;
end;

constructor TNode.Create(AID: String; ALengthFromRoot: Double;
	AProportion: Double; ATimeToRoot: Double);
begin
	ID := AID;
	LengthFromRoot := ALengthFromRoot;
	Proportion := AProportion;
	TimeToRoot := ATimeToRoot;
end;

end.
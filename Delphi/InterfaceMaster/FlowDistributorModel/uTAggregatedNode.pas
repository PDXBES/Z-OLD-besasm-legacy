{*******************************************************}
{* 
{* uTAggregatedNode.pas
{* Delphi Implementation of the Class TAggregatedNode
{* Generated by Enterprise Architect
{* Created on:      03-May-2006 11:45:48 AM
{* Original author: Arnel Mandilag
{*  
{*******************************************************}

unit uTAggregatedNode;

interface

uses SysUtils, Classes, utNodeMappingsList, uTNodeMapping, uTDistribution,
	utNode;

type

  TAggregatedNode = class
  private
		NodeMappings: TNodeMappingsList;
	protected
		//Sum up all the node mappings' flows
		function GetFlow: Double;
	public
    ID: String;
    //Adds a distribution/node mapping so that the TAggregatedNode knows what nodes
		//to query for flow
		procedure AddMapping(ADistribution: TDistribution; ANode: String);
		constructor Create(ID: String); overload;
		destructor Destroy; override;
		property TotalFlow:Double read GetFlow;
	end;

implementation

{implementation of TAggregatedNode}

procedure TAggregatedNode.AddMapping(ADistribution: TDistribution; ANode: String);
var
	AMapping: TNodeMapping;
begin
	AMapping := TNodeMapping.Create(ADistribution, ANode);
	NodeMappings.Add(AMapping);
end;

function TAggregatedNode.GetFlow: Double;
var
	i: Integer;
begin
	Result := 0;
	for i := 0 to NodeMappings.Count - 1 do
		Result := Result + NodeMappings[i].GetFlow;
end;

constructor TAggregatedNode.Create(ID: String);
begin
	NodeMappings := TNodeMappingsList.Create;
	Self.ID := ID;
end;

destructor TAggregatedNode.Destroy;
begin
	NodeMappings.Free;
	inherited;
end;
end.
{*******************************************************}
{* 
{* uTNodeMappingsList.pas
{* Delphi Implementation of the Class TNodeMappingsList
{* Generated by Enterprise Architect
{* Created on:      03-May-2006 11:45:49 AM
{* Original author: Arnel Mandilag
{*  
{*******************************************************}

unit uTNodeMappingsList;

interface

uses SysUtils, Classes, Contnrs, uTNodeMapping;

type

	TNodeMappingsList = class
	private
		NodeMappings: TObjectList;
	protected
		function GetItem(AIndex: Integer): TNodeMapping;
	public
		function Add(AMapping: TNodeMapping): Integer;
		constructor Clear; overload;
		function Count: Integer;
		procedure Delete(AIndex: Integer);
		constructor Create; overload;
		destructor Destroy; override;
		property Items[Index : Integer]:TNodeMapping read GetItem; default;
	end;

implementation

{implementation of TNodeMappingsList}

function TNodeMappingsList.Add(AMapping: TNodeMapping): Integer;
var
  i: Integer;
begin
	// Check for a duplicate mapping, reject if so
	for i := 0 to NodeMappings.Count - 1 do
		if TNodeMapping(NodeMappings[i]).SameMapping(AMapping) then
			Exit;
	NodeMappings.Add(AMapping)
end;

constructor TNodeMappingsList.Clear;
begin
	NodeMappings.Clear;
end;

function TNodeMappingsList.Count: Integer;
begin
	Result := NodeMappings.Count;
end;

procedure TNodeMappingsList.Delete(AIndex: Integer);
begin
	NodeMappings.Delete(AIndex);
end;

function TNodeMappingsList.GetItem(AIndex: Integer): TNodeMapping;
begin
	Result := TNodeMapping(NodeMappings[AIndex]);
end;

constructor TNodeMappingsList.Create;
begin
	NodeMappings := TObjectList.Create(True);
end;

destructor TNodeMappingsList.Destroy;
begin
	NodeMappings.Free;
	inherited;
end;
end.